[{"data":1,"prerenderedAt":984},["ShallowReactive",2],{"/matrix/regress":3,"/matrix/regress-surround":973},{"id":4,"title":5,"body":6,"description":943,"extension":944,"meta":945,"navigation":960,"path":72,"seo":970,"stem":971,"__hash__":972},"content/matrix/regress.md","Matrix Extension Dictionary: regress",{"type":7,"value":8,"toc":932},"minimark",[9],[10,11,15,16,15,26,47,55,85],"div",{"className":12,"id":14},[13],"dict_entry","regress","\n  ",[17,18,20,21,15],"h3",{"id":19},"matrixregress","\n    ",[22,23,25],"a",{"href":24},"#regress","matrix:regress",[27,28,32],"h4",{"id":29,"className":30},"matrixregress-data-matrix",[31],"section-heading",[22,33,20,37,15],{"className":34,"href":36},[35],"section-anchor","#----matrixregress-data-matrix--",[38,39,42,43],"span",{"className":40},[41],"prim_example","matrix:regress ",[44,45,46],"i",{},"data-matrix",[48,49,50,51,54],"p",{},"All three of the forecast primitives above are just special cases\nof performing an OLS (ordinary-least-squares) linear regression â€”\nthe matrix:regress primitive provides a flexible/general-purpose\napproach. The input is a matrix ",[52,53,46],"em",{},", with the first\ncolumn being the observations on the dependent variable and each\nsubsequent column being the observations on the (1 or more)\nindependent variables. Thus each row consists of an observation of\nthe dependent variable followed by the corresponding observations\nfor each independent variable.",[48,56,57,58,62,63,76,77,84],{},"The output is a Logo nested list composed of two elements. The\nfirst element is a list containing the regression constant followed\nby the coefficients on each of the independent variables. The\nsecond element is a 3-element list containing the R",[59,60,61],"sup",{},"2","\nstatistic, the total sum of squares, and the residual sum of\nsquares. The following code example shows how the ",[64,65,68],"code",{"className":66},[67],"netlogo-command",[22,69,25],{"className":70,"dataDisplayText":25,"href":72,"rel":73,"target":75,"title":25},[71],"netlogo-wiki-link","/matrix/regress",[74],"noopener","_self"," primitive can be used to\nperform the same function as the code examples shown in the\nmatrix:forecast-*-growth primitives above. (However, keep in mind\nthat the ",[64,78,80],{"className":79},[67],[22,81,25],{"className":82,"dataDisplayText":25,"href":72,"rel":83,"target":75,"title":25},[71],[74]," primitive is\nmore powerful than this, and can have many more independent\nvariables in the regression, as indicated in the fourth example\nbelow.)",[86,87,88],"pre",{},[64,89,90,96,99,104,105,110,111,104,116,104,120,104,124,104,128,104,132,136,137,139,104,142,146,147,104,152,104,156,159,160,104,164,104,168,171,172,176,178,104,181,104,185,104,188,146,192,104,196,104,199,202,203,205,104,208,104,212,104,216,146,220,104,223,104,226,202,229,231,104,234,104,238,104,241,146,245,104,248,104,251,202,254,256,104,259,263,264,104,267,146,270,104,273,104,276,202,279,281,285,287,146,291,146,294,104,297,104,301,104,304,104,308,312,313,312,316,312,319,322,323,325,327,331,333,104,336,340,341,104,345,110,349,104,352,104,355,104,358,104,361,104,364,367,368,370,104,373,146,377,104,380,104,383,159,386,104,389,104,392,171,395,398,400,104,403,104,407,104,410,146,413,104,416,104,419,202,422,424,104,427,104,431,104,435,104,438,146,441,104,444,104,447,202,450,452,104,455,104,459,104,462,104,465,146,468,104,471,104,474,202,477,479,104,482,486,487,104,490,146,493,104,496,104,499,202,502,504,507,509,146,512,146,515,104,518,104,521,104,524,104,528,312,531,312,534,312,537,322,540,542,544,548,550,104,553,340,557,104,560,110,563,104,566,104,569,104,572,104,575,104,578,367,581,583,104,586,146,590,104,593,104,596,159,599,104,602,104,605,171,608,611,613,104,616,104,620,104,623,146,626,104,629,104,632,202,635,637,104,640,104,644,104,647,104,650,146,653,104,656,104,659,202,662,664,104,667,671,672,104,675,146,678,104,681,104,684,202,687,689,104,692,486,696,104,699,146,702,104,705,104,708,202,711,713,146,716,146,719,104,722,104,725,146,728,104,731,104,734,737,738,312,741,312,744,322,747,749,751,755,757,761,763,767,769,104,772,110,776,104,779,104,783,104,787,104,791,136,795,797,104,800,110,804,104,808,104,811,104,814,104,818,136,821,823,104,826,110,830,104,833,104,836,104,839,104,842,136,846,848,104,851,104,854,146,857,104,860,104,863,104,866,202,869,871,875,876,104,880,104,884,888,889,104,893,104,897,901,902,904,908,910,914,916,920,922,926,928],{},[38,91,95],{"className":92},[93,94],"token","comment",";; this is equivalent to what the matrix:forecast-linear-growth does",[97,98],"br",{},[38,100,103],{"className":101},[93,102],"command","let"," ",[38,106,109],{"className":107},[93,108],"variable","data-list"," [",[38,112,115],{"className":113},[93,114],"number","20",[38,117,119],{"className":118},[93,114],"25",[38,121,123],{"className":122},[93,114],"28",[38,125,127],{"className":126},[93,114],"32",[38,129,131],{"className":130},[93,114],"35",[38,133,135],{"className":134},[93,114],"39","]",[97,138],{},[38,140,103],{"className":141},[93,102],[38,143,145],{"className":144},[93,108],"indep-var"," (",[38,148,151],{"className":149},[93,150],"reporter","n-values",[38,153,155],{"className":154},[93,150],"length",[38,157,109],{"className":158},[93,108]," [ ",[38,161,163],{"className":162},[93,108],"x",[38,165,167],{"className":166},[93,150],"->",[38,169,163],{"className":170},[93,108]," ]) ",[38,173,175],{"className":174},[93,94],"; 0,1,2...,5",[97,177],{},[38,179,103],{"className":180},[93,102],[38,182,184],{"className":183},[93,108],"lin-output",[38,186,25],{"className":187},[93,108],[38,189,191],{"className":190},[93,108],"matrix:from-column-list",[38,193,195],{"className":194},[93,150],"list",[38,197,109],{"className":198},[93,108],[38,200,145],{"className":201},[93,108],")",[97,204],{},[38,206,103],{"className":207},[93,102],[38,209,211],{"className":210},[93,108],"lincnst",[38,213,215],{"className":214},[93,150],"item",[38,217,219],{"className":218},[93,114],"0",[38,221,215],{"className":222},[93,150],[38,224,219],{"className":225},[93,114],[38,227,184],{"className":228},[93,108],[97,230],{},[38,232,103],{"className":233},[93,102],[38,235,237],{"className":236},[93,108],"linslpe",[38,239,215],{"className":240},[93,150],[38,242,244],{"className":243},[93,114],"1",[38,246,215],{"className":247},[93,150],[38,249,219],{"className":250},[93,114],[38,252,184],{"className":253},[93,108],[97,255],{},[38,257,103],{"className":258},[93,102],[38,260,262],{"className":261},[93,108],"linR2","   ",[38,265,215],{"className":266},[93,150],[38,268,219],{"className":269},[93,114],[38,271,215],{"className":272},[93,150],[38,274,244],{"className":275},[93,114],[38,277,184],{"className":278},[93,108],[97,280],{},[38,282,284],{"className":283},[93,94],";;Note the \"6\" here is because we want to forecast the value at time t=6.",[97,286],{},[38,288,290],{"className":289},[93,102],"print",[38,292,195],{"className":293},[93,150],[38,295,211],{"className":296},[93,108],[38,298,300],{"className":299},[93,150],"+",[38,302,237],{"className":303},[93,108],[38,305,307],{"className":306},[93,150],"*",[38,309,311],{"className":310},[93,114],"6",") (",[38,314,211],{"className":315},[93,108],[38,317,237],{"className":318},[93,108],[38,320,262],{"className":321},[93,108],"))",[97,324],{},[97,326],{},[38,328,330],{"className":329},[93,94],";; this is equivalent to what the matrix:forecast-compound-growth does",[97,332],{},[38,334,103],{"className":335},[93,102],[38,337,339],{"className":338},[93,108],"com-log-data-list","  (",[38,342,344],{"className":343},[93,150],"map",[38,346,348],{"className":347},[93,150],"ln",[38,350,115],{"className":351},[93,114],[38,353,119],{"className":354},[93,114],[38,356,123],{"className":357},[93,114],[38,359,127],{"className":360},[93,114],[38,362,131],{"className":363},[93,114],[38,365,135],{"className":366},[93,114],"])",[97,369],{},[38,371,103],{"className":372},[93,102],[38,374,376],{"className":375},[93,108],"com-indep-var2",[38,378,151],{"className":379},[93,150],[38,381,155],{"className":382},[93,150],[38,384,339],{"className":385},[93,108],[38,387,163],{"className":388},[93,108],[38,390,167],{"className":391},[93,150],[38,393,163],{"className":394},[93,108],[38,396,175],{"className":397},[93,94],[97,399],{},[38,401,103],{"className":402},[93,102],[38,404,406],{"className":405},[93,108],"com-output",[38,408,25],{"className":409},[93,108],[38,411,191],{"className":412},[93,108],[38,414,195],{"className":415},[93,150],[38,417,339],{"className":418},[93,108],[38,420,376],{"className":421},[93,108],[97,423],{},[38,425,103],{"className":426},[93,102],[38,428,430],{"className":429},[93,108],"comcnst",[38,432,434],{"className":433},[93,150],"exp",[38,436,215],{"className":437},[93,150],[38,439,219],{"className":440},[93,114],[38,442,215],{"className":443},[93,150],[38,445,219],{"className":446},[93,114],[38,448,406],{"className":449},[93,108],[97,451],{},[38,453,103],{"className":454},[93,102],[38,456,458],{"className":457},[93,108],"comprop",[38,460,434],{"className":461},[93,150],[38,463,215],{"className":464},[93,150],[38,466,244],{"className":467},[93,114],[38,469,215],{"className":470},[93,150],[38,472,219],{"className":473},[93,114],[38,475,406],{"className":476},[93,108],[97,478],{},[38,480,103],{"className":481},[93,102],[38,483,485],{"className":484},[93,108],"comR2","       ",[38,488,215],{"className":489},[93,150],[38,491,219],{"className":492},[93,114],[38,494,215],{"className":495},[93,150],[38,497,244],{"className":498},[93,114],[38,500,406],{"className":501},[93,108],[97,503],{},[38,505,284],{"className":506},[93,94],[97,508],{},[38,510,290],{"className":511},[93,102],[38,513,195],{"className":514},[93,150],[38,516,430],{"className":517},[93,108],[38,519,307],{"className":520},[93,150],[38,522,458],{"className":523},[93,108],[38,525,527],{"className":526},[93,150],"^",[38,529,311],{"className":530},[93,114],[38,532,430],{"className":533},[93,108],[38,535,458],{"className":536},[93,108],[38,538,485],{"className":539},[93,108],[97,541],{},[97,543],{},[38,545,547],{"className":546},[93,94],";; this is equivalent to what the matrix:forecast-continuous-growth does",[97,549],{},[38,551,103],{"className":552},[93,102],[38,554,556],{"className":555},[93,108],"con-log-data-list",[38,558,344],{"className":559},[93,150],[38,561,348],{"className":562},[93,150],[38,564,115],{"className":565},[93,114],[38,567,119],{"className":568},[93,114],[38,570,123],{"className":571},[93,114],[38,573,127],{"className":574},[93,114],[38,576,131],{"className":577},[93,114],[38,579,135],{"className":580},[93,114],[97,582],{},[38,584,103],{"className":585},[93,102],[38,587,589],{"className":588},[93,108],"con-indep-var2",[38,591,151],{"className":592},[93,150],[38,594,155],{"className":595},[93,150],[38,597,556],{"className":598},[93,108],[38,600,163],{"className":601},[93,108],[38,603,167],{"className":604},[93,150],[38,606,163],{"className":607},[93,108],[38,609,175],{"className":610},[93,94],[97,612],{},[38,614,103],{"className":615},[93,102],[38,617,619],{"className":618},[93,108],"con-output",[38,621,25],{"className":622},[93,108],[38,624,191],{"className":625},[93,108],[38,627,195],{"className":628},[93,150],[38,630,556],{"className":631},[93,108],[38,633,589],{"className":634},[93,108],[97,636],{},[38,638,103],{"className":639},[93,102],[38,641,643],{"className":642},[93,108],"concnst",[38,645,434],{"className":646},[93,150],[38,648,215],{"className":649},[93,150],[38,651,219],{"className":652},[93,114],[38,654,215],{"className":655},[93,150],[38,657,219],{"className":658},[93,114],[38,660,619],{"className":661},[93,108],[97,663],{},[38,665,103],{"className":666},[93,102],[38,668,670],{"className":669},[93,108],"conrate","     ",[38,673,215],{"className":674},[93,150],[38,676,244],{"className":677},[93,114],[38,679,215],{"className":680},[93,150],[38,682,219],{"className":683},[93,114],[38,685,619],{"className":686},[93,108],[97,688],{},[38,690,103],{"className":691},[93,102],[38,693,695],{"className":694},[93,108],"conR2",[38,697,215],{"className":698},[93,150],[38,700,219],{"className":701},[93,114],[38,703,215],{"className":704},[93,150],[38,706,244],{"className":707},[93,114],[38,709,619],{"className":710},[93,108],[97,712],{},[38,714,290],{"className":715},[93,102],[38,717,195],{"className":718},[93,150],[38,720,643],{"className":721},[93,108],[38,723,307],{"className":724},[93,150],[38,726,434],{"className":727},[93,150],[38,729,670],{"className":730},[93,108],[38,732,307],{"className":733},[93,150],[38,735,311],{"className":736},[93,114],")) (",[38,739,643],{"className":740},[93,108],[38,742,670],{"className":743},[93,108],[38,745,695],{"className":746},[93,108],[97,748],{},[97,750],{},[38,752,754],{"className":753},[93,94],";; example of a regression with two independent variables:",[97,756],{},[38,758,760],{"className":759},[93,94],";; Pretend we have a dataset, and we want to know how well happiness",[97,762],{},[38,764,766],{"className":765},[93,94],";; is correlated to snack-food consumption and accomplishing goals.",[97,768],{},[38,770,103],{"className":771},[93,102],[38,773,775],{"className":774},[93,108],"happiness",[38,777,61],{"className":778},[93,114],[38,780,782],{"className":781},[93,114],"4",[38,784,786],{"className":785},[93,114],"5",[38,788,790],{"className":789},[93,114],"8",[38,792,794],{"className":793},[93,114],"10",[97,796],{},[38,798,103],{"className":799},[93,102],[38,801,803],{"className":802},[93,108],"snack-food-consumed",[38,805,807],{"className":806},[93,114],"3",[38,809,782],{"className":810},[93,114],[38,812,807],{"className":813},[93,114],[38,815,817],{"className":816},[93,114],"7",[38,819,790],{"className":820},[93,114],[97,822],{},[38,824,103],{"className":825},[93,102],[38,827,829],{"className":828},[93,108],"goals-accomplished",[38,831,61],{"className":832},[93,114],[38,834,807],{"className":835},[93,114],[38,837,786],{"className":838},[93,114],[38,840,790],{"className":841},[93,114],[38,843,845],{"className":844},[93,114],"9",[97,847],{},[38,849,290],{"className":850},[93,102],[38,852,25],{"className":853},[93,108],[38,855,191],{"className":856},[93,108],[38,858,195],{"className":859},[93,150],[38,861,775],{"className":862},[93,108],[38,864,803],{"className":865},[93,108],[38,867,829],{"className":868},[93,108],[97,870],{},[38,872,874],{"className":873},[93,108],"=>"," [[",[38,877,879],{"className":878},[93,114],"-0.14606741573033788",[38,881,883],{"className":882},[93,114],"0.3033707865168543",[38,885,887],{"className":886},[93,114],"0.8202247191011234","] [",[38,890,892],{"className":891},[93,114],"0.9801718440185063",[38,894,896],{"className":895},[93,114],"40.8",[38,898,900],{"className":899},[93,114],"0.8089887640449439","]]",[97,903],{},[38,905,907],{"className":906},[93,94],";; linear regression: happiness = -0.146 + 0.303*snack-food-consumed + 0.820*goals-accomplished",[97,909],{},[38,911,913],{"className":912},[93,94],";; (Since the 0.820 coefficient is higher than the 0.303 coefficient, it appears that each goal",[97,915],{},[38,917,919],{"className":918},[93,94],";; accomplished yields more happiness than does each snack consumed, although both are positively",[97,921],{},[38,923,925],{"className":924},[93,94],";; correlated with happiness.)",[97,927],{},[38,929,931],{"className":930},[93,94],";; Also, we see that R^2 = 0.98, so the two factors together provide a good fit.",{"title":933,"searchDepth":934,"depth":935,"links":936},"",5,3,[937],{"id":19,"depth":935,"text":938,"children":939},"\n    matrix:regress\n  ",[940],{"id":29,"depth":941,"text":942},4,"\n    matrix:regress data-matrix\n  ","Documentation for the regress primitive.","md",{"source":946,"metadataOutputPath":947,"projectConfig":948,"language":950,"output":960,"inheritFrom":961,"version":955,"layout":962,"dictionaryDisplayName":963,"dictionaryHomeDirectory":964,"indexFileURI":965,"currentItemId":14,"currentItemLabel":25,"primRoot":966,"icon":967,"extensionName":968,"assetsRoot":958},"../../external/extensions/matrix/matrix/regress.md","content/matrix/regress.metadata.yaml",{"defaults":949,"projectRoot":956,"outputRoot":957,"scanRoot":958,"engine":959,"version":955,"dedupeIdenticalDiskWrites":960},{"language":950,"output":951,"inheritFrom":952,"extension":944,"title":954,"version":955},"en",false,[953],0,"NetLogo User Manual","7.0.1",".","content","/Volumes/CCL/netlogo/Helio/external/extensions/matrix","mustache",true,[953],"catalog","Matrix Extension Dictionary","/matrix.html","/_index/extensions/matrix.txt","matrix","i-mdi-matrix",{"shortName":966,"fullName":969},"Matrix",{"title":5,"description":943},"matrix/regress","L5vjTx7xE9gj4Winw40r3FxuX5Rui4nNJq15VF_lA28",[974,979],{"title":975,"path":976,"stem":977,"description":978},"Matrix Extension Dictionary: real-eigenvalues","/matrix/real-eigenvalues","matrix/real-eigenvalues","Documentation for the real-eigenvalues primitive.",{"title":980,"path":981,"stem":982,"description":983},"Matrix Extension Dictionary: set","/matrix/set","matrix/set","Documentation for the set primitive.",1761669112343]