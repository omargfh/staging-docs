[{"data":1,"prerenderedAt":1184},["ShallowReactive",2],{"/py":3,"/py-surround":1174},{"id":4,"title":5,"body":6,"description":1151,"extension":1152,"meta":1153,"navigation":1167,"path":1171,"seo":1172,"stem":58,"__hash__":1173},"content/py.md","Python Extension",{"type":7,"value":8,"toc":1105},"minimark",[9,22,32,36,69,112,115,315,330,336,339,349,352,363,366,373,383,397,411,420,427,475,484,626,679,733,785,870,922],[10,11,15],"h1",{"id":12,"className":13},"python",[14],"section-heading",[16,17,21],"a",{"className":18,"href":20},[19],"section-anchor","#python","Python",[23,24,27],"h2",{"id":25,"className":26},"using",[14],[16,28,31],{"className":29,"href":30},[19],"#using","Using",[33,34,35],"p",{},"As with all NetLogo extensions, you must declare that you’re using this extension in your NetLogo code with:",[37,38,39],"pre",{},[40,41,42,49,50,53,54,59,53,61,66,68],"code",{},[43,44,48],"span",{"className":45},[46,47],"token","keyword","extensions"," [",[51,52],"br",{},"  ",[43,55,58],{"className":56},[46,57],"variable","py",[51,60],{},[43,62,65],{"className":63},[46,64],"comment","; ... your other extensions",[51,67],{},"]",[33,70,71,72,83,84,87,88,91,92,95,96,98,99,102,103,106,107,111],{},"The general workflow of this extension is to run ",[40,73,74,78,79],{},[43,75,77],{"className":76},[46,57],"py:setup"," ",[43,80,82],{"className":81},[46,57],"py:python"," to initialize the Python session that NetLogo will talk to, and then use ",[40,85,86],{},"py:run",", ",[40,89,90],{},"py:runresult",", and ",[40,93,94],{},"py:set"," to interact with that Python session.\nBy default, ",[40,97,82],{}," will report the latest version of Python that the extension finds on your system.\nYou can also use ",[40,100,101],{},"py:python3"," or ",[40,104,105],{},"py:python2"," to use Python 3 or 2 specifically.\nSee the ",[16,108,110],{"href":109},"#configuring","Configuring"," section below to specify exactly which Python installations to use.",[33,113,114],{},"Here’s an example to get you started:",[37,116,117],{},[40,118,119,78,123,78,126,129,131,78,134,78,139,78,142,147,149,78,153,158,160,78,163,78,166,170,172,176,178,78,181,78,184,188,190,78,193,78,196,78,199,203,205,49,208,78,212,78,215,78,218,78,222,78,226,78,230,78,234,78,238,78,242,68,246,248,78,251,78,254,258,259,264,265,78,269,273,275,78,278,78,281,78,284,288,290,78,293,297,299,78,302,78,305,309,311],{},[43,120,122],{"className":121},[46,57],"observer>",[43,124,77],{"className":125},[46,57],[43,127,82],{"className":128},[46,57],[51,130],{},[43,132,122],{"className":133},[46,57],[43,135,138],{"className":136},[46,137],"command","show",[43,140,90],{"className":141},[46,57],[43,143,146],{"className":144},[46,145],"string","\"1 + 1\"",[51,148],{},[43,150,152],{"className":151},[46,57],"observer:",[43,154,157],{"className":155},[46,156],"number","2",[51,159],{},[43,161,122],{"className":162},[46,57],[43,164,86],{"className":165},[46,57],[43,167,169],{"className":168},[46,145],"\"print('hi')\"",[51,171],{},[43,173,175],{"className":174},[46,57],"hi",[51,177],{},[43,179,122],{"className":180},[46,57],[43,182,86],{"className":183},[46,57],[43,185,187],{"className":186},[46,145],"\"import math\"",[51,189],{},[43,191,122],{"className":192},[46,57],[43,194,138],{"className":195},[46,137],[43,197,90],{"className":198},[46,57],[43,200,202],{"className":201},[46,145],"\"[math.factorial(i) for i in range(10)]\"",[51,204],{},[43,206,152],{"className":207},[46,57],[43,209,211],{"className":210},[46,156],"1",[43,213,211],{"className":214},[46,156],[43,216,157],{"className":217},[46,156],[43,219,221],{"className":220},[46,156],"6",[43,223,225],{"className":224},[46,156],"24",[43,227,229],{"className":228},[46,156],"120",[43,231,233],{"className":232},[46,156],"720",[43,235,237],{"className":236},[46,156],"5040",[43,239,241],{"className":240},[46,156],"40320",[43,243,245],{"className":244},[46,156],"362880",[51,247],{},[43,249,122],{"className":250},[46,57],[43,252,94],{"className":253},[46,57],[43,255,257],{"className":256},[46,145],"\"patch_xs\""," [ ",[43,260,263],{"className":261},[46,262],"reporter","pxcor"," ] ",[43,266,268],{"className":267},[46,262],"of",[43,270,272],{"className":271},[46,262],"patches",[51,274],{},[43,276,122],{"className":277},[46,57],[43,279,138],{"className":280},[46,137],[43,282,90],{"className":283},[46,57],[43,285,287],{"className":286},[46,145],"\"max(patch_xs)\"",[51,289],{},[43,291,152],{"className":292},[46,57],[43,294,296],{"className":295},[46,156],"16",[51,298],{},[43,300,122],{"className":301},[46,57],[43,303,86],{"className":304},[46,57],[43,306,308],{"className":307},[46,145],"\"print(min(patch_xs))\"",[51,310],{},[43,312,314],{"className":313},[46,156],"-16",[33,316,317,318,321,322,325,326,329],{},"See the documentation for each of the particular primitives for details on, for instance, how to multi-line statements and how object type conversions work.\nSee the demo models included in the ",[40,319,320],{},"demo"," folder for some examples of using libraries such as ",[40,323,324],{},"numpy"," and ",[40,327,328],{},"tensorflow",".",[33,331,332,333,335],{},"See the documentation on ",[40,334,94],{}," to learn how to have the extension serialize entire agents and agentsets into Python dictionaries.",[33,337,338],{},"There is also a separate interactive Python console that can be found under Python > Interactive Python Console.\nThis console is connected to the same Python session as all the Python NetLogo primitives, so you can define a variable in your model and access it in the interactive Python console window.",[340,341,344],"h3",{"id":342,"className":343},"error-handling",[14],[16,345,348],{"className":346,"href":347},[19],"#error-handling","Error handling",[33,350,351],{},"Python errors will be reported in NetLogo as “Extension exceptions”. For instance, this code:",[37,353,354],{},[40,355,356,78,359],{},[43,357,86],{"className":358},[46,57],[43,360,362],{"className":361},[46,145],"\"raise Exception('hi')\"",[33,364,365],{},"will result in the NetLogo error “Extension exception: hi”.\nTo see the Python stack trace of the exception, click “Show internal details”.\nIf you then scroll down, you will find the Python stack trace in the middle of the Java stack trace.",[23,367,370],{"id":368,"className":369},"configuring",[14],[16,371,110],{"className":372,"href":109},[19],[33,374,375,376,87,378,91,380,382],{},"By default, the ",[40,377,105],{},[40,379,101],{},[40,381,82],{}," commands will attempt to find a Python executable of the appropriate version.\nIf you’d like to change which Python executable they use, or they can’t find a Python executable, you should configure which Python executables to use.\nYou can do this by either:",[384,385,386,390],"ul",{},[387,388,389],"li",{},"Using the configuration menu under the Python toolbar menu that appears when you use a model that uses the Python extension.",[387,391,392,393,396],{},"Editing the ",[40,394,395],{},"python.properties"," file that appears in the Python extension installation folder as follows:",[37,398,399],{},[40,400,401,405,407],{},[43,402,404],{"className":403},[46,57],"python3=/path/to/python3",[51,406],{},[43,408,410],{"className":409},[46,57],"python2=/path/to/python2",[23,412,415],{"id":413,"className":414},"primitives",[14],[16,416,419],{"className":417,"href":418},[19],"#primitives","Primitives",[33,421,422,423,329],{},"Looking for the primitive reference for the Python extension? You can find ",[16,424,426],{"href":425},"/py/dictionary","the full reference here",[428,429,433,434,433,440,433,445,433,451,433,457,433,463,433,469],"div",{"id":430,"className":431},"all",[432],"prose","\n  ",[16,435,438],{"className":436,"href":437},[40],"#setup",[40,439,77],{},[16,441,443],{"className":442,"href":20},[40],[40,444,82],{},[16,446,449],{"className":447,"href":448},[40],"#python2",[40,450,105],{},[16,452,455],{"className":453,"href":454},[40],"#python3",[40,456,101],{},[16,458,461],{"className":459,"href":460},[40],"#run",[40,462,86],{},[16,464,467],{"className":465,"href":466},[40],"#runresult",[40,468,90],{},[16,470,473],{"className":471,"href":472},[40],"#set",[40,474,94],{},[340,476,479],{"id":477,"className":478},"all-primitives",[14],[16,480,483],{"className":481,"href":482},[19],"#all-primitives","All Primitives",[428,485,433,489,433,495,513,521,524,527,565,570,598,601,612,615],{"className":486,"id":488},[487],"dict_entry","setup",[340,490,492,493,433],{"id":491},"pysetup","\n    ",[16,494,77],{"href":437},[496,497,500],"h4",{"id":498,"className":499},"pysetup-python-executable",[14],[16,501,492,504,433],{"className":502,"href":503},[19],"#----pysetup-python-executable--",[43,505,508,509],{"className":506},[507],"prim_example","py:setup ",[510,511,512],"i",{},"python-executable",[33,514,515,516,520],{},"Create the Python session that this extension will use to execute code. The session will be started with the given Python executable. This command ",[517,518,519],"em",{},"must"," be run before running any other Python extension primitive. Running this command again will shutdown the current Python environment and start a new one.",[33,522,523],{},"The executable may be specified as a relative path, absolute path, or just the executable name if it is on your PATH.\nFurthermore, this extension offers a few helper primitives for getting particular versions of Python in system\nindependent ways.",[33,525,526],{},"In general, unless working with a virtual environment or a specific system setup, you should do:",[37,528,529],{},[40,530,531,78,534,53,537,541,543,78,546,78,549,553,555,78,558,78,561],{},[43,532,77],{"className":533},[46,57],[43,535,82],{"className":536},[46,57],[43,538,540],{"className":539},[46,64],"; if your code works with either Python 2 or 3",[51,542],{},[43,544,77],{"className":545},[46,57],[43,547,101],{"className":548},[46,57],[43,550,552],{"className":551},[46,64],"; for Python 3",[51,554],{},[43,556,77],{"className":557},[46,57],[43,559,105],{"className":560},[46,57],[43,562,564],{"className":563},[46,64],"; for Python 2",[33,566,567,569],{},[40,568,77],{}," may be invoked by directly referring to different Pythons as well. For instance:",[37,571,572],{},[40,573,574,78,577,78,581,585,587,78,590,53,594],{},[43,575,77],{"className":576},[46,57],[43,578,580],{"className":579},[46,145],"\"python3\"",[43,582,584],{"className":583},[46,64],"; if `python3` is on your PATH",[51,586],{},[43,588,77],{"className":589},[46,57],[43,591,593],{"className":592},[46,145],"\"python\"",[43,595,597],{"className":596},[46,64],"; if `python` is on your PATH",[33,599,600],{},"If you use virtualenv or Conda, simply specify the path of the Python executable in the environment you wish to use:",[37,602,603],{},[40,604,605,78,608],{},[43,606,77],{"className":607},[46,57],[43,609,611],{"className":610},[46,145],"\"/path/to/myenv/bin/python\"",[33,613,614],{},"The path may be relative or absolute. So, if you have a virtual environment in the same folder as your model, you can do:",[37,616,617],{},[40,618,619,78,622],{},[43,620,77],{"className":621},[46,57],[43,623,625],{"className":624},[46,145],"\"myenv/bin/python\"",[428,627,433,629,433,634,645,654,657],{"className":628,"id":12},[487],[340,630,492,632,433],{"id":631},"pypython",[16,633,82],{"href":20},[496,635,638],{"id":636,"className":637},"pypython-1",[14],[16,639,492,642,433],{"className":640,"href":641},[19],"#----pypython---1",[43,643,82],{"className":644},[507],[33,646,647,648,650,651,653],{},"Reports either the path to the latest version of Python configured in the ",[40,649,395],{}," file or, if that is blank, looks for a Python executable on your system’s PATH.\nFor Windows, there is an installation option for including Python on your PATH.\nFor MacOS and Linux, it will likely already be on your PATH.\nThe output of this reporter is meant to be used with ",[40,652,77],{},", but you may also use it to see which Python installation this extension will use by default.",[33,655,656],{},"For example, on MacOS with Homebrew installed Python 3:",[37,658,659],{},[40,660,661,78,664,78,667,670,672,78,675],{},[43,662,122],{"className":663},[46,57],[43,665,138],{"className":666},[46,137],[43,668,82],{"className":669},[46,57],[51,671],{},[43,673,152],{"className":674},[46,57],[43,676,678],{"className":677},[46,145],"\"/usr/local/bin/python3\"",[428,680,433,683,433,688,699,708,711],{"className":681,"id":682},[487],"python2",[340,684,492,686,433],{"id":685},"pypython2",[16,687,105],{"href":448},[496,689,692],{"id":690,"className":691},"pypython2-1",[14],[16,693,492,696,433],{"className":694,"href":695},[19],"#----pypython2---1",[43,697,105],{"className":698},[507],[33,700,701,702,704,705,707],{},"Reports either the path to Python 2 configured in the ",[40,703,395],{}," file or, if that is blank, looks for a Python 2 executable on your system’s PATH.\nFor Windows, there is an installation option for including Python on your PATH.\nFor MacOS and Linux, it will likely already be on your PATH.\nThe output of this reporter is meant to be used with ",[40,706,77],{},", but you may also use it to see which Python 2 installation this extension will use by default.",[33,709,710],{},"For example, on MacOS with Homebrew installed Python 2:",[37,712,713],{},[40,714,715,78,718,78,721,724,726,78,729],{},[43,716,122],{"className":717},[46,57],[43,719,138],{"className":720},[46,137],[43,722,105],{"className":723},[46,57],[51,725],{},[43,727,152],{"className":728},[46,57],[43,730,732],{"className":731},[46,145],"\"/usr/local/bin/python2\"",[428,734,433,737,433,742,753,762,764],{"className":735,"id":736},[487],"python3",[340,738,492,740,433],{"id":739},"pypython3",[16,741,101],{"href":454},[496,743,746],{"id":744,"className":745},"pypython3-1",[14],[16,747,492,750,433],{"className":748,"href":749},[19],"#----pypython3---1",[43,751,101],{"className":752},[507],[33,754,755,756,758,759,761],{},"Reports either the path to Python 3 configured in the ",[40,757,395],{}," file or, if that is blank, looks for a Python 3 executable on your system’s PATH.\nFor Windows, there is an installation option for including Python on your PATH.\nFor MacOS and Linux, it will likely already be on your PATH.\nThe output of this reporter is meant to be used with ",[40,760,77],{},", but you may also use it to see which Python 3 installation this extension will use by default.",[33,763,656],{},[37,765,766],{},[40,767,768,78,771,78,774,777,779,78,782],{},[43,769,122],{"className":770},[46,57],[43,772,138],{"className":773},[46,137],[43,775,101],{"className":776},[46,57],[51,778],{},[43,780,152],{"className":781},[46,57],[43,783,678],{"className":784},[46,145],[428,786,433,789,433,794,809,812,865],{"className":787,"id":788},[487],"run",[340,790,492,792,433],{"id":791},"pyrun",[16,793,86],{"href":460},[496,795,798],{"id":796,"className":797},"pyrun-python-statement",[14],[16,799,492,802,433],{"className":800,"href":801},[19],"#----pyrun-python-statement--",[43,803,805,806],{"className":804},[507],"py:run ",[510,807,808],{},"python-statement",[33,810,811],{},"Runs the given Python statements in the current Python session. To make multi-line Python code easier to run, this command will take multiple strings, each of which will be interpreted as a separate line of Python code. For instance:",[37,813,814],{},[40,815,816,817,820,53,822,826,53,828,832,53,834,838,53,840,844,53,846,850,53,852,856,53,858,862,864],{},"(",[43,818,86],{"className":819},[46,57],[51,821],{},[43,823,825],{"className":824},[46,145],"\"import matplotlib\"",[51,827],{},[43,829,831],{"className":830},[46,145],"\"matplotlib.use('TkAgg')\"",[51,833],{},[43,835,837],{"className":836},[46,145],"\"import numpy as np\"",[51,839],{},[43,841,843],{"className":842},[46,145],"\"import matplotlib.pyplot as plt\"",[51,845],{},[43,847,849],{"className":848},[46,145],"\"for i in range(10):\"",[51,851],{},[43,853,855],{"className":854},[46,145],"\"    plt.plot([ x ** i for x in np.arange(-1, 1, 0.1) ])\"",[51,857],{},[43,859,861],{"className":860},[46,145],"\"plt.show()\"",[51,863],{},")",[33,866,867,869],{},[40,868,86],{}," will wait for the statements to finish running before continuing. Thus, if you have long running Python code, NetLogo will pause while it runs.",[428,871,433,874,433,879,894,908],{"className":872,"id":873},[487],"runresult",[340,875,492,877,433],{"id":876},"pyrunresult",[16,878,90],{"href":466},[496,880,883],{"id":881,"className":882},"pyrunresult-python-expression",[14],[16,884,492,887,433],{"className":885,"href":886},[19],"#----pyrunresult-python-expression--",[43,888,890,891],{"className":889},[507],"py:runresult ",[510,892,893],{},"python-expression",[33,895,896,897,899,900,903,904,907],{},"Evaluates the given Python expression and reports the result.\n",[40,898,90],{}," attempts to convert from Python data types to NetLogo data types.\nNumbers, strings, and booleans convert as you would expect.\nAny list-like object in Python (that is, anything with a length that you can iterate through) will be converted to a NetLogo list.\nFor instance, Python lists and NumPy arrays will convert to NetLogo lists.\nPython dicts (and dict-like objects) will convert to a NetLogo list of key-value pairs (where each pair is represented as a list).\n",[40,901,902],{},"None"," will be converted to ",[40,905,906],{},"nobody",".\nOther objects will simply be converted to a string representation.",[33,909,910,911,917,918,921],{},"Note that due a ",[16,912,916],{"href":913,"rel":914},"https://github.com/qiemem/PythonExtension/issues/6",[915],"nofollow","current issue",", dict keys will always be reported as strings.\nIf you need to report non-string keys, report the ",[40,919,920],{},".items()"," of the dict instead of the dict itself.",[428,923,433,926,433,931,949,952,955,991,994,1102],{"className":924,"id":925},[487],"set",[340,927,492,929,433],{"id":928},"pyset",[16,930,94],{"href":472},[496,932,935],{"id":933,"className":934},"pyset-variable-name-value",[14],[16,936,492,939,433],{"className":937,"href":938},[19],"#----pyset-variable-name-value--",[43,940,942,943,78,946],{"className":941},[507],"py:set ",[510,944,945],{},"variable-name",[510,947,948],{},"value",[33,950,951],{},"Sets a variable in the Python session with the given name to the given NetLogo value. NetLogo objects will be converted to Python objects as expected.",[33,953,954],{},"All vanilla NetLogo objects are supported, but objects from other extensions, even other bundled extensions, are not supported.",[37,956,957],{},[40,958,959,78,962,49,966,78,969,78,972,68,976,978,78,981,78,984,78,987],{},[43,960,94],{"className":961},[46,57],[43,963,965],{"className":964},[46,145],"\"x\"",[43,967,211],{"className":968},[46,156],[43,970,157],{"className":971},[46,156],[43,973,975],{"className":974},[46,156],"3",[51,977],{},[43,979,138],{"className":980},[46,137],[43,982,90],{"className":983},[46,57],[43,985,965],{"className":986},[46,145],[43,988,990],{"className":989},[46,64],";; Shows [1 2 3]",[33,992,993],{},"Agents are converted into dictionaries with elements for each agent variable. Agentsets are converted into lists of agent dictionaries.",[37,995,996],{},[40,997,998,49,1002,78,1006,68,1010,49,1016,1020,1021,1023,78,1027,258,1030,78,1033,78,1037,78,1041,78,1044,78,1048,1020,1052,1054,78,1058,78,1061,258,1064,78,1067,78,1070,1020,1074,1076,78,1079,78,1083,78,1086,1089,1091,78,1094,78,1098],{},[43,999,1001],{"className":1000},[46,47],"breed",[43,1003,1005],{"className":1004},[46,57],"goats",[43,1007,1009],{"className":1008},[46,57],"goat",[43,1011,1013,1015],{"className":1012},[46,47],[51,1014],{},"goats-own",[43,1017,1019],{"className":1018},[46,57],"energy"," ]",[51,1022],{},[43,1024,1026],{"className":1025},[46,57],"create-goats",[43,1028,211],{"className":1029},[46,156],[43,1031,925],{"className":1032},[46,137],[43,1034,1036],{"className":1035},[46,262],"heading",[43,1038,1040],{"className":1039},[46,156],"0",[43,1042,925],{"className":1043},[46,137],[43,1045,1047],{"className":1046},[46,262],"color",[43,1049,1051],{"className":1050},[46,156],"75",[51,1053],{},[43,1055,1057],{"className":1056},[46,137],"ask",[43,1059,1009],{"className":1060},[46,57],[43,1062,1040],{"className":1063},[46,156],[43,1065,925],{"className":1066},[46,137],[43,1068,1019],{"className":1069},[46,57],[43,1071,1073],{"className":1072},[46,156],"42",[51,1075],{},[43,1077,94],{"className":1078},[46,57],[43,1080,1082],{"className":1081},[46,145],"\"goat\"",[43,1084,1009],{"className":1085},[46,57],[43,1087,1040],{"className":1088},[46,156],[51,1090],{},[43,1092,90],{"className":1093},[46,57],[43,1095,1097],{"className":1096},[46,145],"\"str(goat)\"",[43,1099,1101],{"className":1100},[46,64],";; Should output: \"{'WHO': 0, 'COLOR': 75, 'HEADING': 0, 'XCOR': 0, 'YCOR': 0, 'SHAPE': 'default', 'LABEL': '', 'LABEL-COLOR': 9.9, 'BREED': 'GOATS', 'HIDDEN?': False, 'SIZE': 1, 'PEN-SIZE': 1, 'PEN-MODE': 'up', 'ENERGY': 42}\"",[33,1103,1104],{},"Agents with variables containing references to agentsets will have those variables converted into the string representation of that agentset.",{"title":1106,"searchDepth":1107,"depth":1108,"links":1109},"",5,3,[1110,1114,1115],{"id":25,"depth":1111,"text":31,"children":1112},2,[1113],{"id":342,"depth":1108,"text":348},{"id":368,"depth":1111,"text":110},{"id":413,"depth":1111,"text":419,"children":1116},[1117,1118,1124,1128,1132,1136,1141,1146],{"id":477,"depth":1108,"text":483},{"id":491,"depth":1108,"text":1119,"children":1120},"\n    py:setup\n  ",[1121],{"id":498,"depth":1122,"text":1123},4,"\n    py:setup python-executable\n  ",{"id":631,"depth":1108,"text":1125,"children":1126},"\n    py:python\n  ",[1127],{"id":636,"depth":1122,"text":1125},{"id":685,"depth":1108,"text":1129,"children":1130},"\n    py:python2\n  ",[1131],{"id":690,"depth":1122,"text":1129},{"id":739,"depth":1108,"text":1133,"children":1134},"\n    py:python3\n  ",[1135],{"id":744,"depth":1122,"text":1133},{"id":791,"depth":1108,"text":1137,"children":1138},"\n    py:run\n  ",[1139],{"id":796,"depth":1122,"text":1140},"\n    py:run python-statement\n  ",{"id":876,"depth":1108,"text":1142,"children":1143},"\n    py:runresult\n  ",[1144],{"id":881,"depth":1122,"text":1145},"\n    py:runresult python-expression\n  ",{"id":928,"depth":1108,"text":1147,"children":1148},"\n    py:set\n  ",[1149],{"id":933,"depth":1122,"text":1150},"\n    py:set variable-name value\n  ","Documentation for the Python extension.","md",{"source":1154,"metadataOutputPath":1155,"projectConfig":1156,"language":1158,"output":1167,"inheritFrom":1168,"version":1163,"icon":1169,"extensionName":1170,"assetsRoot":1165},"../../external/extensions/py/py.md","content/py.metadata.yaml",{"defaults":1157,"projectRoot":329,"outputRoot":1164,"scanRoot":1165,"engine":1166,"version":1163,"dedupeIdenticalDiskWrites":1167},{"language":1158,"output":1159,"inheritFrom":1160,"extension":1152,"title":1162,"version":1163},"en",false,[1161],0,"NetLogo User Manual","7.0.1","content","/Volumes/CCL/netlogo/Helio/external/extensions/py","mustache",true,[1161],"logos:python",{"shortName":58,"fullName":21},"/py",{"title":5,"description":1151},"hKj0zwJR-bEo2jYkSwyzfnkI8Xxf5MrVQ-Dsc5dOvxc",[1175,1180],{"title":1176,"path":1177,"stem":1178,"description":1179},"Programming Guide","/programming","programming","Comprehensive guide to the NetLogo programming language, covering syntax, commands, reporters, and programming concepts.",{"title":1181,"path":425,"stem":1182,"description":1183},"Python Extension Dictionary: dictionary","py/dictionary","Documentation for the dictionary primitive.",1761669089503]