[{"data":1,"prerenderedAt":3222},["ShallowReactive",2],{"/behaviorspace":3,"/behaviorspace-surround":3211},{"id":4,"title":5,"body":6,"description":3184,"extension":3185,"meta":3186,"navigation":3200,"path":3207,"seo":3208,"stem":3209,"__hash__":3210},"content/behaviorspace.md","Behavior Space",{"type":7,"value":8,"toc":3148},"minimark",[9,21,25,57,60,143,146,183,191,194,197,200,210,213,216,231,234,241,244,253,256,268,273,280,285,293,299,436,463,527,551,559,565,587,590,615,618,621,631,648,668,671,731,737,788,795,799,814,846,872,875,908,919,931,949,967,973,1006,1009,1021,1039,1063,1083,1086,1127,1130,1133,1136,1142,1230,1233,1320,1326,1340,1343,1359,1404,1410,1417,1421,1442,1450,1453,1499,1509,1515,1532,1535,1575,1589,1596,1599,1605,1611,1618,1622,1625,1632,1638,1647,1668,1677,1680,1689,1729,1732,1735,1743,1767,1772,1778,1791,1799,1826,1831,1846,1851,1862,1869,1873,1885,1890,1898,1905,1909,1924,1936,1941,1949,1956,1960,2012,2019,2057,2066,2075,2078,2081,2084,2087,2090,2098,2134,2152,2161,2164,2169,2175,2178,2185,2189,2192,2206,2209,2216,2225,2228,2231,2240,2254,2452,2468,2489,2498,2523,2534,2568,2574,2581,2587,2592,2595,2635,2643,2652,2655,2692,2708,2722,2736,2750,2768,2775,2798,2804,2811,2839,2860,2863,2872,2875,2882,2892,3056,3062,3065,3071,3084,3094,3103,3110,3120,3127,3136,3144],[10,11,15],"h1",{"id":12,"className":13},"behavior-space",[14],"section-heading",[16,17,5],"a",{"className":18,"href":20},[19],"section-anchor","#behavior-space",[22,23,24],"p",{},"This guide has three parts:",[26,27,28,39,48],"ul",{},[29,30,31,38],"li",{},[16,32,34],{"href":33},"#what-is-behaviorspace",[35,36,37],"strong",{},"What is BehaviorSpace?",": A general description of the tool,\nincluding the ideas and principles behind it.",[29,40,41,47],{},[16,42,44],{"href":43},"#how-it-works",[35,45,46],{},"How It Works",": Walks you through how to use the tool and highlights\nits most commonly used features.",[29,49,50,56],{},[16,51,53],{"href":52},"#advanced-usage",[35,54,55],{},"Advanced Usage",": How to use BehaviorSpace from the command\nline, or from your own Java code.",[22,58,59],{},"A number of new features were introduced in NetLogo 6.4:",[26,61,62,71,80,89,98,107,116,125,134],{},[29,63,64,70],{},[16,65,67],{"href":66},"#subexperiment-syntax",[35,68,69],{},"Subexperiment syntax",": A syntax for allowing parameter\ncombinations to be run separately, rather than being expanded combinatorically.",[29,72,73,79],{},[16,74,76],{"href":75},"#run-metrics-when",[35,77,78],{},"Run metrics when",": A reporter can be used to conditionally record\nmeasurements.",[29,81,82,88],{},[16,83,85],{"href":84},"#pre-experiment-commands",[35,86,87],{},"Pre experiment commands",": Commands can be run before\nthe experiment begins.",[29,90,91,97],{},[16,92,94],{"href":93},"#post-experiment-commands",[35,95,96],{},"Post experiment commands",": Commands can be run after\nthe experiment ends.",[29,99,100,106],{},[16,101,103],{"href":102},"#statistics-output",[35,104,105],{},"Statistics output",": The mean and standard deviation\nof data from repetitions can be saved in an output file.",[29,108,109,115],{},[16,110,112],{"href":111},"#lists-output",[35,113,114],{},"Lists output",": List data can be output in a file with one list\nelement per cell.",[29,117,118,124],{},[16,119,121],{"href":120},"#importing-and-exporting",[35,122,123],{},"Importing and exporting",": Experiments can now be exported to\nan XML file that can be used when running headlessly. Experiments can also be imported into a\nmodel.",[29,126,127,133],{},[16,128,130],{"href":129},"#paused-experiments",[35,131,132],{},"Paused experiments",": Experiments can now be paused and resumed.",[29,135,136,142],{},[16,137,139],{"href":138},"#run-options-update-plots-and-monitors",[35,140,141],{},"Run options: update plots and monitors",":\nReduction in memory usage when box is unchecked.",[22,144,145],{},"More about changes to BehaviorSpace in NetLogo 6.4:",[26,147,148,151,161,170,173,176],{},[29,149,150],{},"Experiments created in versions prior to 6.4 can still be opened, but experiments\ncreated using new features are not backwards compatible.",[29,152,153,154,160],{},"For information on format changes to output files see\n",[16,155,157],{"href":156},"#output-file-changes",[35,158,159],{},"Output File Changes",".",[29,162,163,164,160],{},"The Experiment dialog now uses tooltips rather than text below each input element see\n",[16,165,167],{"href":166},"#creating-an-experiment-setup",[35,168,169],{},"Creating an experiment setup",[29,171,172],{},"Experiments using the new features can be found in the model\nSample Models=>Biology=>Wolf Sheep Predation, with with additional notes in the Info tab.",[29,174,175],{},"Hovering over the edit dialog entry titles will show a helpful ‘tooltip’.",[29,177,178,179,160],{},"Additional minor changes can be found by searching this page for ",[180,181,182],"em",{},"(Since 6.4)",[184,185,188],"h2",{"id":186,"className":187},"what-is-behaviorspace",[14],[16,189,37],{"className":190,"href":33},[19],[22,192,193],{},"BehaviorSpace is a software tool integrated with NetLogo that allows you to\nperform experiments with models.",[22,195,196],{},"BehaviorSpace runs a model many times, systematically varying the model’s\nsettings and recording the results of each model run. This process is sometimes\ncalled “parameter sweeping”. It lets you explore the model’s “space” of possible\nbehaviors and determine which combinations of settings cause the behaviors of\ninterest.",[22,198,199],{},"If your computer has multiple processor cores, you can specify how many model runs will\nhappen in parallel. Using multiple runs in parallel will increase the memory used\nby BehaviorSpace.",[201,202,205],"h3",{"id":203,"className":204},"why-behaviorspace",[14],[16,206,209],{"className":207,"href":208},[19],"#why-behaviorspace","Why BehaviorSpace?",[22,211,212],{},"The need for this type of experiment is revealed by the following observations.\nModels often have many settings, each of which can take a range of values.\nTogether they form what in mathematics is called a parameter space for the\nmodel, whose dimensions are the number of settings, and in which every point is\na particular combination of values. Running a model with different settings (and\nsometimes even the same ones) can lead to drastically different behavior in the\nsystem being modeled. So, how are you to know which particular configuration of\nvalues, or types of configurations, will yield the kind of behavior you are\ninterested in? This amounts to the question of where in its huge,\nmulti-dimension parameter space does your model perform best?",[22,214,215],{},"For example, suppose you want speedy synchronization from the agents in the\nFireflies model. The model has four sliders — number, cycle-length,\nflash-length and flashes-to-reset — that have approximately 2000, 100, 10 and 3\npossible values, respectively. That means there are 2000 * 100 * 10 * 3 =\n6,000,000 possible combinations of slider values! Trying combinations one at a\ntime is hardly an efficient way to learn which one will evoke the speediest\nsynchronization.",[22,217,218,219,225,226,230],{},"BehaviorSpace offers you a much better way to solve this problem by sampling the\nmodel’s parameter space — not exhaustively, but enough so that you will be able\nto see relationships form between different slider values and the behavior of the\nsystem. One way to do this is to specify a subset of values from the ranges of each\nslider. See ",[16,220,222],{"href":221},"#combinatorial-syntaxes",[35,223,224],{},"Combinatorial syntaxes",". BehaviorSpace\nwill run the model with each possible combination of those values and, during each\nmodel run, record the results. Since NetLogo 6.4 it has been possible to specify\nnon-combinatorial sets of slider values. See\n",[16,227,228],{"href":66},[35,229,69],{},". After all the runs are\nover, a dataset is generated which you can open in a different tool, such as a\nspreadsheet, database, or scientific visualization application, and explore.",[22,232,233],{},"By enabling you to explore the entire “space” of behaviors a model can exhibit,\nBehaviorSpace can be a powerful assistant to the modeler.",[184,235,238],{"id":236,"className":237},"how-it-works",[14],[16,239,46],{"className":240,"href":43},[19],[22,242,243],{},"To begin using BehaviorSpace, open your model, then choose the BehaviorSpace\nitem on NetLogo’s Tools menu.",[201,245,248],{"id":246,"className":247},"managing-experiment-setups",[14],[16,249,252],{"className":250,"href":251},[19],"#managing-experiment-setups","Managing experiment setups",[22,254,255],{},"The dialog that opens lets you create, edit, duplicate, delete, import, export,\nand run experiment setups. Experiments are listed by name and total number of model\nruns.",[22,257,258,259,263,264,267],{},"Experiment setups are considered part of a NetLogo model and are saved as part\nof the model, but can be also be exported as individual files. See\n",[16,260,261],{"href":120},[35,262,123],{}," (",[180,265,266],{},"Since 6.4",").",[22,269,270,271,267],{},"To create a new experiment setup, press the “New” button. To edit an existing\nexperiment setup, press the “Edit” button. The same dialog is used in both cases,\nwhat differs is the information that is already filled in. The dialog is\nnon-blocking, which is useful if you want to copy something from the Code Tab,\nor view sliders in the Interface Tab (",[180,272,266],{},[201,274,277],{"id":275,"className":276},"creating-an-experiment-setup",[14],[16,278,169],{"className":279,"href":166},[19],[22,281,282,283,160],{},"The information that can be included in the Experiment dialog is detailed below.\nNote that it is not necessary to specify everything; some parts can be left blank\nor with their default values. Hovering over the edit dialog entry titles will show a helpful ‘tooltip’,\nso you don’t have to revisit this page as often ",[180,284,182],{},[22,286,287,290,291,160],{},[35,288,289],{},"Experiment name:"," Experiments in the same model must have different names. If\nyou open a model that contains experiments with duplicate names, the conflicting\nnames will be altered to ensure that all experiment names remain unique ",[180,292,182],{},[22,294,295,298],{},[35,296,297],{},"Vary variables as follows:"," This is where you specify which settings you want\nvaried, and what values you want them to take. Variables can include sliders,\nswitches, choosers, and any global variables in your model. You may notice that\nthe view and plots do not correspond to the values in the widgets once the experiment is completed.\nThis is because the globals that are controlled by widgets are reset to their initial state at\nthe end of the experiment. To synchronize your view and plots with the widgets, run your procedure\nthat initializes the view.",[22,300,301,302,316,317,326,327,335,336,316,344,326,353,335,361,370,371,335,378,385,386,393,394,401,402,316,420,432,433,435],{},"Variables can also include ",[303,304,307],"code",{"className":305},[306],"netlogo-command",[16,308,312],{"href":309,"className":310,"dataDisplayText":312,"rel":313,"target":315,"title":312},"/dictionary#max-pcor",[311],"netlogo-wiki-link","max-pxcor",[314],"noopener","_self",", ",[303,318,320],{"className":319},[306],[16,321,324],{"href":322,"className":323,"dataDisplayText":324,"rel":325,"target":315,"title":324},"/dictionary#min-pcor",[311],"min-pxcor",[314],",\n",[303,328,330],{"className":329},[306],[16,331,333],{"href":309,"className":332,"dataDisplayText":333,"rel":334,"target":315,"title":333},[311],"max-pycor",[314]," and ",[303,337,339],{"className":338},[306],[16,340,342],{"href":322,"className":341,"dataDisplayText":342,"rel":343,"target":315,"title":342},[311],"min-pycor",[314],[303,345,347],{"className":346},[306],[16,348,351],{"href":349,"className":350,"dataDisplayText":351,"rel":352,"target":315,"title":351},"/dictionary#world-dim",[311],"world-width",[314],[303,354,356],{"className":355},[306],[16,357,359],{"href":349,"className":358,"dataDisplayText":359,"rel":360,"target":315,"title":359},[311],"world-height",[314],[303,362,364],{"className":363},[306],[16,365,368],{"href":366,"className":367,"dataDisplayText":368,"rel":369,"target":315,"title":368},"/dictionary#random-seed",[311],"random-seed",[314],". These are not variables, strictly\nspeaking, but BehaviorSpace lets you vary them as if they were.\nVarying the world dimensions lets you explore the effect of world size upon your\nmodel. Setting  ",[303,372,374],{"className":373},[306],[16,375,351],{"href":349,"className":376,"dataDisplayText":351,"rel":377,"target":315,"title":351},[311],[314],[303,379,381],{"className":380},[306],[16,382,359],{"href":349,"className":383,"dataDisplayText":359,"rel":384,"target":315,"title":359},[311],[314]," is\nvalid under two circumstances. 1) If the origin is centered in width or height\nBehaviorSpace will keep it centered in that dimension. This requires that the\ncorresponding value(s) ",[303,387,389],{"className":388},[306],[16,390,351],{"href":349,"className":391,"dataDisplayText":351,"rel":392,"target":315,"title":351},[311],[314]," and/or ",[303,395,397],{"className":396},[306],[16,398,359],{"href":349,"className":399,"dataDisplayText":359,"rel":400,"target":315,"title":359},[311],[314],"\nmust be odd. 2) If one of\nthe bounds is zero it will remain zero and the other bound will move. For example,\nif you start with a world with ",[303,403,404,410,411,410,415],{},[405,406,324],"span",{"className":407},[408,409],"token","reporter"," ",[405,412,414],{"className":413},[408,409],"=",[405,416,419],{"className":417},[408,418],"number","0",[303,421,422,410,425,410,428],{},[405,423,312],{"className":424},[408,409],[405,426,414],{"className":427},[408,409],[405,429,431],{"className":430},[408,418],"10"," and you vary\n",[303,434,351],{}," like this:",[437,438,439],"blockquote",{},[22,440,441],{},[303,442,443,444,449,450,410,454,410,458,462],{},"[",[405,445,448],{"className":446},[408,447],"string","\"world-width\""," [",[405,451,453],{"className":452},[408,418],"11",[405,455,457],{"className":456},[408,418],"1",[405,459,461],{"className":460},[408,418],"14","]]",[22,464,465,472,473,480,481,488,489,496,497,316,504,316,511,518,519,526],{},[303,466,468],{"className":467},[306],[16,469,324],{"href":322,"className":470,"dataDisplayText":324,"rel":471,"target":315,"title":324},[311],[314]," will remain zero and ",[303,474,476],{"className":475},[306],[16,477,312],{"href":309,"className":478,"dataDisplayText":312,"rel":479,"target":315,"title":312},[311],[314]," will be set to 11,\n12, and 13 for successive runs. If neither of these conditions is true you cannot\nyou cannot vary ",[303,482,484],{"className":483},[306],[16,485,359],{"href":349,"className":486,"dataDisplayText":359,"rel":487,"target":315,"title":359},[311],[314]," or ",[303,490,492],{"className":491},[306],[16,493,351],{"href":349,"className":494,"dataDisplayText":351,"rel":495,"target":315,"title":351},[311],[314]," directly but\nmust vary ",[303,498,500],{"className":499},[306],[16,501,312],{"href":309,"className":502,"dataDisplayText":312,"rel":503,"target":315,"title":312},[311],[314],[303,505,507],{"className":506},[306],[16,508,333],{"href":309,"className":509,"dataDisplayText":333,"rel":510,"target":315,"title":333},[311],[314],[303,512,514],{"className":513},[306],[16,515,324],{"href":322,"className":516,"dataDisplayText":324,"rel":517,"target":315,"title":324},[311],[314],"\nand ",[303,520,522],{"className":521},[306],[16,523,342],{"href":322,"className":524,"dataDisplayText":342,"rel":525,"target":315,"title":342},[311],[314]," instead.",[22,528,529,530,537,538,545,546,550],{},"Varying ",[303,531,533],{"className":532},[306],[16,534,368],{"href":366,"className":535,"dataDisplayText":368,"rel":536,"target":315,"title":368},[311],[314]," lets you repeat runs by using a known seed for the\nNetLogo random number generator. Note that you’re also free to use the\n",[303,539,541],{"className":540},[306],[16,542,368],{"href":366,"className":543,"dataDisplayText":368,"rel":544,"target":315,"title":368},[311],[314]," command in your experiment’s setup commands. For more\ninformation on random seeds, see the\n",[16,547,549],{"href":548},"/programming#random-numbers","Random Numbers"," section of the Programming\nGuide.",[552,553,556],"h4",{"id":554,"className":555},"combinatorial-syntaxes",[14],[16,557,224],{"className":558,"href":221},[19],[22,560,561,562,564],{},"You may specify values either by listing the values you want used, or by\nspecifying that you want to try every value within a given range. For example,\nto give a slider named ",[303,563,418],{}," every value from 100 to 1000 in increments of\n50, you would enter:",[437,566,567],{},[22,568,569],{},[303,570,443,571,449,575,410,579,410,583,462],{},[405,572,574],{"className":573},[408,447],"\"number\"",[405,576,578],{"className":577},[408,418],"100",[405,580,582],{"className":581},[408,418],"50",[405,584,586],{"className":585},[408,418],"1000",[22,588,589],{},"Or, to give it only the values of 100, 200, 400, and 800, you would enter:",[437,591,592],{},[22,593,594],{},[303,595,443,596,410,599,410,602,410,606,410,610,614],{},[405,597,574],{"className":598},[408,447],[405,600,578],{"className":601},[408,418],[405,603,605],{"className":604},[408,418],"200",[405,607,609],{"className":608},[408,418],"400",[405,611,613],{"className":612},[408,418],"800","]",[22,616,617],{},"Be careful with the brackets here. Note that there are fewer square brackets in\nthe second example. Including or not including this extra set of brackets is how\nyou tell BehaviorSpace whether you are listing individual values, or specifying\na range.",[22,619,620],{},"Also note that the double quotes around the variable names are required.",[22,622,623,624,626,627,630],{},"All combinations of the specified values will be run. For example, if you have two\nvalues for a variable ",[303,625,16],{}," and three values of a variable ",[303,628,629],{},"b"," six runs will result.",[437,632,633],{},[22,634,635],{},[303,636,443,637,410,641,410,644,614],{},[405,638,640],{"className":639},[408,447],"\"a\"",[405,642,457],{"className":643},[408,418],[405,645,647],{"className":646},[408,418],"2",[437,649,650],{},[22,651,652],{},[303,653,443,654,410,658,410,661,410,665,614],{},[405,655,657],{"className":656},[408,447],"\"b\"",[405,659,647],{"className":660},[408,418],[405,662,664],{"className":663},[408,418],"4",[405,666,431],{"className":667},[408,418],[22,669,670],{},"This would create six runs, organized as follows:",[672,673,676],"div",{"className":674},[675],"table-container",[677,678,679,691],"table",{},[680,681,682],"thead",{},[683,684,685,689],"tr",{},[686,687,16],"th",{"align":688},"right",[686,690,629],{"align":688},[692,693,694,701,707,713,719,725],"tbody",{},[683,695,696,699],{},[697,698,457],"td",{"align":688},[697,700,647],{"align":688},[683,702,703,705],{},[697,704,457],{"align":688},[697,706,664],{"align":688},[683,708,709,711],{},[697,710,457],{"align":688},[697,712,431],{"align":688},[683,714,715,717],{},[697,716,647],{"align":688},[697,718,647],{"align":688},[683,720,721,723],{},[697,722,647],{"align":688},[697,724,664],{"align":688},[683,726,727,729],{},[697,728,647],{"align":688},[697,730,431],{"align":688},[22,732,733,736],{},[35,734,735],{},"Run combinations in sequential order checkbox"," This box is checked by default,\nand causes variables specified later to vary more quickly than those specified earlier.\nWhen the box is unchecked, non-sequential order results, with variables specified earlier\nvarying more quickly than those specified later.\nThe non-sequential order for the variable specification above is:",[672,738,740],{"className":739},[675],[677,741,742,750],{},[680,743,744],{},[683,745,746,748],{},[686,747,16],{"align":688},[686,749,629],{"align":688},[692,751,752,758,764,770,776,782],{},[683,753,754,756],{},[697,755,457],{"align":688},[697,757,647],{"align":688},[683,759,760,762],{},[697,761,647],{"align":688},[697,763,647],{"align":688},[683,765,766,768],{},[697,767,457],{"align":688},[697,769,664],{"align":688},[683,771,772,774],{},[697,773,647],{"align":688},[697,775,664],{"align":688},[683,777,778,780],{},[697,779,457],{"align":688},[697,781,431],{"align":688},[683,783,784,786],{},[697,785,647],{"align":688},[697,787,431],{"align":688},[552,789,792],{"id":790,"className":791},"subexperiment-syntax",[14],[16,793,69],{"className":794,"href":66},[19],[22,796,797],{},[180,798,182],{},[22,800,801,802,805,806,809,810,813],{},"For more advanced users, there is a third available syntax\nfor varying parameters, the subexperiment syntax.  For example, in the Wolf Sheep Predation model, if you wanted to try\ntwo values for the ",[303,803,804],{},"grass-regrowth-time"," variable, each with its own values for the ",[303,807,808],{},"initial-number-sheep"," and\n",[303,811,812],{},"initial-number-wolves"," variables, you could write it as follows:",[437,815,816],{},[22,817,818],{},[303,819,820,821,410,825,829,830,410,834,829,838,410,842,462],{},"[[",[405,822,824],{"className":823},[408,447],"\"grass-regrowth-time\"",[405,826,828],{"className":827},[408,418],"30","][",[405,831,833],{"className":832},[408,447],"\"initial-number-sheep\"",[405,835,837],{"className":836},[408,418],"116",[405,839,841],{"className":840},[408,447],"\"initial-number-wolves\"",[405,843,845],{"className":844},[408,418],"107",[437,847,848],{},[22,849,850],{},[303,851,820,852,410,855,829,859,410,862,829,865,410,868,462],{},[405,853,824],{"className":854},[408,447],[405,856,858],{"className":857},[408,418],"40",[405,860,833],{"className":861},[408,447],[405,863,578],{"className":864},[408,418],[405,866,841],{"className":867},[408,447],[405,869,871],{"className":870},[408,418],"77",[22,873,874],{},"Note the use of doubly nested square brackets to separate each variable within a\nsubexperiment. This would create two runs, organized as follows:",[672,876,878],{"className":877},[675],[677,879,880,890],{},[680,881,882],{},[683,883,884,886,888],{},[686,885,804],{"align":688},[686,887,808],{"align":688},[686,889,812],{"align":688},[692,891,892,900],{},[683,893,894,896,898],{},[697,895,828],{"align":688},[697,897,837],{"align":688},[697,899,845],{"align":688},[683,901,902,904,906],{},[697,903,858],{"align":688},[697,905,578],{"align":688},[697,907,871],{"align":688},[22,909,910,911,809,913,915,916,918],{},"The subexperiment syntax also allows you to define constants using the standard\nsyntax, which will be applied to each subexperiment where they are not overwritten.\nTo add to the example above, if you wanted to try those combinations of ",[303,912,808],{},[303,914,812],{}," but with the same value for ",[303,917,804],{},", you could write it as follows:",[437,920,921],{},[22,922,923],{},[303,924,443,925,410,928,614],{},[405,926,824],{"className":927},[408,447],[405,929,828],{"className":930},[408,418],[437,932,933],{},[22,934,935],{},[303,936,820,937,410,940,829,943,410,946,462],{},[405,938,833],{"className":939},[408,447],[405,941,837],{"className":942},[408,418],[405,944,841],{"className":945},[408,447],[405,947,845],{"className":948},[408,418],[437,950,951],{},[22,952,953],{},[303,954,820,955,410,958,829,961,410,964,462],{},[405,956,833],{"className":957},[408,447],[405,959,578],{"className":960},[408,418],[405,962,841],{"className":963},[408,447],[405,965,871],{"className":966},[408,418],[22,968,969,970,972],{},"This would set ",[303,971,804],{}," to 30 for both subexperiments, resulting in the following runs:",[672,974,976],{"className":975},[675],[677,977,978,988],{},[680,979,980],{},[683,981,982,984,986],{},[686,983,804],{"align":688},[686,985,808],{"align":688},[686,987,812],{"align":688},[692,989,990,998],{},[683,991,992,994,996],{},[697,993,828],{"align":688},[697,995,837],{"align":688},[697,997,845],{"align":688},[683,999,1000,1002,1004],{},[697,1001,828],{"align":688},[697,1003,578],{"align":688},[697,1005,871],{"align":688},[22,1007,1008],{},"You can also override a constant in a subexperiment, as in the following example:",[437,1010,1011],{},[22,1012,1013],{},[303,1014,443,1015,410,1018,614],{},[405,1016,824],{"className":1017},[408,447],[405,1019,828],{"className":1020},[408,418],[437,1022,1023],{},[22,1024,1025],{},[303,1026,820,1027,410,1030,829,1033,410,1036,462],{},[405,1028,833],{"className":1029},[408,447],[405,1031,837],{"className":1032},[408,418],[405,1034,841],{"className":1035},[408,447],[405,1037,845],{"className":1038},[408,418],[437,1040,1041],{},[22,1042,1043],{},[303,1044,820,1045,410,1048,829,1051,410,1054,829,1057,410,1060,462],{},[405,1046,824],{"className":1047},[408,447],[405,1049,858],{"className":1050},[408,418],[405,1052,833],{"className":1053},[408,447],[405,1055,578],{"className":1056},[408,418],[405,1058,841],{"className":1059},[408,447],[405,1061,871],{"className":1062},[408,418],[437,1064,1065],{},[22,1066,1067],{},[303,1068,820,1069,410,1072,829,1076,410,1079,462],{},[405,1070,833],{"className":1071},[408,447],[405,1073,1075],{"className":1074},[408,418],"80",[405,1077,841],{"className":1078},[408,447],[405,1080,1082],{"className":1081},[408,418],"153",[22,1084,1085],{},"This would produce three runs with the following combinations:",[672,1087,1089],{"className":1088},[675],[677,1090,1091,1101],{},[680,1092,1093],{},[683,1094,1095,1097,1099],{},[686,1096,804],{"align":688},[686,1098,808],{"align":688},[686,1100,812],{"align":688},[692,1102,1103,1111,1119],{},[683,1104,1105,1107,1109],{},[697,1106,828],{"align":688},[697,1108,837],{"align":688},[697,1110,845],{"align":688},[683,1112,1113,1115,1117],{},[697,1114,858],{"align":688},[697,1116,578],{"align":688},[697,1118,871],{"align":688},[683,1120,1121,1123,1125],{},[697,1122,828],{"align":688},[697,1124,1075],{"align":688},[697,1126,1082],{"align":688},[22,1128,1129],{},"Note that all constants must be defined before any subexperiments.",[22,1131,1132],{},"You can vary as many settings as you want, including just one, or none at all.\nAny settings that you do not vary will retain their current values. Not varying\nany settings is useful if you just want to do many runs with the current\nsettings.",[22,1134,1135],{},"The order in which you list the variables determines the run order. All values\nfor a later variable will be tried before moving to the next\nvalue for an earlier variable. So for example if you vary both x and y from 1 to\n3, and x is listed first, then the order of model runs will be: x=1 y=1,\nx=1 y=2, x=1 y=3, x=2 y=1, and so on.",[22,1137,1138,1141],{},[35,1139,1140],{},"Repetitions:"," Sometimes the behavior of a model can vary a lot from run to\nrun even if the settings don’t change, if the model uses random numbers. If you\nwant to run the model more than once at each combination of settings, enter a\nhigher number.\nWith sequential ordering repetitions occur in sequential runs:",[672,1143,1145],{"className":1144},[675],[677,1146,1147,1155],{},[680,1148,1149],{},[683,1150,1151,1153],{},[686,1152,16],{"align":688},[686,1154,629],{"align":688},[692,1156,1157,1163,1169,1175,1181,1188,1194,1200,1206,1212,1218,1224],{},[683,1158,1159,1161],{},[697,1160,457],{"align":688},[697,1162,647],{"align":688},[683,1164,1165,1167],{},[697,1166,457],{"align":688},[697,1168,647],{"align":688},[683,1170,1171,1173],{},[697,1172,647],{"align":688},[697,1174,647],{"align":688},[683,1176,1177,1179],{},[697,1178,647],{"align":688},[697,1180,647],{"align":688},[683,1182,1183,1185],{},[697,1184,457],{"align":688},[697,1186,1187],{"align":688},"6",[683,1189,1190,1192],{},[697,1191,457],{"align":688},[697,1193,1187],{"align":688},[683,1195,1196,1198],{},[697,1197,647],{"align":688},[697,1199,1187],{"align":688},[683,1201,1202,1204],{},[697,1203,647],{"align":688},[697,1205,1187],{"align":688},[683,1207,1208,1210],{},[697,1209,457],{"align":688},[697,1211,431],{"align":688},[683,1213,1214,1216],{},[697,1215,457],{"align":688},[697,1217,431],{"align":688},[683,1219,1220,1222],{},[697,1221,647],{"align":688},[697,1223,431],{"align":688},[683,1225,1226,1228],{},[697,1227,647],{"align":688},[697,1229,431],{"align":688},[22,1231,1232],{},"With non-sequential ordering repetitions occur as a second group of runs:",[672,1234,1236],{"className":1235},[675],[677,1237,1238,1246],{},[680,1239,1240],{},[683,1241,1242,1244],{},[686,1243,16],{"align":688},[686,1245,629],{"align":688},[692,1247,1248,1254,1260,1266,1272,1278,1284,1290,1296,1302,1308,1314],{},[683,1249,1250,1252],{},[697,1251,457],{"align":688},[697,1253,647],{"align":688},[683,1255,1256,1258],{},[697,1257,647],{"align":688},[697,1259,647],{"align":688},[683,1261,1262,1264],{},[697,1263,457],{"align":688},[697,1265,1187],{"align":688},[683,1267,1268,1270],{},[697,1269,647],{"align":688},[697,1271,1187],{"align":688},[683,1273,1274,1276],{},[697,1275,457],{"align":688},[697,1277,431],{"align":688},[683,1279,1280,1282],{},[697,1281,647],{"align":688},[697,1283,431],{"align":688},[683,1285,1286,1288],{},[697,1287,457],{"align":688},[697,1289,647],{"align":688},[683,1291,1292,1294],{},[697,1293,647],{"align":688},[697,1295,647],{"align":688},[683,1297,1298,1300],{},[697,1299,457],{"align":688},[697,1301,1187],{"align":688},[683,1303,1304,1306],{},[697,1305,647],{"align":688},[697,1307,1187],{"align":688},[683,1309,1310,1312],{},[697,1311,457],{"align":688},[697,1313,431],{"align":688},[683,1315,1316,1318],{},[697,1317,647],{"align":688},[697,1319,431],{"align":688},[22,1321,1322,1325],{},[35,1323,1324],{},"Measure runs using these reporters:"," This is where you specify what data you\nwant to collect from each run. For example, if you wanted to record how the\npopulation of turtles rose and fell during each run, you would enter:",[437,1327,1328],{},[22,1329,1330],{},[303,1331,1332,410,1336],{},[405,1333,1335],{"className":1334},[408,409],"count",[405,1337,1339],{"className":1338},[408,409],"turtles",[22,1341,1342],{},"You can enter one reporter, or several, or none at all. If you enter several,\neach reporter must be on a line by itself, for example:",[437,1344,1345,1348,1351,1354,1356],{},[303,1346,1347],{},"count frogs",[1349,1350],"br",{},[303,1352,1353],{},"count mice",[1349,1355],{},[303,1357,1358],{},"count birds",[22,1360,1361,1362,1371,1372,1399,1400,1403],{},"If you don’t enter any reporters, the runs will still take place. This is useful\nif you want to record the results yourself your own way, such as with the\n",[303,1363,1365],{"className":1364},[306],[16,1366,1369],{"href":1367,"className":1368,"dataDisplayText":1369,"rel":1370,"target":315,"title":1369},"/dictionary#export-cmds",[311],"export-world",[314]," command. You can use reporters you have\ndefined in the Code tab. Reporters appear as column headers. If you prefer compact\nheaders you could replace ",[303,1373,1374,410,1377,410,1381,1385,1386,410,1390,410,1393,1398],{},[405,1375,1335],{"className":1376},[408,409],[405,1378,1380],{"className":1379},[408,409],"patches",[405,1382,1384],{"className":1383},[408,409],"with"," [ ",[405,1387,1389],{"className":1388},[408,409],"pcolor",[405,1391,414],{"className":1392},[408,409],[405,1394,1397],{"className":1395},[408,1396],"constant","red"," ]"," with a reporter ",[303,1401,1402],{},"red-patches","\ndefined in the Code tab.",[22,1405,1406,1409],{},[35,1407,1408],{},"Run metrics every step:"," Normally NetLogo will measure model runs at\nevery step, using the reporters you entered in the previous box. If you’re doing\nvery long model runs, you might not want all that data. Uncheck this box if you\nwant to either only measure model runs at the end of the run or\nif you want to specify certain conditions when measurements should be taken.",[552,1411,1414],{"id":1412,"className":1413},"run-metrics-when",[14],[16,1415,78],{"className":1416,"href":75},[19],[22,1418,1419],{},[180,1420,182],{},[22,1422,1423,1424,1427,1428,1431,1432,1435,1436,335,1439,160],{},"This reporter will be used to determine when measurements\nshould be recorded if they are not being recorded at every step. Measurements\nwill be always be taken at the end of each model run, even if this text box is\nempty as was previously the case when the ",[180,1425,1426],{},"Measure runs at every step","\n(now ",[180,1429,1430],{},"Run metrics every step",") was unchecked.  For example ",[180,1433,1434],{},"ticks mod 10 = 0","\nwould record every tenth tick, as well as the last tick. Multiple reporters\ncan be combined using ",[180,1437,1438],{},"and",[180,1440,1441],{},"or",[1443,1444,1447],"h5",{"id":1445,"className":1446},"pre-experiment-commands",[14],[16,1448,87],{"className":1449,"href":84},[19],[22,1451,1452],{},"These commands will be run once, before the experiment begins.",[22,1454,1455,1458,1459,1462,1463,1477,1478],{},[35,1456,1457],{},"Setup commands:"," These commands will be used to begin each model run.\nTypically, you will enter the name of a procedure that sets up the model,\ntypically ",[303,1460,1461],{},"setup",". But it is also possible to include other commands as well.\nIf you want the same\nresults each time you run an experiment, you could use something like\n",[303,1464,1465,410,1469,410,1473],{},[405,1466,368],{"className":1467},[408,1468],"command",[405,1470,1472],{"className":1471},[408,418],"473",[405,1474,1461],{"className":1475},[408,1476],"variable"," or to have different results for repetitions\n",[303,1479,1480,263,1483,410,1487,410,1491,1495,1496],{},[405,1481,368],{"className":1482},[408,1468],[405,1484,1486],{"className":1485},[408,418],"474",[405,1488,1490],{"className":1489},[408,409],"+",[405,1492,1494],{"className":1493},[408,409],"behaviorspace-run-number",") ",[405,1497,1461],{"className":1498},[408,1476],[22,1500,1501,1504,1505,1508],{},[35,1502,1503],{},"Go commands:"," These commands will be run over and over again to advance to\nthe model to the next “step”. Typically, this will be the name of a procedure,\nsuch as ",[303,1506,1507],{},"go",", but you may include any commands you like.",[22,1510,1511,1514],{},[35,1512,1513],{},"Stop condition:"," This lets you do model runs of varying length, ending each\nrun when a certain condition becomes true. For example, suppose you wanted each\nrun to last until there were no more turtles. Then you would enter:",[437,1516,1517],{},[22,1518,1519],{},[303,1520,1521,410,1525,410,1529],{},[405,1522,1524],{"className":1523},[408,409],"not",[405,1526,1528],{"className":1527},[408,409],"any?",[405,1530,1339],{"className":1531},[408,409],[22,1533,1534],{},"If you want the length of runs to all be of a fixed length, just leave this\nblank.",[22,1536,1537,1538,1547,1548,1555,1556,1563,1564,1566,1567,1574],{},"The run may also stop because the go commands use the ",[303,1539,1541],{"className":1540},[306],[16,1542,1545],{"href":1543,"className":1544,"dataDisplayText":1545,"rel":1546,"target":315,"title":1545},"/dictionary#stop",[311],"stop",[314]," command, in the\nsame way that ",[303,1549,1551],{"className":1550},[306],[16,1552,1545],{"href":1543,"className":1553,"dataDisplayText":1545,"rel":1554,"target":315,"title":1545},[311],[314]," can be used to stop a forever button. The ",[303,1557,1559],{"className":1558},[306],[16,1560,1545],{"href":1543,"className":1561,"dataDisplayText":1545,"rel":1562,"target":315,"title":1545},[311],[314],"\ncommand may be used directly in the go commands, or in a procedure called\ndirectly by the go commands. (The intent is that the same ",[303,1565,1507],{}," procedure should\nwork both in a button and in a BehaviorSpace experiment.) Note that the step in\nwhich ",[303,1568,1570],{"className":1569},[306],[16,1571,1545],{"href":1543,"className":1572,"dataDisplayText":1545,"rel":1573,"target":315,"title":1545},[311],[314]," is used is considered to have been aborted, so no results will be\nrecorded for that step. Therefore, the stopping test should be at the beginning\nof the go commands or procedure, not at the end.",[22,1576,1577,1580,1581,1588],{},[35,1578,1579],{},"Post run commands:"," These are any extra commands that you want run when\neach run ends. Usually this is left blank, but you might use it to call the\n",[303,1582,1584],{"className":1583},[306],[16,1585,1369],{"href":1367,"className":1586,"dataDisplayText":1369,"rel":1587,"target":315,"title":1369},[311],[314]," command or record the results of\nthe run in some other way.",[1443,1590,1593],{"id":1591,"className":1592},"post-experiment-commands",[14],[16,1594,96],{"className":1595,"href":93},[19],[22,1597,1598],{},"These are any commands that you want to run at\nthe end of the experiment, after all runs have completed.",[22,1600,1601,1604],{},[35,1602,1603],{},"Time limit:"," This lets you set a fixed maximum length for each run. If you\ndon’t want to set any maximum, but want the length of the runs to be controlled\nby the stop condition instead, enter 0.",[22,1606,1607,1610],{},[35,1608,1609],{},"Note on pre and post experiment commands:"," These commands execute outside of\nthe actual runs, so they cannot affect the global variables or agents in the\nmodel (use the Setup commands and Post run commands for that). If you use\nprimitives like file-open or the CSV extension in the pre or post experiment\ncommands, their internal state will not carry over into the runs and errors will\nlikely occur if used there.",[201,1612,1615],{"id":1613,"className":1614},"importing-and-exporting",[14],[16,1616,123],{"className":1617,"href":120},[19],[22,1619,1620],{},[180,1621,182],{},[22,1623,1624],{},"Although experiments are tied to a model and are usually saved along with a\nmodel, they can also be imported and exported individually to xml files. This\nallows you to easily transfer experiments between models, and also prepares\nexperiments to be run headlessly. After an experiment is exported to an xml file,\nit can be edited by hand or by another script, not just within NetLogo.",[22,1626,1627,1628,1631],{},"The ",[35,1629,1630],{},"Import"," button allows you to import experiments from an xml file. The\nselected files may contain any number of experiments, but any experiments that\nare formatted incorrectly will not be loaded. If you load an experiment that has\nthe same name as an existing experiment, the name of the loaded experiment will\nbe slightly altered to ensure that experiment names remain unique.",[22,1633,1627,1634,1637],{},[35,1635,1636],{},"Export"," button allows you to export experiments to an xml file. Any number\nof experiments may be selected for export at once, but they will all be combined\ninto a single output file.",[201,1639,1642],{"id":1640,"className":1641},"special-primitives-for-behaviorspace-experiments",[14],[16,1643,1646],{"className":1644,"href":1645},[19],"#special-primitives-for-behaviorspace-experiments","Special primitives for BehaviorSpace experiments",[22,1648,1649,1650,809,1658,1667],{},"Currently there are only two, ",[303,1651,1653],{"className":1652},[306],[16,1654,1494],{"href":1655,"className":1656,"dataDisplayText":1494,"rel":1657,"target":315,"title":1494},"/dictionary#behaviorspace-run-number",[311],[314],[303,1659,1661],{"className":1660},[306],[16,1662,1665],{"href":1663,"className":1664,"dataDisplayText":1665,"rel":1666,"target":315,"title":1665},"/dictionary#behaviorspace-experiment-name",[311],"behaviorspace-experiment-name",[314],". The run number reported by the former\nprimitive matches the run number used in the results files generated by\nBehaviorSpace. The experiment name reported by the latter matches the name with\nwhich the experiment was set up.",[201,1669,1672],{"id":1670,"className":1671},"running-an-experiment",[14],[16,1673,1676],{"className":1674,"href":1675},[19],"#running-an-experiment","Running an experiment",[22,1678,1679],{},"When you’re done setting up your experiment, press the “OK” button, followed by\nthe “Run” button. A dialog titled “Run Options” will appear.",[552,1681,1684],{"id":1682,"className":1683},"run-options-formats",[14],[16,1685,1688],{"className":1686,"href":1687},[19],"#run-options-formats","Run options: formats",[22,1690,1691,1692,335,1695,1698,1699,335,1701,1703,1704,1707,1708,1711,1712,335,1714,1716,1717,809,1720,1722,1723,1725,1726,1728],{},"The “Run Options” dialog lets you choose to create data output files in two primary formats, ",[35,1693,1694],{},"Table\noutput",[35,1696,1697],{},"Spreadsheet output",". If one or both of these formats is selected, you can\nalso select the supplementary ",[35,1700,114],{},[35,1702,105],{},". Each file path can be entered in its\ncorresponding text box, or using the *",[180,1705,1706],{},"Browse…"," button to select a file path using the system\nfile dialog. If you don’t wish to use a particular format, you can clear the file text or click\nthe ",[35,1709,1710],{},"Disable"," button and it’ll be cleared for you.\nThe frequency of data collection is determined by the settings of the\n",[35,1713,1430],{},[35,1715,78],{}," options. For ",[35,1718,1719],{},"Table output",[35,1721,1697],{}," formats, the initial state of the system is recorded, after the ",[35,1724,1461],{},"\ncommands run but before the ",[35,1727,1507],{}," commands run for the first time.",[22,1730,1731],{},"After selecting your output formats, BehaviorSpace will prompt you for the name\nof a file to save the results to. The default name ends in “.csv”. You can\nchange it to any name you want, but don’t leave off the “.csv” part; that\nindicates the file is a Comma Separated Values (CSV) file. This is a plain-text\ndata format that is readable by any text editor as well as by most popular\nspreadsheet and database programs.",[22,1733,1734],{},"All four output formats will include a header section that has rows for 1) the NetLogo app\nversion used, 2) the name of the NetLogo model file used, 3) the name of the BehaviorSpace\nexperiment used, 4) the date and time at the start, and 5) the dimensions of the world used at\nthe start.",[552,1736,1739],{"id":1737,"className":1738},"table-output",[14],[16,1740,1719],{"className":1741,"href":1742},[19],"#table-output",[22,1744,1745,1746,1749,1750,1759,1760,1763,1764,1766],{},"This format lists each measurement step from each run in its own row, with each\nmetric in a separate column.  The measurement rows will appear in the order they happen in real\ntime.  With the ",[35,1747,1748],{},"parallel runs"," option the measurements may appear in a mixed order as\nmultiple runs can happen simultaneously.  To help identify which run a row belongs to, there is\na column titled ",[303,1751,443,1752,410,1756,614],{},[405,1753,1755],{"className":1754},[408,1468],"run",[405,1757,418],{"className":1758},[408,1476]," along with a column titled ",[303,1761,1762],{},"[step]"," that indicates the measurement\nnumber for that run.  Each row also includes the values used for the variables during initial\nsetup of the run; these values are the same for each of that run’s measurement rows.  ",[35,1765,1694],{}," data is written to the file as each run completes.",[22,1768,1627,1769,1771],{},[35,1770,1719],{}," format is good to use when you want to further process the data using another\ntool, such as importing into a database, a statistics package, or a spreadsheet application for\nanalysis.",[22,1773,1774,1775,1777],{},"In the ",[35,1776,1719],{}," sample image below, the header section is in red, the run number and step\ncolumns are in blue, the initial values of the variables for the run are in green, and the\nmeasurement metric data is in purple.",[22,1779,1780],{},[1781,1782],"img",{"alt":1783,"className":1784,"src":1786,"width":1787,"height":1788,"style":1789},"behaviorspace/bs-table.png",[1785],"netlogo-image","/_content/images/behaviorspace/bs-table.png",1079,339,{"aspectRatio":1790},"1079/339",[552,1792,1795],{"id":1793,"className":1794},"spreadsheet-output",[14],[16,1796,1697],{"className":1797,"href":1798},[19],"#spreadsheet-output",[22,1800,1801,1802,1805,1806,1814,1815,1825],{},"This format lists the step numbers as well as each metric for each run in a\nseparate column, with each row corresponding to a measurement step that applies to all runs. If one\nrun finishes before another due to a ",[35,1803,1804],{},"stop condition",", then its step numbers after that\npoint will be blank. At the top of the file there is a ",[303,1807,443,1808,410,1811,614],{},[405,1809,1755],{"className":1810},[408,1468],[405,1812,418],{"className":1813},[408,1476]," row that will have the run\nnumber repeated for each metric at the top of the file.  After that are rows for the initial values\ngiven to each variable for the run.  The spreadsheet output also calculates the min, mean, max, and\nfinal values for the step numbers as well as each metric and lists those after the initial values\nbefore the individual run measurements. Then it lists the actual number of steps a run went through\nin a ",[303,1816,443,1817,410,1821,614],{},[405,1818,1820],{"className":1819},[408,1476],"total",[405,1822,1824],{"className":1823},[408,1476],"steps"," row.",[22,1827,1627,1828,1830],{},[35,1829,1697],{}," data makes it easier to quickly compare runs against each other, as they\nwill be aligned vertically when imported into a spreadsheet application.  It can also make\ngenerating comparative graphs of results with initial variable changes across runs easy for the\nsame reason.",[22,1832,1833,1834,1836,1837,1839,1840,1842,1843,1845],{},"It is important to note that ",[35,1835,1697],{}," data is not written to the results file until\nthe experiment finishes. Since the data is stored in memory until the experiment is done, very\nlarge experiments could run out of memory.  You should disable ",[35,1838,1697],{}," unless you\nreally want it.  Also, if anything interrupts the experiment no spreadsheet results will be written.\nPossible sources of interruptions would be runtime errors in the model, running out of memory,\nsystem crashes, or power outages.  For long experiments you may want to also enable ",[35,1841,1719],{},"\nformat as a precaution so that if something happens and you get no ",[35,1844,1697],{}," you’ll\nat least get partial data output.",[22,1847,1774,1848,1850],{},[35,1849,1697],{}," sample image below, the header section is in red, the run number row\nis in blue, the initial values of the variables for the run are in green, the extra calculated\nmetrics are in orange, and the measurement metric data is in purple.",[22,1852,1853],{},[1781,1854],{"alt":1855,"className":1856,"src":1857,"width":1858,"height":1859,"style":1860},"behaviorspace/bs-spreadsheet.png",[1785],"/_content/images/behaviorspace/bs-spreadsheet.png",941,500,{"aspectRatio":1861},"941/500",[552,1863,1866],{"id":1864,"className":1865},"statistics-output",[14],[16,1867,105],{"className":1868,"href":102},[19],[22,1870,1871],{},[180,1872,182],{},[22,1874,1875,1876,1878,1879,1881,1882,1884],{},"You can create a file with the mean and standard deviation of each numeric\nmetric by enabling the ",[35,1877,105],{},". Metrics are the reporters specified\nin the “Measure runs using these reporters as metrics:” box. You must also use the\n",[35,1880,1719],{}," and/or the ",[35,1883,1697],{}," because one of them will used\nto calculate the mean and standard deviation of each numeric\nmetric across repetitions for each step. These calculations are done at the end of\nthe experiment. The statistics are then saved in the specified file.\nIt is important to note that metrics that produce non-numeric values such as\nstrings are not included in the statistics.\nIf the metrics produce lists, the statistics are calculated across elements with\nthe same index for each list.\nStatistics are not calculated for metrics that produce lists that contain non-numeric elements. Also, the type of\nthe measurement must remain constant. For example, statistics are not calculated if a metric\nproduces measurements that can be both lists and numbers. Furthermore, the standard deviation may be “N/A”,\nwhich means that there were two or fewer collected measurements for that step and parameter combination,\nproducing a result that is not well-defined. The experiment must use at least 3 repetitions\nto produce standard deviation values.",[22,1886,1774,1887,1889],{},[35,1888,105],{}," sample image below (creating using the “Red Queen”\nlibrary model), the header section is in red, the parameter\ncombinations are in green, the steps are in blue, and the statistics are in purple.\nStarting with column F, the statistics are the mean of “count frogs”,  the\nstandard deviation of “count frogs”, followed by the same statistics for\n“count snakes”, average-poison, and average-resistance. Column E shows the step,\nand columns A-D show the parameter combination that was used. The statistics\nare calculated across all the repetitions.",[22,1891,1892],{},[1781,1893],{"alt":1894,"className":1895,"src":1896,"width":1787,"height":1788,"style":1897},"behaviorspace/bs-stats.png",[1785],"/_content/images/behaviorspace/bs-stats.png",{"aspectRatio":1790},[552,1899,1902],{"id":1900,"className":1901},"lists-output",[14],[16,1903,114],{"className":1904,"href":111},[19],[22,1906,1907],{},[180,1908,182],{},[22,1910,1911,1912,1914,1915,809,1917,1919,1920,1923],{},"This format is a supplement to the other two primary formats, as opposed to a complete data\ncollection format. If you have any reporters that return a list, you can use the ",[35,1913,114],{},"\nformat to get properly formatted output for those reporters. Data is produced for all\nlist reporters in the “metrics” box. In both ",[35,1916,1697],{},[35,1918,1719],{}," formats, lists returned by reporters will be condensed into a single cell, rather\nthan their elements being spread out with one value per cell. If you need the list values in\nindividual cells, select the ",[35,1921,1922],{},"List output"," format in addition to one or both of the other formats.",[22,1925,1926,1927,1929,1930,1932,1933,1935],{},"Note that the ",[35,1928,114],{}," format, like the ",[35,1931,1697],{}," format, will not contain any\ndata until the experiment is complete. Also note that the ",[35,1934,114],{}," must be used in tandem\nwith another format, it cannot be used on its own.",[22,1937,1774,1938,1940],{},[35,1939,114],{}," sample image below, the header section is in red, the reporter name is in\norange, the run number and step columns are in blue, the initial values of the variables for the run\nare in green, and the expanded list data is in purple. The list data starts in\nrow 7, with the headers (the index into the list, starting from 0) starting in\ncolumn E.",[22,1942,1943],{},[1781,1944],{"alt":1945,"className":1946,"src":1947,"width":1787,"height":1788,"style":1948},"behaviorspace/bs-lists.png",[1785],"/_content/images/behaviorspace/bs-lists.png",{"aspectRatio":1790},[552,1950,1953],{"id":1951,"className":1952},"output-file-changes",[14],[16,1954,159],{"className":1955,"href":156},[19],[22,1957,1958],{},[180,1959,182],{},[26,1961,1962,1965,1968,1999,2006],{},[29,1963,1964],{},"Output files have version numbers.",[29,1966,1967],{},"Spreadsheet output always includes step information.",[29,1969,1970,1971,1989,1990,160],{},"Spreadsheet output column header ",[303,1972,443,1973,410,1977,410,1981,410,1985,614],{},[405,1974,1976],{"className":1975},[408,1476],"initial",[405,1978,1980],{"className":1979},[408,1476],"&",[405,1982,1984],{"className":1983},[408,1476],"final",[405,1986,1988],{"className":1987},[408,1476],"values"," was changed to the more accurate ",[303,1991,443,1992,410,1995,614],{},[405,1993,1984],{"className":1994},[408,1476],[405,1996,1998],{"className":1997},[408,1476],"value",[29,2000,2001,2005],{},[16,2002,2003],{"href":102},[35,2004,105],{}," was added.",[29,2007,2008,2005],{},[16,2009,2010],{"href":111},[35,2011,114],{},[552,2013,2016],{"id":2014,"className":2015},"run-options-update-plots-and-monitors",[14],[16,2017,141],{"className":2018,"href":138},[19],[22,2020,2021,2022,2024,2025,326,2033,316,2041,2049,2050,160],{},"The “Run Options” dialog lets you choose whether to update plots and monitors or not.\nPerformance is better when the box is unchecked.\nNote that ",[180,2023,182],{}," if you begin the experiment with the box unchecked, you will\nnot be able to toggle between enabling and disabling the update plots checkbox in the\n“Running Experiments” dialog. This gives you an even greater performance improvement\nthan was obtained before NetLogo 6.4, when such toggling was possible.\nCheck the box if you you need to export plot data using primitives such as ",[303,2026,2028],{"className":2027},[306],[16,2029,2031],{"href":1367,"className":2030,"dataDisplayText":2031,"rel":2032,"target":315,"title":2031},[311],"export-interface",[314],[303,2034,2036],{"className":2035},[306],[16,2037,2039],{"href":1367,"className":2038,"dataDisplayText":2039,"rel":2040,"target":315,"title":2039},[311],"export-plot",[314],[303,2042,2044],{"className":2043},[306],[16,2045,2047],{"href":1367,"className":2046,"dataDisplayText":2047,"rel":2048,"target":315,"title":2047},[311],"export-all-plots",[314],", and ",[303,2051,2053],{"className":2052},[306],[16,2054,1369],{"href":1367,"className":2055,"dataDisplayText":1369,"rel":2056,"target":315,"title":1369},[311],[314],[552,2058,2061],{"id":2059,"className":2060},"run-options-parallel-runs",[14],[16,2062,2065],{"className":2063,"href":2064},[19],"#run-options-parallel-runs","Run options: parallel runs",[22,2067,2068,2069,2071,2072,2074],{},"The “Run Options” dialog also lets you select whether you want multiple model runs to happen in parallel, and if so, how\nmany are allowed to be simultaneously active. The default and recommended maximum number of parallel runs are shown\nbelow the text box ",[180,2070,182],{},". Your choice of number of parallel runs\nis remembered from experiment to experiment ",[180,2073,182],{},". Because each additional run\nincreases memory usage we recommend starting with the default number of runs, and then\ntrying more parallel runs if you want. The recommended maximum number of parallel runs is just an estimate, and\nsome users have found that performance is significantly decreased when using the maximum.",[22,2076,2077],{},"There are a few cautions associated with parallel runs.",[22,2079,2080],{},"First, if multiple runs are active, only one of them will be in the “foreground” and cause the view and plots to update.\nThe other runs will happen invisibly in the background.",[22,2082,2083],{},"Second, invisible background runs can’t use primitives that only work in the GUI. For example, a background run can’t\nmake a movie.",[22,2085,2086],{},"Third, since parallel runs progress independently of each other, table format output may contain interleaved,\nout-of-order results. When you analyze your table data, you may wish to sort it by run number first. (Spreadsheet format\noutput is not affected by this issue, since it is not written until the experiment completes or is aborted.)",[22,2088,2089],{},"Fourth, using all available processor cores may make your computer slow to use for other tasks while the experiment is\nrunning or slow to complete runs as contention will build for memory between the runs themselves. If your\nmodel uses a large amount of memory, you may find that reducing the number of runs will enable the runs to\ncomplete in less time overall since work will be done by the system keeping the memory for each run available. A good\nrule of thumb might be to start with the default value shown in the “Run Options”, and bump\nup or down from there to see where your “sweet spot” is for least time to complete all runs.",[22,2091,2092,2093,2097],{},"Fifth, doing runs in parallel will multiply the experiment’s memory requirements accordingly. You may need to increase\nNetLogo’s memory ceiling (see ",[16,2094,2096],{"href":2095},"/faq#how-big-can-my-model-be-how-many-turtles-patches-procedures-buttons-and-so-on-can-my-model-contain","this FAQ\nentry",").\nBy default NetLogo will not exceed 50% of your system’s memory.",[22,2099,2100,2101,2103,2104,2123,2124,488,2127,2130,2131,2133],{},"Sixth, each parallel run will get its own world for the model to run in.  This world is ",[180,2102,1524],{}," cleared automatically by\nBehaviorSpace if a parallel run gets re-used for another repetition, which happens quite frequently.  This means, for\nexample, if you do ",[303,2105,2106,410,2110,1385,2113,410,2117,410,2120,1398],{},[405,2107,2109],{"className":2108},[408,1468],"ask",[405,2111,1380],{"className":2112},[408,409],[405,2114,2116],{"className":2115},[408,1468],"set",[405,2118,1389],{"className":2119},[408,409],[405,2121,1397],{"className":2122},[408,1396]," in one run and do not use ",[303,2125,2126],{},"clear-all",[303,2128,2129],{},"clear-patches"," in the\nsetup commands of the next run, then the patches will all still be red.  In general using ",[303,2132,2126],{}," before each run\nwould be a best practice, but there are times when you might not want to, such as loading data from a file that doesn’t\nchange run-to-run.  Just be careful with whatever data is not cleared out.",[22,2135,2136,2137,2146,2147,2149,2150,160],{},"Seventh, there is a very, very small chance that at startup multiple parallel runs could wind up with the same random\nnumber generator state if they startup at the exact same moment in time.  This means the runs would produce identical\noutput for all random operations and likely the same results.  This would have a chance to happen when running on very\nfast processors and with lots of parallel runs at once.  If you need to make sure this doesn’t impact your results, you\ncan add ",[303,2138,2139,410,2142],{},[405,2140,368],{"className":2141},[408,1468],[405,2143,2145],{"className":2144},[408,409],"new-seed"," to your setup commands to re-generate a new unique random seed for each run.  In fact,\nstoring the ",[303,2148,2145],{}," as a global variable so you can output it with the rest of your results would let you re-run a\nrun later on by manually using that value to set the ",[303,2151,368],{},[552,2153,2156],{"id":2154,"className":2155},"observing-runs",[14],[16,2157,2160],{"className":2158,"href":2159},[19],"#observing-runs","Observing runs",[22,2162,2163],{},"After you complete the “Run Options” dialog, another dialog will appear, titled\n“Running Experiment”. In this dialog, you’ll see a progress report of how many\nruns have been completed so far and how much time has passed. If you entered any\nreporters for measuring the runs, and if you left the “Run metrics every step”\nbox checked, then you’ll see a plot of how they vary over the course of each run.",[22,2165,2166,2167,160],{},"You can also watch the runs in the main NetLogo window. (If the “Running\nExperiment” dialog is in the way, just move it to a different place on the\nscreen.) If you don’t need to see the plots update, then use the checkboxes in\nthe “Running Experiment” dialog to turn the updating off. This will make the\nexperiment go faster. However, if you already disabled updating plots and monitors\nin the “Run Options” dialog, this checkbox will be disabled ",[180,2168,182],{},[22,2170,2171,2172,2174],{},"If you want to stop your experiment before it’s finished, you have two options.\nTo stop the experiment after the current runs have completed and save your progress\nfor later, press the “Pause” button ",[180,2173,182],{},". To stop the experiment immediately without\nwaiting for the current runs to complete, press the “Abort” button. Any output\ngenerated so far will still be saved, but pressing “Abort” can lead to fragmented\ndata, so aborted experiments cannot be resumed.",[22,2176,2177],{},"When all the runs have finished, the experiment is complete. Spreadsheet, Lists and Stats\noutput are created at this point.",[552,2179,2182],{"id":2180,"className":2181},"paused-experiments",[14],[16,2183,132],{"className":2184,"href":129},[19],[22,2186,2187],{},[180,2188,182],{},[22,2190,2191],{},"Paused experiments will appear in the BehaviorSpace window marked with “In Progress”.\nTo resume an experiment where you paused it, select it and press the “Run” button.\nTo reset a paused experiment to its initial state, select it and press the “Abort”\nbutton.",[22,2193,2194,2195,488,2198,2201,2202,2205],{},"If you are using Spreadsheet output a file containing the data up until the experiment is\npaused will be written. This data will be used as part of the creation of a complete\nSpreadsheet file. Note that if your experiment is writing to its own external file you\nmay need to make some changes in order for pausing to work correctly. For example you\nshould use ",[303,2196,2197],{},"file-flush",[303,2199,2200],{},"file-close"," at the end of each run to ensure all the data\nis written to the file, and should do ",[303,2203,2204],{},"file-open"," before doing any writing during a\nrun. When opening a file in writing mode, all new data will be appended to the end\nof the original file, which is probably the behavior you want.",[22,2207,2208],{},"Note that moving or deleting output files before resuming a paused experiment will\ncause an error. Outputting new experiment data to a file associated with an existing\npaused experiment may also ause an error when that experiment is resumed.",[184,2210,2213],{"id":2211,"className":2212},"advanced-usage",[14],[16,2214,55],{"className":2215,"href":52},[19],[201,2217,2220],{"id":2218,"className":2219},"running-from-the-command-line",[14],[16,2221,2224],{"className":2222,"href":2223},[19],"#running-from-the-command-line","Running from the command line",[22,2226,2227],{},"It is possible to run BehaviorSpace experiments “headless”, that is, from the\ncommand line, without any graphical user interface (GUI). This is useful for\nautomating runs on a single machine or a cluster of machines.",[22,2229,2230],{},"No Java programming is required. Experiment setups can be created in the GUI and\nthen run later from the command line, or, if you prefer, you can create or edit\nexperiment setups directly using XML.",[552,2232,2235],{"id":2233,"className":2234},"how-to-use-it",[14],[16,2236,2239],{"className":2237,"href":2238},[19],"#how-to-use-it","How to use it",[22,2241,2242,2243,2246,2247,2250,2251,2253],{},"Run NetLogo using the ",[303,2244,2245],{},"NetLogo_Console"," app with the ",[303,2248,2249],{},"--headless"," command line argument.\nThis is found in the root directory of your NetLogo installation. The\n",[303,2252,2245],{}," script supports the following arguments:",[26,2255,2256,2261,2274,2286,2299,2315,2328,2344,2360,2401,2407,2419,2430,2441],{},[29,2257,2258,2260],{},[303,2259,2249],{},": Enable headless mode to run a BehaviorSpace experiment (required, will\nopen the graphical interface otherwise).",[29,2262,2263,2273],{},[303,2264,2265,410,2269],{},[405,2266,2268],{"className":2267},[408,1476],"--model",[405,2270,2272],{"className":2271},[408,1476],"\u003Cpath>",": pathname of model to open\n(required)",[29,2275,2276,2285],{},[303,2277,2278,410,2282],{},[405,2279,2281],{"className":2280},[408,1476],"--setup-file",[405,2283,2272],{"className":2284},[408,1476],": read experiment setups from this file instead of the\nmodel file",[29,2287,2288,2298],{},[303,2289,2290,410,2294],{},[405,2291,2293],{"className":2292},[408,1476],"--experiment",[405,2295,2297],{"className":2296},[408,1476],"\u003Cname>",": name of experiment to run",[29,2300,2301,2310,2311,2314],{},[303,2302,2303,410,2307],{},[405,2304,2306],{"className":2305},[408,1476],"--table",[405,2308,2272],{"className":2309},[408,1476],": pathname to send table output to (or ",[303,2312,2313],{},"-"," for standard\noutput)",[29,2316,2317,2310,2326,2314],{},[303,2318,2319,410,2323],{},[405,2320,2322],{"className":2321},[408,1476],"--spreadsheet",[405,2324,2272],{"className":2325},[408,1476],[303,2327,2313],{},[29,2329,2330,2339,2340,488,2342],{},[303,2331,2332,410,2336],{},[405,2333,2335],{"className":2334},[408,1476],"--lists",[405,2337,2272],{"className":2338},[408,1476],": pathname to send lists output to (or - for standard output),\ncannot be used without ",[303,2341,2306],{},[303,2343,2322],{},[29,2345,2346,2355,2356,488,2358],{},[303,2347,2348,410,2352],{},[405,2349,2351],{"className":2350},[408,1476],"--stats",[405,2353,2272],{"className":2354},[408,1476],": pathname to send statistics output to (or - for standard output)\ncannot be used without ",[303,2357,2306],{},[303,2359,2322],{},[29,2361,2362,2372,2373,160],{},[303,2363,2364,410,2368],{},[405,2365,2367],{"className":2366},[408,1476],"--threads",[405,2369,2371],{"className":2370},[408,1476],"\u003Cnumber>",": use this many threads to do model runs in parallel, or 1\nto disable parallel runs. defaults to ",[303,2374,2375,2379,2380,410,2384,410,2388,410,2392,410,2396,2400],{},[405,2376,2378],{"className":2377},[408,409],"floor","(",[405,2381,2383],{"className":2382},[408,418],"0.75",[405,2385,2387],{"className":2386},[408,409],"*",[405,2389,2391],{"className":2390},[408,1476],"\u003Cnumber",[405,2393,2395],{"className":2394},[408,409],"of",[405,2397,2399],{"className":2398},[408,1476],"processors>",")",[29,2402,2403,2406],{},[303,2404,2405],{},"--update-plots",": enable plot updates. Include this if you want to export plot data,\nor exclude it for better performance.",[29,2408,2409,2418],{},[303,2410,2411,410,2415],{},[405,2412,2414],{"className":2413},[408,1476],"--min-pxcor",[405,2416,2371],{"className":2417},[408,1476],": override world size setting in model file",[29,2420,2421,2418],{},[303,2422,2423,410,2427],{},[405,2424,2426],{"className":2425},[408,1476],"--max-pxcor",[405,2428,2371],{"className":2429},[408,1476],[29,2431,2432,2418],{},[303,2433,2434,410,2438],{},[405,2435,2437],{"className":2436},[408,1476],"--min-pycor",[405,2439,2371],{"className":2440},[408,1476],[29,2442,2443,2418],{},[303,2444,2445,410,2449],{},[405,2446,2448],{"className":2447},[408,1476],"--max-pycor",[405,2450,2371],{"className":2451},[408,1476],[22,2453,2454,2456,2457,2459,2460,2462,2463,488,2465,2467],{},[303,2455,2268],{}," is required. If you don’t specify ",[303,2458,2293],{},", you must specify\n",[303,2461,2281],{},". By default no results are generated, so you’ll usually want to\nspecify either ",[303,2464,2306],{},[303,2466,2322],{},", or both. If you specify any of the\nworld dimensions, you must specify all four.",[22,2469,2470,2471,2474,2475,2478,2479,2481,2482,2485,2486,2488],{},"Note that prior to NetLogo 6.3.0 the directions were to use ",[303,2472,2473],{},"netlogo-headless.sh","\n(or ",[303,2476,2477],{},"netlogo-headless.bat"," on Windows) along with a separate installation of Java of the\nsystem to run BehaviorSpace experiments.  The ",[303,2480,2473],{}," script is still\nincluded with NetLogo and can still be used as before, which might be preferrable in\nserver environments where the installed Java version is strictly controlled.  But the\nrecommended method for on a personal computer is to use the ",[303,2483,2484],{},"NetLogo_Console --headless"," app.  Because ",[303,2487,2245],{}," uses the Java that comes bundled with NetLogo it\nrequires no extra software installation or configuration.",[552,2490,2493],{"id":2491,"className":2492},"examples",[14],[16,2494,2497],{"className":2495,"href":2496},[19],"#examples","Examples",[22,2499,2500,2501,2503,2504,2522],{},"It is easiest if you create your experiment setup ahead of time in the GUI, so\nit is saved as part of the model. To run an experiment setup saved in a model,\nhere is an example command line, run from the NetLogo 7.0.1 installation\nfolder so the paths to the ",[303,2502,2245],{}," app and ",[303,2505,2506,410,2510,410,2514,410,2518],{},[405,2507,2509],{"className":2508},[408,1476],"Wolf",[405,2511,2513],{"className":2512},[408,1476],"Sheep",[405,2515,2517],{"className":2516},[408,1476],"Simple",[405,2519,2521],{"className":2520},[408,1476],"5.nlogo","\nmodel are correct.",[22,2524,2525,2526,2529,2530,2533],{},"The below commands should work as-is in a terminal on macOS and Linux.  On Windows in the\nCommand Prompt you can use ",[303,2527,2528],{},"^"," instead of ",[303,2531,2532],{},"\\"," to break the command across multiple lines,\nor just put the command on a single line.",[2535,2536,2541],"pre",{"className":2537,"code":2538,"language":2539,"meta":2540,"style":2540},"language-sh shiki shiki-themes material-theme-lighter github-light github-dark","./NetLogo_Console --headless \\\n  --model \"models/IABM Textbook/chapter 4/Wolf Sheep Simple 5.nlogo\" \\\n  --experiment \"Wolf Sheep Simple model analysis\" \\\n  --table -\n","sh","",[303,2542,2543,2550,2556,2562],{"__ignoreMap":2540},[405,2544,2547],{"class":2545,"line":2546},"line",1,[405,2548,2549],{},"./NetLogo_Console --headless \\\n",[405,2551,2553],{"class":2545,"line":2552},2,[405,2554,2555],{},"  --model \"models/IABM Textbook/chapter 4/Wolf Sheep Simple 5.nlogo\" \\\n",[405,2557,2559],{"class":2545,"line":2558},3,[405,2560,2561],{},"  --experiment \"Wolf Sheep Simple model analysis\" \\\n",[405,2563,2565],{"class":2545,"line":2564},4,[405,2566,2567],{},"  --table -\n",[22,2569,2570,2571,2573],{},"After the named experiment has run, the results are sent to standard output in\ntable format, as CSV. ",[303,2572,2313],{}," is how you specify standard output instead of output\nto a file.",[22,2575,2576,2577,2580],{},"When running NetLogo headless, it forces the system property ",[303,2578,2579],{},"java.awt.headless","\nto be true. This tells Java to run in headless mode, allowing NetLogo to run on\nmachines when a graphical display is not available.",[22,2582,2583,2584,2586],{},"The required ",[303,2585,2268],{}," argument is used to specify the model file you want to\nopen.",[22,2588,1627,2589,2591],{},[303,2590,2293],{}," argument is used to specify the name of the experiment you\nwant to run. (At the time you create an experiment setup in the GUI, you assign\nit a name.)",[22,2593,2594],{},"Here’s another example that shows some additional, optional arguments:",[2535,2596,2598],{"className":2537,"code":2597,"language":2539,"meta":2540,"style":2540},"./NetLogo_Console --headless \\\n  --model \"models/IABM Textbook/chapter 4/Wolf Sheep Simple 5.nlogo\" \\\n  --experiment \"Wolf Sheep Simple model analysis\" \\\n  --max-pxcor 5 \\\n  --min-pxcor -5 \\\n  --max-pycor 5 \\\n  --min-pycor -5\n",[303,2599,2600,2604,2608,2612,2617,2623,2629],{"__ignoreMap":2540},[405,2601,2602],{"class":2545,"line":2546},[405,2603,2549],{},[405,2605,2606],{"class":2545,"line":2552},[405,2607,2555],{},[405,2609,2610],{"class":2545,"line":2558},[405,2611,2561],{},[405,2613,2614],{"class":2545,"line":2564},[405,2615,2616],{},"  --max-pxcor 5 \\\n",[405,2618,2620],{"class":2545,"line":2619},5,[405,2621,2622],{},"  --min-pxcor -5 \\\n",[405,2624,2626],{"class":2545,"line":2625},6,[405,2627,2628],{},"  --max-pycor 5 \\\n",[405,2630,2632],{"class":2545,"line":2631},7,[405,2633,2634],{},"  --min-pycor -5\n",[22,2636,2637,2638,316,2640,2642],{},"Note the use of the optional ",[303,2639,2426],{},[303,2641,2448],{},", etc. arguments to\nspecify a different world size than that saved in the model. (It’s also possible\nfor the experiment setup to specify values for the world dimensions; if they are\nspecified by the experiment setup, then there is no need to specify them on the\ncommand line.)",[22,2644,2645,2646,2648,2649,2651],{},"Since neither ",[303,2647,2306],{}," nor ",[303,2650,2322],{}," is specified, no results will be\ngenerated. This is useful if the experiment setup generates all the output you\nneed by some other means, such as exporting world files or writing to a text\nfile.",[22,2653,2654],{},"Yet another example:",[2535,2656,2658],{"className":2537,"code":2657,"language":2539,"meta":2540,"style":2540},"./NetLogo_Console --headless \\\n  --model \"models/IABM Textbook/chapter 4/Wolf Sheep Simple 5.nlogo\" \\\n  --experiment \"Wolf Sheep Simple model analysis\" \\\n  --table wsp5-table-output.csv \\\n  --spreadsheet wsp5-spreadsheet-output.csv \\\n  --lists wsp5-lists-output.csv \\\n  --stats wsp5-stats-output.csv\n",[303,2659,2660,2664,2668,2672,2677,2682,2687],{"__ignoreMap":2540},[405,2661,2662],{"class":2545,"line":2546},[405,2663,2549],{},[405,2665,2666],{"class":2545,"line":2552},[405,2667,2555],{},[405,2669,2670],{"class":2545,"line":2558},[405,2671,2561],{},[405,2673,2674],{"class":2545,"line":2564},[405,2675,2676],{},"  --table wsp5-table-output.csv \\\n",[405,2678,2679],{"class":2545,"line":2619},[405,2680,2681],{},"  --spreadsheet wsp5-spreadsheet-output.csv \\\n",[405,2683,2684],{"class":2545,"line":2625},[405,2685,2686],{},"  --lists wsp5-lists-output.csv \\\n",[405,2688,2689],{"class":2545,"line":2631},[405,2690,2691],{},"  --stats wsp5-stats-output.csv\n",[22,2693,2694,2695,2704,2705,2707],{},"The optional ",[303,2696,2697,410,2700],{},[405,2698,2306],{"className":2699},[408,1476],[405,2701,2703],{"className":2702},[408,1476],"\u003Cfilename>"," argument specifies that output should be\ngenerated in a table format and written to the given file as CSV data. If ",[303,2706,2313],{}," is\nspecified as the filename, than the output is sent to the standard system output\nstream. Table data is written as it is generated, with each complete run.",[22,2709,2694,2710,2718,2719,2721],{},[303,2711,2712,410,2715],{},[405,2713,2322],{"className":2714},[408,1476],[405,2716,2703],{"className":2717},[408,1476]," argument specifies that spreadsheet\noutput should be generated and written to the given file as CSV data. If ",[303,2720,2313],{}," is\nspecified as the filename, than the output is sent to the standard system output\nstream. Spreadsheet data is not written out until all runs in the experiment are\nfinished.",[22,2723,2694,2724,2732,2733,2735],{},[303,2725,2726,410,2729],{},[405,2727,2335],{"className":2728},[408,1476],[405,2730,2703],{"className":2731},[408,1476]," argument specifies that lists\noutput should be generated and written to the given file as CSV data. If ",[303,2734,2313],{}," is\nspecified as the filename, than the output is sent to the standard system output\nstream. Lists data is not written out until all runs in the experiment are\nfinished.",[22,2737,2694,2738,2746,2747,2749],{},[303,2739,2740,410,2743],{},[405,2741,2351],{"className":2742},[408,1476],[405,2744,2703],{"className":2745},[408,1476]," argument specifies that stats\noutput should be generated and written to the given file as CSV data. If ",[303,2748,2313],{}," is\nspecified as the filename, than the output is sent to the standard system output\nstream. Stats data is not written out until all runs in the experiment are\nfinished.",[22,2751,2752,2753,335,2755,2757,2758,488,2760,2762,2763,488,2765,2767],{},"Note that it is legal to specify both ",[303,2754,2306],{},[303,2756,2322],{},", and if you\ndo, both kinds of output file will be generated. If you use ",[303,2759,2335],{},[303,2761,2351],{},"\nat least one of the ",[303,2764,2306],{},[303,2766,2322],{},"  options must be used.",[22,2769,2770,2771,2774],{},"Here is an example that shows how to run an experiment setup which is\nstored in a separate XML file, instead of in the model file (see below for more\ninformation on the XML file format).  This assumes you’ve created a\n",[303,2772,2773],{},"my-wsp-setups.xml"," file with a `My WSP Exploration” experiment and placed it\nin your home directory. The most straight-forward way to create a setup file\nis to create an experiment using BehaviorSpace in the NetLogo GUI and use the\n**Export ** option.",[2535,2776,2778],{"className":2537,"code":2777,"language":2539,"meta":2540,"style":2540},"./NetLogo_Console --headless \\\n  --model \"models/IABM Textbook/chapter 4/Wolf Sheep Simple 5.nlogo\" \\\n  --setup-file ~/my-wsp-setups.xml \\\n  --experiment \"My WSP Exploration\"\n",[303,2779,2780,2784,2788,2793],{"__ignoreMap":2540},[405,2781,2782],{"class":2545,"line":2546},[405,2783,2549],{},[405,2785,2786],{"class":2545,"line":2552},[405,2787,2555],{},[405,2789,2790],{"class":2545,"line":2558},[405,2791,2792],{},"  --setup-file ~/my-wsp-setups.xml \\\n",[405,2794,2795],{"class":2545,"line":2564},[405,2796,2797],{},"  --experiment \"My WSP Exploration\"\n",[22,2799,2800,2801,2803],{},"If the XML file contains more than one experiment setup, it is necessary to use\nthe ",[303,2802,2293],{}," argument to specify the name of the setup to use.",[22,2805,2806,2807,2810],{},"In order to run a NetLogo 3D experiment, run headless with the ",[303,2808,2809],{},"--3D"," argument,\nfor example:",[2535,2812,2814],{"className":2537,"code":2813,"language":2539,"meta":2540,"style":2540},"./NetLogo_Console --headless \\\n  --3D \\\n  --model \"models/3D/Sample Models/GasLab/GasLab Free Gas 3D.nlogo3d\" \\\n  --experiment \"100 runs\" \\\n  --table -\n",[303,2815,2816,2820,2825,2830,2835],{"__ignoreMap":2540},[405,2817,2818],{"class":2545,"line":2546},[405,2819,2549],{},[405,2821,2822],{"class":2545,"line":2552},[405,2823,2824],{},"  --3D \\\n",[405,2826,2827],{"class":2545,"line":2558},[405,2828,2829],{},"  --model \"models/3D/Sample Models/GasLab/GasLab Free Gas 3D.nlogo3d\" \\\n",[405,2831,2832],{"class":2545,"line":2564},[405,2833,2834],{},"  --experiment \"100 runs\" \\\n",[405,2836,2837],{"class":2545,"line":2619},[405,2838,2567],{},[22,2840,2841,2842,335,2851,160],{},"Note that you should supply a 3D model and there are also 3D arguments\n",[303,2843,2844,410,2848],{},[405,2845,2847],{"className":2846},[408,1476],"--max-pzcor",[405,2849,2371],{"className":2850},[408,1476],[303,2852,2853,410,2857],{},[405,2854,2856],{"className":2855},[408,1476],"--min-pzcor",[405,2858,2371],{"className":2859},[408,1476],[22,2861,2862],{},"The next section has information on how to create standalone experiment setup\nfiles using XML.",[201,2864,2867],{"id":2865,"className":2866},"setting-up-experiments-in-xml",[14],[16,2868,2871],{"className":2869,"href":2870},[19],"#setting-up-experiments-in-xml","Setting up experiments in XML",[22,2873,2874],{},"We don’t yet have detailed documentation on authoring experiment setups in XML,\nbut if you already have some familiarity with XML, then the following pointers\nmay be enough to get you started.",[22,2876,2877,2878,2881],{},"The structure of BehaviorSpace experiment setups in XML is determined by a\nDocument Type Definition (DTD) file. The DTD is stored in NetLogo.jar, as\n",[303,2879,2880],{},"system/behaviorspace.dtd",". (JAR files are also zip files, so you can extract\nthe DTD from the JAR using Java’s “jar” utility or with any program that\nunderstands zip format.)",[22,2883,2884,2885,2887,2888,2891],{},"The easiest way to learn what setups look like in XML, though, is to author a\nfew of them in BehaviorSpace’s GUI, save the model, export them ",[180,2886,182],{}," and then examine the\nresulting .xml file(s) in a text editor. The experiment setups can also be found\ntowards the end of the .nlogo file, in a section that begins and ends with a\n",[303,2889,2890],{},"experiments"," tag. Example:",[2535,2893,2897],{"className":2894,"code":2895,"language":2896,"meta":2540,"style":2540},"language-xml shiki shiki-themes material-theme-lighter github-light github-dark","\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\u003C!DOCTYPE experiments SYSTEM \"behaviorspace.dtd\">\n\u003Cexperiments>\n  \u003Cexperiment name=\"My WSP Exploration\" repetitions=\"5\" runMetricsEveryStep=\"false\">\n    \u003Csetup>setup\u003C/setup>\n    \u003Cgo>go\u003C/go>\n    \u003CtimeLimit steps=\"2000\"/>\n    \u003Cmetric>count wolves\u003C/metric>\n    \u003Cmetric>count sheep\u003C/metric>\n    \u003Cmetric>sum [grass-amount] of patches\u003C/metric>\n    \u003CenumeratedValueSet variable=\"energy-gain-from-grass\">\n      \u003Cvalue value=\"2\"/>\n    \u003C/enumeratedValueSet>\n    \u003CsteppedValueSet variable=\"number-of-wolves\" first=\"5\" step=\"1\" last=\"15\"/>\n    \u003CenumeratedValueSet variable=\"movement-cost\">\n      \u003Cvalue value=\"0.5\"/>\n    \u003C/enumeratedValueSet>\n    \u003CenumeratedValueSet variable=\"energy-gain-from-sheep\">\n      \u003Cvalue value=\"5\"/>\n    \u003C/enumeratedValueSet>\n    \u003CenumeratedValueSet variable=\"number-of-sheep\">\n      \u003Cvalue value=\"500\"/>\n    \u003C/enumeratedValueSet>\n    \u003CenumeratedValueSet variable=\"grass-regrowth-rate\">\n      \u003Cvalue value=\"0.3\"/>\n    \u003C/enumeratedValueSet>\n  \u003C/experiment>\n\u003C/experiments>\n","xml",[303,2898,2899,2904,2909,2914,2919,2924,2929,2934,2940,2946,2952,2958,2964,2970,2976,2982,2988,2993,2999,3005,3010,3016,3022,3027,3033,3039,3044,3050],{"__ignoreMap":2540},[405,2900,2901],{"class":2545,"line":2546},[405,2902,2903],{},"\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",[405,2905,2906],{"class":2545,"line":2552},[405,2907,2908],{},"\u003C!DOCTYPE experiments SYSTEM \"behaviorspace.dtd\">\n",[405,2910,2911],{"class":2545,"line":2558},[405,2912,2913],{},"\u003Cexperiments>\n",[405,2915,2916],{"class":2545,"line":2564},[405,2917,2918],{},"  \u003Cexperiment name=\"My WSP Exploration\" repetitions=\"5\" runMetricsEveryStep=\"false\">\n",[405,2920,2921],{"class":2545,"line":2619},[405,2922,2923],{},"    \u003Csetup>setup\u003C/setup>\n",[405,2925,2926],{"class":2545,"line":2625},[405,2927,2928],{},"    \u003Cgo>go\u003C/go>\n",[405,2930,2931],{"class":2545,"line":2631},[405,2932,2933],{},"    \u003CtimeLimit steps=\"2000\"/>\n",[405,2935,2937],{"class":2545,"line":2936},8,[405,2938,2939],{},"    \u003Cmetric>count wolves\u003C/metric>\n",[405,2941,2943],{"class":2545,"line":2942},9,[405,2944,2945],{},"    \u003Cmetric>count sheep\u003C/metric>\n",[405,2947,2949],{"class":2545,"line":2948},10,[405,2950,2951],{},"    \u003Cmetric>sum [grass-amount] of patches\u003C/metric>\n",[405,2953,2955],{"class":2545,"line":2954},11,[405,2956,2957],{},"    \u003CenumeratedValueSet variable=\"energy-gain-from-grass\">\n",[405,2959,2961],{"class":2545,"line":2960},12,[405,2962,2963],{},"      \u003Cvalue value=\"2\"/>\n",[405,2965,2967],{"class":2545,"line":2966},13,[405,2968,2969],{},"    \u003C/enumeratedValueSet>\n",[405,2971,2973],{"class":2545,"line":2972},14,[405,2974,2975],{},"    \u003CsteppedValueSet variable=\"number-of-wolves\" first=\"5\" step=\"1\" last=\"15\"/>\n",[405,2977,2979],{"class":2545,"line":2978},15,[405,2980,2981],{},"    \u003CenumeratedValueSet variable=\"movement-cost\">\n",[405,2983,2985],{"class":2545,"line":2984},16,[405,2986,2987],{},"      \u003Cvalue value=\"0.5\"/>\n",[405,2989,2991],{"class":2545,"line":2990},17,[405,2992,2969],{},[405,2994,2996],{"class":2545,"line":2995},18,[405,2997,2998],{},"    \u003CenumeratedValueSet variable=\"energy-gain-from-sheep\">\n",[405,3000,3002],{"class":2545,"line":3001},19,[405,3003,3004],{},"      \u003Cvalue value=\"5\"/>\n",[405,3006,3008],{"class":2545,"line":3007},20,[405,3009,2969],{},[405,3011,3013],{"class":2545,"line":3012},21,[405,3014,3015],{},"    \u003CenumeratedValueSet variable=\"number-of-sheep\">\n",[405,3017,3019],{"class":2545,"line":3018},22,[405,3020,3021],{},"      \u003Cvalue value=\"500\"/>\n",[405,3023,3025],{"class":2545,"line":3024},23,[405,3026,2969],{},[405,3028,3030],{"class":2545,"line":3029},24,[405,3031,3032],{},"    \u003CenumeratedValueSet variable=\"grass-regrowth-rate\">\n",[405,3034,3036],{"class":2545,"line":3035},25,[405,3037,3038],{},"      \u003Cvalue value=\"0.3\"/>\n",[405,3040,3042],{"class":2545,"line":3041},26,[405,3043,2969],{},[405,3045,3047],{"class":2545,"line":3046},27,[405,3048,3049],{},"  \u003C/experiment>\n",[405,3051,3053],{"class":2545,"line":3052},28,[405,3054,3055],{},"\u003C/experiments>\n",[22,3057,3058,3059,3061],{},"In this example, only one experiment setup is given, but you can put as many as\nyou want between the beginning and ending ",[303,3060,2890],{}," tags.",[22,3063,3064],{},"Between looking at the DTD, and looking at examples you create in the GUI, it\nwill hopefully be apparent how to use the tags to specify different kind of\nexperiments. The DTD specifies which tags are required and which are optional,\nwhich may be repeated and which may not, and so forth.",[22,3066,3067,3068,3070],{},"If you want to create a setup file for NetLogo 6.3.0 and earlier versions for\nwhich ",[35,3069,1636],{}," is not available you need to know that in a model file the XML for\nexperiment setups does not begin with any XML headers, because the not whole file\nis XML, only part of it.\nTherefore if you manually create a separate file for experiment setups, the\nextension on the file should be .xml not .nlogo, and you’ll need to begin the\nfile with proper XML headers, as follows:",[2535,3072,3074],{"className":2894,"code":3073,"language":2896,"meta":2540,"style":2540},"\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\u003C!DOCTYPE experiments SYSTEM \"behaviorspace.dtd\">\n",[303,3075,3076,3080],{"__ignoreMap":2540},[405,3077,3078],{"class":2545,"line":2546},[405,3079,2903],{},[405,3081,3082],{"class":2545,"line":2552},[405,3083,2908],{},[22,3085,3086,3087,3090,3091,160],{},"The second line must be included exactly as shown. In the first line, you may\nspecify a different encoding than ",[303,3088,3089],{},"UTF-8",", such as ",[303,3092,3093],{},"ISO-8859-1",[201,3095,3098],{"id":3096,"className":3097},"adjusting-jvm-parameters",[14],[16,3099,3102],{"className":3100,"href":3101},[19],"#adjusting-jvm-parameters","Adjusting JVM Parameters",[22,3104,3105,3106,3109],{},"Opening the NetLogo Headless launcher script will show the options used to\nlaunch java when running NetLogo Headless. You can adjust various JVM parameters\nin this script. You may also pass in Java properties starting with ",[303,3107,3108],{},"-D"," to the\nlauncher.",[22,3111,3112,3113,160],{},"NetLogo allocates a maximum of half your total system memory for running your model as it is needed.  If you want to set\na maximum amount of memory for BehaviorSpace to use you can use ",[16,3114,3115,3116,3119],{"href":2095},"the ",[303,3117,3118],{},"-Xmx"," setting to specify a particular heap\nsize",[22,3121,3122,3123,3126],{},"Note the use of ",[303,3124,3125],{},"-Dfile.encoding=UTF-8",". This forces all file I/O to use UTF-8\nencoding. Doing so ensures that NetLogo can load all models consistently, and\nthat file-* primitives work consistently on all platforms, including models\ncontaining Unicode characters.",[201,3128,3131],{"id":3129,"className":3130},"controlling-api",[14],[16,3132,3135],{"className":3133,"href":3134},[19],"#controlling-api","Controlling API",[22,3137,3138,3139,3143],{},"If BehaviorSpace is not sufficient for your needs, a possible alternative is to\nuse our Controlling API, which lets you write Java code that controls NetLogo.\nThe API lets you run BehaviorSpace experiments from Java code, or, you can write\ncustom code that controls NetLogo more directly to do BehaviorSpace-like things.\nSee the ",[16,3140,3142],{"href":3141},"controlling","Controlling"," section of the User Manual for further\ndetails on both possibilities.",[3145,3146,3147],"style",{},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":2540,"searchDepth":2619,"depth":2558,"links":3149},[3150,3153,3175],{"id":186,"depth":2552,"text":37,"children":3151},[3152],{"id":203,"depth":2558,"text":209},{"id":236,"depth":2552,"text":46,"children":3154},[3155,3156,3161,3162,3163],{"id":246,"depth":2558,"text":252},{"id":275,"depth":2558,"text":169,"children":3157},[3158,3159,3160],{"id":554,"depth":2564,"text":224},{"id":790,"depth":2564,"text":69},{"id":1412,"depth":2564,"text":78},{"id":1613,"depth":2558,"text":123},{"id":1640,"depth":2558,"text":1646},{"id":1670,"depth":2558,"text":1676,"children":3164},[3165,3166,3167,3168,3169,3170,3171,3172,3173,3174],{"id":1682,"depth":2564,"text":1688},{"id":1737,"depth":2564,"text":1719},{"id":1793,"depth":2564,"text":1697},{"id":1864,"depth":2564,"text":105},{"id":1900,"depth":2564,"text":114},{"id":1951,"depth":2564,"text":159},{"id":2014,"depth":2564,"text":141},{"id":2059,"depth":2564,"text":2065},{"id":2154,"depth":2564,"text":2160},{"id":2180,"depth":2564,"text":132},{"id":2211,"depth":2552,"text":55,"children":3176},[3177,3181,3182,3183],{"id":2218,"depth":2558,"text":2224,"children":3178},[3179,3180],{"id":2233,"depth":2564,"text":2239},{"id":2491,"depth":2564,"text":2497},{"id":2865,"depth":2558,"text":2871},{"id":3096,"depth":2558,"text":3102},{"id":3129,"depth":2558,"text":3135},"BehaviorSpace is a software tool integrated with NetLogo that allows you to perform experiments with models.","md",{"source":3187,"metadataOutputPath":3188,"projectConfig":3189,"language":3191,"output":3200,"inheritFrom":3201,"version":3196,"keywords":3202,"tags":3204,"icon":3205,"assetsRoot":3206},"autogen/behaviorspace.md","content/behaviorspace.metadata.yaml",{"defaults":3190,"projectRoot":160,"outputRoot":3197,"scanRoot":3198,"engine":3199,"version":3196,"dedupeIdenticalDiskWrites":3200},{"language":3191,"output":3192,"inheritFrom":3193,"extension":3185,"title":3195,"version":3196},"en",false,[3194],0,"NetLogo User Manual","7.0.1","content","autogen","handlebars",true,[3194],[5,3203],"NetLogo",[5],"i-lucide-grid-3x3","/Volumes/CCL/netlogo/Helio/apps/docs-nuxt/autogen","/behaviorspace",{"title":5,"description":3184},"behaviorspace","97FAOB4YZpX0rM4GWlOKm4PPBl8AT5zQIbZ-5-baHf8",[3212,3217],{"title":3213,"path":3214,"stem":3215,"description":3216,"children":-1},"Array Extension Dictionary: to-list","/array/to-list","array/to-list","Documentation for the to-list primitive.",{"title":3218,"path":3219,"stem":3220,"children":-1,"description":3221},"Bitmap Extension","/bitmap","bitmap","Documentation for the Bitmap extension.",1761668933128]