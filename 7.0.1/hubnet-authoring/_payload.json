[{"data":1,"prerenderedAt":1378},["ShallowReactive",2],{"/hubnet-authoring":3,"/hubnet-authoring-surround":1369},{"id":4,"title":5,"body":6,"description":1338,"extension":1339,"meta":1340,"navigation":1354,"path":1365,"seo":1366,"stem":1367,"__hash__":1368},"content/hubnet-authoring.md","HubNet Authoring Guide",{"type":7,"value":8,"toc":1320},"minimark",[9,21,30,85,93,96,106,116,150,180,191,276,293,302,309,397,454,468,536,549,552,598,617,670,673,713,722,725,747,750,753,824,827,936,945,948,955,965,968,1017,1024,1031,1034,1037,1052,1072,1075,1082,1085,1183,1190,1193,1196,1248,1255,1288,1295,1302,1305,1317],[10,11,15],"h1",{"id":12,"className":13},"hubnet-authoring-guide",[14],"section-heading",[16,17,5],"a",{"className":18,"href":20},[19],"section-anchor","#hubnet-authoring-guide",[22,23,24,25,29],"p",{},"This guide shows how to understand and modify the code of existing HubNet\nactivities and write your own new ones. It assumes you are familiar with running\nHubNet activities, basic NetLogo code and NetLogo interface elements. For more\ngeneral information about HubNet see the ",[16,26,28],{"href":27},"/hubnet","HubNet Guide",".",[31,32,35,45],"div",{"className":33},[34],"toc",[36,37,40],"h4",{"id":38,"className":39},"table-of-contents",[14],[16,41,44],{"className":42,"href":43},[19],"#table-of-contents","Table of Contents",[46,47,48,55,61,67,73,79],"ul",{},[49,50,51],"li",{},[16,52,54],{"href":53},"#coding-hubnet-activities","Coding HubNet activities",[49,56,57],{},[16,58,60],{"href":59},"#how-to-make-a-client-interface","How to make a client interface",[49,62,63],{},[16,64,66],{"href":65},"#view-updates-on-the-clients","View updates on the clients",[49,68,69],{},[16,70,72],{"href":71},"#clicking-in-the-view-on-clients","Clicking in the view on clients",[49,74,75],{},[16,76,78],{"href":77},"#customizing-the-clients-view","Customizing the client’s view",[49,80,81],{},[16,82,84],{"href":83},"#plot-updates-on-the-clients","Plot updates on the clients",[86,87,90],"h2",{"id":88,"className":89},"coding-hubnet-activities",[14],[16,91,54],{"className":92,"href":53},[19],[22,94,95],{},"Many HubNet activities will share bits of the same code. That is the code that\nit used to setup the network and the code that is used to receive information\nfrom and send information to the clients. If you understand this code you should\nbe able to easily make modifications to existing activities and you should have\na good start on writing your own activities. To get you started we have provided\na Template model (in HubNet Activities -> Code Examples) that contains the most\nbasic components that will be in the majority of HubNet activities. You should\nbe able to use this activity as a starting point for most projects.",[97,98,99],"blockquote",{},[22,100,101,105],{},[102,103,104],"strong",{},"Code Example:"," Template",[107,108,111],"h3",{"id":109,"className":110},"setup",[14],[16,112,115],{"className":113,"href":114},[19],"#setup","Setup",[22,117,118,119,133,134,136,137,139,140,149],{},"To make a NetLogo model into a HubNet activity you must first initialize the\nnetwork. In most HubNet activities you will use the ",[120,121,124],"code",{"className":122},[123],"netlogo-command",[16,125,129],{"href":126,"className":127,"dataDisplayText":129,"rel":130,"target":132,"title":129},"/dictionary#startup",[128],"netlogo-wiki-link","startup",[131],"noopener","_self"," procedure to\ninitialize the network. ",[120,135,129],{}," is a special procedure that NetLogo runs\nautomatically when you open any model. That makes it a good place to put code\nthat you want to run once and only once (no matter how many times the user runs\nthe model). For HubNet we put the command that initializes the network in\n",[120,138,129],{}," because once the network is setup we don’t need to do so again. We\ninitialize the system using ",[120,141,143],{"className":142},[123],[16,144,147],{"href":145,"className":146,"dataDisplayText":147,"rel":148,"target":132,"title":147},"/dictionary#hubnet-reset",[128],"hubnet-reset",[131],", which will ask the user for a\nsession name and open up the HubNet Control Center. Here is the startup\nprocedure in the template model:",[151,152,153],"pre",{},[120,154,155,162,163,167,170,171,174],{},[156,157,161],"span",{"className":158},[159,160],"token","keyword","to"," ",[156,164,129],{"className":165},[159,166],"variable",[168,169],"br",{},"  ",[156,172,147],{"className":173},[159,166],[156,175,177,179],{"className":176},[159,160],[168,178],{},"end",[22,181,182,183,190],{},"Now that the network is all setup you don’t need to worry about calling\n",[120,184,186],{"className":185},[123],[16,187,147],{"href":145,"className":188,"dataDisplayText":147,"rel":189,"target":132,"title":147},[128],[131]," again. Take a look at the setup procedure in the template\nmodel:",[151,192,193],{},[120,194,195,162,198,201,170,203,208,170,210,214,170,216,220,170,222,162,226,231,233,234,236,237,162,241,162,245,250,236,252,162,256,162,260,162,265,268,270,271],{},[156,196,161],{"className":197},[159,160],[156,199,109],{"className":200},[159,166],[168,202],{},[156,204,207],{"className":205},[159,206],"command","cp",[168,209],{},[156,211,213],{"className":212},[159,206],"cd",[168,215],{},[156,217,219],{"className":218},[159,206],"clear-output",[168,221],{},[156,223,225],{"className":224},[159,206],"ask",[156,227,230],{"className":228},[159,229],"reporter","turtles",[168,232],{},"  [",[168,235],{},"    ",[156,238,240],{"className":239},[159,206],"set",[156,242,244],{"className":243},[159,166],"step-size",[156,246,249],{"className":247},[159,248],"number","1",[168,251],{},[156,253,255],{"className":254},[159,166],"hubnet-send",[156,257,259],{"className":258},[159,166],"user-id",[156,261,264],{"className":262},[159,263],"string","\"step-size\"",[156,266,244],{"className":267},[159,166],[168,269],{},"  ]",[156,272,274,179],{"className":273},[159,160],[168,275],{},[22,277,278,279,288,289,292],{},"For the most part it looks like most other setup procedures, however, you should\nnotice that it does not call ",[120,280,282],{"className":281},[123],[16,283,286],{"href":284,"className":285,"dataDisplayText":286,"rel":287,"target":132,"title":286},"/dictionary#clear-all",[128],"clear-all",[131],". In this model, and in the great\nmajority of HubNet activities in the Models Library, we have a breed of turtles\nthat represent the currently logged in clients. In this case we’ve called this\nbreed ",[120,290,291],{},"students",". Whenever a client logs in we create a student and record any\ninformation we might need later about that client in a turtle variable. Since we\ndon’t want to require users to log out and log back in every time we setup the\nactivity we don’t want to kill all the turtles, instead, we want to set all the\nvariables back to initial values and notify the clients of any changes we make\n(more on that later).",[107,294,297],{"id":295,"className":296},"receiving-messages-from-clients",[14],[16,298,301],{"className":299,"href":300},[19],"#receiving-messages-from-clients","Receiving messages from clients",[22,303,304,305,308],{},"During the activity you will be transferring data between the HubNet clients and\nthe server. Most HubNet activities will call a procedure in the ",[120,306,307],{},"go"," loop that\nchecks for new messages from clients in this case it’s called listen clients:",[151,310,311],{},[120,312,313,162,316,320,170,322,326,327,331,332,233,334,236,336,340,236,342,162,346,350,352,353,331,357,359,360,362,363,162,366,370,372,373,331,377,372,379,162,383,331,387,389,390,270,392],{},[156,314,161],{"className":315},[159,160],[156,317,319],{"className":318},[159,166],"listen-clients",[168,321],{},[156,323,325],{"className":324},[159,206],"while"," [ ",[156,328,330],{"className":329},[159,229],"hubnet-message-waiting?"," ]",[168,333],{},[168,335],{},[156,337,339],{"className":338},[159,166],"hubnet-fetch-message",[168,341],{},[156,343,345],{"className":344},[159,206],"ifelse",[156,347,349],{"className":348},[159,229],"hubnet-enter-message?",[168,351],{},"    [ ",[156,354,356],{"className":355},[159,166],"create-new-student",[168,358],{},"    [",[168,361],{},"      ",[156,364,345],{"className":365},[159,206],[156,367,369],{"className":368},[159,229],"hubnet-exit-message?",[168,371],{},"      [ ",[156,374,376],{"className":375},[159,166],"remove-student",[168,378],{},[156,380,382],{"className":381},[159,166],"execute-command",[156,384,386],{"className":385},[159,229],"hubnet-message-tag",[168,388],{},"    ]",[168,391],{},[156,393,395,179],{"className":394},[159,160],[168,396],{},[22,398,399,400,408,409,418,419,427,428,437,438,445,446,453],{},"As long as there are messages in the queue this loop fetches each message one at\na time. ",[120,401,403],{"className":402},[123],[16,404,339],{"href":405,"className":406,"dataDisplayText":339,"rel":407,"target":132,"title":339},"/dictionary#hubnet-fetch-message",[128],[131]," makes the next message in the queue the current\nmessage and sets the reporters ",[120,410,412],{"className":411},[123],[16,413,416],{"href":414,"className":415,"dataDisplayText":416,"rel":417,"target":132,"title":416},"/dictionary#hubnet-message-source",[128],"hubnet-message-source",[131],", ",[120,420,422],{"className":421},[123],[16,423,386],{"href":424,"className":425,"dataDisplayText":386,"rel":426,"target":132,"title":386},"/dictionary#hubnet-message-tag",[128],[131],"\nand ",[120,429,431],{"className":430},[123],[16,432,435],{"href":433,"className":434,"dataDisplayText":435,"rel":436,"target":132,"title":435},"/dictionary#hubnet-message",[128],"hubnet-message",[131]," to the appropriate values. The clients send messages when\nthe users login and logout any time the user manipulates one of the interface\nelements, that is, pushes a button, moves a slider, clicks in the view, etc. We\nstep through each message and decide what action to take depending on the type\nof message (enter, exit, or other), the ",[120,439,441],{"className":440},[123],[16,442,386],{"href":424,"className":443,"dataDisplayText":386,"rel":444,"target":132,"title":386},[128],[131]," (the name of the\ninterface element), and the ",[120,447,449],{"className":448},[123],[16,450,416],{"href":414,"className":451,"dataDisplayText":416,"rel":452,"target":132,"title":416},[128],[131]," of the message (the name\nof the client the message came from).",[22,455,456,457,459,460,467],{},"On an enter message we create a turtle with a ",[120,458,259],{}," that matches the\n",[120,461,463],{"className":462},[123],[16,464,416],{"href":414,"className":465,"dataDisplayText":416,"rel":466,"target":132,"title":416},[128],[131]," which is the name that each user enters upon entering\nthe activity, it is guaranteed to be unique.",[151,469,470],{},[120,471,472,162,475,478,170,480,162,484,487,233,489,236,491,162,494,162,497,500,236,502,162,505,162,509,512,236,514,162,517,162,520,523,236,525,529,270,531],{},[156,473,161],{"className":474},[159,160],[156,476,356],{"className":477},[159,166],[168,479],{},[156,481,483],{"className":482},[159,166],"create-students",[156,485,249],{"className":486},[159,248],[168,488],{},[168,490],{},[156,492,240],{"className":493},[159,206],[156,495,259],{"className":496},[159,166],[156,498,416],{"className":499},[159,229],[168,501],{},[156,503,240],{"className":504},[159,206],[156,506,508],{"className":507},[159,229],"label",[156,510,259],{"className":511},[159,166],[168,513],{},[156,515,240],{"className":516},[159,206],[156,518,244],{"className":519},[159,166],[156,521,249],{"className":522},[159,248],[168,524],{},[156,526,528],{"className":527},[159,166],"send-info-to-clients",[168,530],{},[156,532,534,179],{"className":533},[159,160],[168,535],{},[22,537,538,539,548],{},"At this point we set any other client variables to default values and send them\nto the clients if appropriate. We declared a ",[120,540,542],{"className":541},[123],[16,543,546],{"href":544,"className":545,"dataDisplayText":546,"rel":547,"target":132,"title":546},"/dictionary#turtles-own",[128],"students-own",[131],"\nvariable for every interface element on the client that holds state, that is,\nanything that would be a global variable on the server, sliders, choosers,\nswitches and input boxes. It is important to make sure that these variables stay\nsynchronized with the values visible on the client.",[22,550,551],{},"When the clients logout they send an exit message to the server which gives you\na chance to clean up any information you have been storing about the client, in\nthis case we merely have to ask the appropriate turtle to die.",[151,553,554],{},[120,555,556,162,559,562,170,564,162,567,162,570,574,575,162,578,162,582,585,586,588,589,331,593],{},[156,557,161],{"className":558},[159,160],[156,560,376],{"className":561},[159,166],[168,563],{},[156,565,225],{"className":566},[159,206],[156,568,291],{"className":569},[159,166],[156,571,573],{"className":572},[159,229],"with"," [",[156,576,259],{"className":577},[159,166],[156,579,581],{"className":580},[159,229],"=",[156,583,416],{"className":584},[159,229],"]",[168,587],{},"  [ ",[156,590,592],{"className":591},[159,206],"die",[156,594,596,179],{"className":595},[159,160],[168,597],{},[22,599,600,601,608,609,616],{},"All other messages are interface elements identified by the\n",[120,602,604],{"className":603},[123],[16,605,386],{"href":424,"className":606,"dataDisplayText":386,"rel":607,"target":132,"title":386},[128],[131]," which is the name that appears in the client interface.\nEvery time an interface element changes a message is sent to the server. Unless\nyou store the state of the values currently displayed in the client interface\nwill not be accessible in other parts of the model. That’s why we’ve declared a\n",[120,610,612],{"className":611},[123],[16,613,546],{"href":544,"className":614,"dataDisplayText":546,"rel":615,"target":132,"title":546},[128],[131]," variable for every interface element that has a\nstate (sliders, switches, etc). When we receive the message from the client we\nset the turtle variable to the content of the message:",[151,618,619],{},[120,620,621,162,625,162,628,162,631,634,636,637,170,639,162,642,162,645,574,648,162,651,162,654,585,657,352,659,162,662,162,665,331,668,585],{},[156,622,624],{"className":623},[159,206],"if",[156,626,386],{"className":627},[159,229],[156,629,581],{"className":630},[159,229],[156,632,264],{"className":633},[159,263],[168,635],{},"[",[168,638],{},[156,640,225],{"className":641},[159,206],[156,643,291],{"className":644},[159,166],[156,646,573],{"className":647},[159,229],[156,649,259],{"className":650},[159,166],[156,652,581],{"className":653},[159,229],[156,655,416],{"className":656},[159,229],[168,658],{},[156,660,240],{"className":661},[159,206],[156,663,244],{"className":664},[159,166],[156,666,435],{"className":667},[159,229],[168,669],{},[22,671,672],{},"Since buttons don’t have any associated data there is generally no associated\nturtle variable, instead they indicate an action taken by the client, just as\nwith a regular button there is often procedure associated with each button that\nyou call whenever you receive a message indicating the button has been pressed.\nThough it is certainly not required, the procedure is often a turtle procedure,\nthat is, something that the student turtle associated with the message source\ncan execute:",[151,674,675],{},[120,676,677,162,680,162,683,162,686,690,692,693,162,696,162,700,704,170,706,162,710,331],{},[156,678,624],{"className":679},[159,206],[156,681,206],{"className":682},[159,166],[156,684,581],{"className":685},[159,229],[156,687,689],{"className":688},[159,263],"\"move left\"",[168,691],{},"[ ",[156,694,240],{"className":695},[159,206],[156,697,699],{"className":698},[159,229],"heading",[156,701,703],{"className":702},[159,248],"270",[168,705],{},[156,707,709],{"className":708},[159,206],"fd",[156,711,249],{"className":712},[159,248],[107,714,717],{"id":715,"className":716},"sending-messages-to-clients",[14],[16,718,721],{"className":719,"href":720},[19],"#sending-messages-to-clients","Sending messages to clients",[22,723,724],{},"As mentioned earlier you can also send values to any interface elements that\ndisplay information: monitors, sliders, switches, choosers, and input boxes\n(note that plots and the view are special cases that have their own sections).",[22,726,727,728,736,737,746],{},"There are two primitives that allow you to send information ",[120,729,731],{"className":730},[123],[16,732,255],{"href":733,"className":734,"dataDisplayText":255,"rel":735,"target":132,"title":255},"/dictionary#hubnet-send",[128],[131]," and\n",[120,738,740],{"className":739},[123],[16,741,744],{"href":742,"className":743,"dataDisplayText":744,"rel":745,"target":132,"title":744},"/dictionary#hubnet-broadcast",[128],"hubnet-broadcast",[131],". Broadcast sends the information to all the clients; send\nsends to one client, or a selected group.",[22,748,749],{},"As suggested earlier, nothing on the client updates automatically. If a value\nchanges on the server, it is your responsibility as the activity author to\nupdate monitors on the client.",[22,751,752],{},"For example, say you have a slider on the client called step-size and a monitor\ncalled Step Size (note that the names must be different) you might write\nupdating code like this:",[151,754,755],{},[120,756,757,162,760,162,763,162,766,769,636,771,170,773,162,776,162,780,326,783,162,786,162,789,331,792,233,794,236,796,162,799,162,802,805,236,807,162,810,162,813,162,817,820,270,822,585],{},[156,758,624],{"className":759},[159,206],[156,761,386],{"className":762},[159,229],[156,764,581],{"className":765},[159,229],[156,767,264],{"className":768},[159,263],[168,770],{},[168,772],{},[156,774,225],{"className":775},[159,206],[156,777,779],{"className":778},[159,166],"student",[156,781,573],{"className":782},[159,229],[156,784,259],{"className":785},[159,166],[156,787,581],{"className":788},[159,229],[156,790,416],{"className":791},[159,229],[168,793],{},[168,795],{},[156,797,240],{"className":798},[159,206],[156,800,244],{"className":801},[159,166],[156,803,435],{"className":804},[159,229],[168,806],{},[156,808,255],{"className":809},[159,166],[156,811,259],{"className":812},[159,166],[156,814,816],{"className":815},[159,263],"\"Step Size\"",[156,818,244],{"className":819},[159,166],[168,821],{},[168,823],{},[22,825,826],{},"You can send any type of data you want, numbers, strings, lists, lists of lists,\nlists of strings, however, if the data is not appropriate for the receiving\ninterface element (say, if you were to send a string to a slider) the message\nwill be ignored. Here are a few code examples for different types of data:",[31,828,831],{"className":829},[830],"table-container",[832,833,835,836,857],"table",{"border":834},"","\n  ",[837,838,835,839],"thead",{},[840,841,842,843,847,852],"tr",{},"\n    ",[844,845,846],"th",{},"data type\n    ",[844,848,849,851],{},[120,850,744],{}," example\n    ",[844,853,854,856],{},[120,855,255],{}," example\n  ",[858,859,835,860,876,891,906,921],"tbody",{},[840,861,842,862,866,871],{},[863,864,865],"td",{},"number\n    ",[863,867,868,842],{},[120,869,870],{},"hubnet-broadcast \"A\" 3.14",[863,872,873,835],{},[120,874,875],{},"hubnet-send \"jimmy\" \"A\" 3.14",[840,877,842,878,881,886],{},[863,879,880],{},"string\n    ",[863,882,883,842],{},[120,884,885],{},"hubnet-broadcast \"STR1\" \"HI THERE\"",[863,887,888,835],{},[120,889,890],{},"hubnet-send [\"12\" \"15\"] \"STR1\" \"HI THERE\"",[840,892,842,893,896,901],{},[863,894,895],{},"list of numbers\n    ",[863,897,898,842],{},[120,899,900],{},"hubnet-broadcast \"L2\" [1 2 3]",[863,902,903,835],{},[120,904,905],{},"hubnet-send hubnet-message-source \"L2\" [1 2 3]",[840,907,842,908,911,916],{},[863,909,910],{},"matrix of numbers\n    ",[863,912,913,842],{},[120,914,915],{},"hubnet-broadcast \"[A]\" [[1 2] [3 4]]",[863,917,918,835],{},[120,919,920],{},"hubnet-send \"susie\" \"[A]\" [[1 2] [3 4]]",[840,922,842,923,926,931],{},[863,924,925],{},"list of strings\n    ",[863,927,928,842],{},[120,929,930],{},"hubnet-broadcast \"user-names\" [[\"jimmy\" \"susie\"] [\"bob\" \"george\"]]",[863,932,933],{},[120,934,935],{},"hubnet-send \"teacher\" \"user-names\" [[\"jimmy\" \"susie\"] [\"bob\" \"george\"]]",[107,937,940],{"id":938,"className":939},"examples",[14],[16,941,944],{"className":942,"href":943},[19],"#examples","Examples",[22,946,947],{},"Study the models in the “HubNet Activities” section of the Models Library to see\nhow these primitives are used in practice in the Code tab. Disease is a good one\nto start with.",[86,949,952],{"id":950,"className":951},"how-to-make-a-client-interface",[14],[16,953,60],{"className":954,"href":59},[19],[22,956,957,958,29],{},"Open the HubNet Client Editor, found in the Tools Menu. Add any buttons,\nsliders, switches, monitors, plots, choosers, or notes that you want just as you\nwould in the interface tab. You’ll notice that the information you enter for\neach of the widgets is slightly different than in the Interface panel. Widgets\non the client don’t interact with the model in the same way. Instead of a direct\nlink to commands and reporters the widgets send messages back to the server and\nthe model then determines how those messages affect the model. All widgets on\nthe client have a tag which is a name that uniquely identifies the widget. When\nthe server receives a message from that widget the tag is found in\n",[120,959,961],{"className":960},[123],[16,962,386],{"href":424,"className":963,"dataDisplayText":386,"rel":964,"target":132,"title":386},[128],[131],[22,966,967],{},"For example, if you have a button called “move left”, a slider called\n“step-size”, a switch called “all-in-one-step?”, and a monitor called\n“Location:”, the tags for these interface elements will be as follows:",[31,969,971],{"className":970},[830],[832,972,835,973,983],{"border":834},[837,974,835,975],{},[840,976,842,977,980],{},[844,978,979],{},"interface element\n    ",[844,981,982],{},"tag\n  ",[858,984,835,985,993,1001,1009],{},[840,986,842,987,990],{},[863,988,989],{},"move left\n    ",[863,991,992],{},"move left\n  ",[840,994,842,995,998],{},[863,996,997],{},"step-size\n    ",[863,999,1000],{},"step-size\n  ",[840,1002,842,1003,1006],{},[863,1004,1005],{},"all-in-one-step?\n    ",[863,1007,1008],{},"all-in-one-step?\n  ",[840,1010,842,1011,1014],{},[863,1012,1013],{},"Location:\n    ",[863,1015,1016],{},"Location:\n",[22,1018,1019,1020,1023],{},"Note that you can only have ",[102,1021,1022],{},"one"," interface element with a specific name.\nHaving more than one interface element with the same tag in the client interface\nwill result in unpredictable behavior since it is not clear which element you\nintended to send the information to.",[86,1025,1028],{"id":1026,"className":1027},"view-updates-on-the-clients",[14],[16,1029,66],{"className":1030,"href":65},[19],[22,1032,1033],{},"View mirroring lets views of the world be displayed in clients as well on the\nserver. View mirroring is enabled using a checkbox in the HubNet Control Center.",[22,1035,1036],{},"When mirroring is enabled, client views update whenever the view on the server\ndoes. To avoid excessive network traffic, the view should not update more often\nthan necessary. Therefore we strongly recommend using tick-based updates, rather\nthan continuous updates. See the View Updates section of the Programming Guide\nfor an explanation of the two types of updates.",[22,1038,1039,1040,1043,1044,1047,1048,1051],{},"With tick-based updates, updates happen when a ",[120,1041,1042],{},"tick"," or ",[120,1045,1046],{},"display"," command runs.\nWe recommend using these commands only inside an ",[120,1049,1050],{},"every"," block, to limit the\nfrequency of view updates and thus also limit network traffic. For example:",[151,1053,1054],{},[120,1055,1056,162,1059,1063,636,1065,170,1067,1070,585],{},[156,1057,1050],{"className":1058},[159,206],[156,1060,1062],{"className":1061},[159,248],"0.1",[168,1064],{},[168,1066],{},[156,1068,1046],{"className":1069},[159,206],[168,1071],{},[22,1073,1074],{},"If there is no View in the clients or if the Mirror 2D View on Clients checkbox\nin the HubNet Control Center is not checked, then no view updates are sent to\nthe clients.",[86,1076,1079],{"id":1077,"className":1078},"clicking-in-the-view-on-clients",[14],[16,1080,72],{"className":1081,"href":71},[19],[22,1083,1084],{},"If the View is included in the client, two messages are sent to the server every\ntime the user clicks in the view. The first message, when the user presses the\nmouse button, has the tag “View”. The second message, sent when the user\nreleases the mouse button, has the tag “Mouse Up”. Both messages consist of a\ntwo item list of the x and y coordinates. For example, to turn any patch that\nwas clicked on by the client red, you would use the following NetLogo code:",[151,1086,1087],{},[120,1088,1089,162,1092,162,1095,162,1098,1102,636,1104,170,1106,162,1109,162,1113,326,1116,162,1120,1123,1124,162,1128,162,1132,162,1136,1139,1140,1144,1146,1147,162,1151,1123,1154,162,1157,162,1160,162,1163,1166,1167,588,1169,162,1172,162,1176,331,1181,585],{},[156,1090,624],{"className":1091},[159,206],[156,1093,386],{"className":1094},[159,229],[156,1096,581],{"className":1097},[159,229],[156,1099,1101],{"className":1100},[159,263],"\"View\"",[168,1103],{},[168,1105],{},[156,1107,225],{"className":1108},[159,206],[156,1110,1112],{"className":1111},[159,229],"patches",[156,1114,573],{"className":1115},[159,229],[156,1117,1119],{"className":1118},[159,229],"pxcor",[156,1121,581],{"className":1122},[159,229]," (",[156,1125,1127],{"className":1126},[159,229],"round",[156,1129,1131],{"className":1130},[159,229],"item",[156,1133,1135],{"className":1134},[159,248],"0",[156,1137,435],{"className":1138},[159,229],") ",[156,1141,1143],{"className":1142},[159,229],"and",[168,1145],{},"                     ",[156,1148,1150],{"className":1149},[159,229],"pycor",[156,1152,581],{"className":1153},[159,229],[156,1155,1127],{"className":1156},[159,229],[156,1158,1131],{"className":1159},[159,229],[156,1161,249],{"className":1162},[159,248],[156,1164,435],{"className":1165},[159,229],") ]",[168,1168],{},[156,1170,240],{"className":1171},[159,206],[156,1173,1175],{"className":1174},[159,229],"pcolor",[156,1177,1180],{"className":1178},[159,1179],"constant","red",[168,1182],{},[86,1184,1187],{"id":1185,"className":1186},"customizing-the-clients-view",[14],[16,1188,78],{"className":1189,"href":77},[19],[22,1191,1192],{},"When view mirroring is enabled, by default clients see the same view the\nactivity leader sees on the server. But you can change this so that each client\nsees something different, not just a literal “mirror”.",[22,1194,1195],{},"You can change what a client sees in two distinct ways. We call them “client\nperspectives” and “client overrides”.",[22,1197,1198,1199,1208,1209,1218,1219,1228,1229,1238,1239,29],{},"Changing a client’s perspective means making it “watch” or “follow” a particular\nagent, much like the ",[120,1200,1202],{"className":1201},[123],[16,1203,1206],{"href":1204,"className":1205,"dataDisplayText":1206,"rel":1207,"target":132,"title":1206},"/dictionary#watch",[128],"watch",[131]," and ",[120,1210,1212],{"className":1211},[123],[16,1213,1216],{"href":1214,"className":1215,"dataDisplayText":1216,"rel":1217,"target":132,"title":1216},"/dictionary#follow",[128],"follow",[131]," commands that work with ordinary\nNetLogo models. See the dictionary entries for ",[120,1220,1222],{"className":1221},[123],[16,1223,1226],{"href":1224,"className":1225,"dataDisplayText":1226,"rel":1227,"target":132,"title":1226},"/dictionary#hubnet-send-watch",[128],"hubnet-send-watch",[131],",\n",[120,1230,1232],{"className":1231},[123],[16,1233,1236],{"href":1234,"className":1235,"dataDisplayText":1236,"rel":1237,"target":132,"title":1236},"/dictionary#hubnet-send-follow",[128],"hubnet-send-follow",[131],", and ",[120,1240,1242],{"className":1241},[123],[16,1243,1246],{"href":1244,"className":1245,"dataDisplayText":1246,"rel":1247,"target":132,"title":1246},"/dictionary#hubnet-reset-perspective",[128],"hubnet-reset-perspective",[131],[97,1249,1250],{},[22,1251,1252,1254],{},[102,1253,104],{}," Client Perspective Example",[22,1256,1257,1258,1261,1262,1228,1271,1238,1280,29],{},"Client overrides let you change the appearance of patches, turtles, and links in\nthe client views. You can override any of the variables affecting an agent’s\nappearance, including the ",[120,1259,1260],{},"hidden?"," variable causing a turtle or link to be\nvisible or invisible. See the dictionary entries for ",[120,1263,1265],{"className":1264},[123],[16,1266,1269],{"href":1267,"className":1268,"dataDisplayText":1269,"rel":1270,"target":132,"title":1269},"/dictionary#hubnet-send-override",[128],"hubnet-send-override",[131],[120,1272,1274],{"className":1273},[123],[16,1275,1278],{"href":1276,"className":1277,"dataDisplayText":1278,"rel":1279,"target":132,"title":1278},"/dictionary#hubnet-clear-override",[128],"hubnet-clear-override",[131],[120,1281,1283],{"className":1282},[123],[16,1284,1286],{"href":1276,"className":1285,"dataDisplayText":1286,"rel":1287,"target":132,"title":1286},[128],"hubnet-clear-overrides",[131],[97,1289,1290],{},[22,1291,1292,1294],{},[102,1293,104],{}," Client Overrides Example",[86,1296,1299],{"id":1297,"className":1298},"plot-updates-on-the-clients",[14],[16,1300,84],{"className":1301,"href":83},[19],[22,1303,1304],{},"If plot mirroring is enabled (in the HubNet Control Center) and a plot in the\nNetLogo model changes and a plot with the exact same name exists on the clients,\na message with that change is sent to the clients causing the client’s plot to\nmake the same change. For example, let’s pretend there is a HubNet model that\nhas a plot called Milk Supply in NetLogo and the clients. Milk Supply is the\ncurrent plot in NetLogo and in the Command Center you type:",[151,1306,1307],{},[120,1308,1309,162,1313],{},[156,1310,1312],{"className":1311},[159,206],"plot",[156,1314,1316],{"className":1315},[159,248],"5",[22,1318,1319],{},"This will cause a message to be sent to all the clients telling them that they\nneed to plot a point with a y value of 5 in the next position of the plot.\nNotice, if you are doing a lot of plotting all at once, this can generate a lot\nof plotting messages to be sent to the clients.",{"title":834,"searchDepth":1321,"depth":1322,"links":1323},5,3,[1324,1326,1333,1334,1335,1336,1337],{"id":38,"depth":1325,"text":44},4,{"id":88,"depth":1327,"text":54,"children":1328},2,[1329,1330,1331,1332],{"id":109,"depth":1322,"text":115},{"id":295,"depth":1322,"text":301},{"id":715,"depth":1322,"text":721},{"id":938,"depth":1322,"text":944},{"id":950,"depth":1327,"text":60},{"id":1026,"depth":1327,"text":66},{"id":1077,"depth":1327,"text":72},{"id":1185,"depth":1327,"text":78},{"id":1297,"depth":1327,"text":84},"Guide to creating HubNet activities that allow multiple users to participate in NetLogo simulations using networked devices.","md",{"source":1341,"metadataOutputPath":1342,"projectConfig":1343,"language":1345,"output":1354,"inheritFrom":1355,"version":1350,"keywords":1356,"tags":1362,"icon":1363,"assetsRoot":1364},"autogen/hubnet-authoring.md","content/hubnet-authoring.metadata.yaml",{"defaults":1344,"projectRoot":29,"outputRoot":1351,"scanRoot":1352,"engine":1353,"version":1350,"dedupeIdenticalDiskWrites":1354},{"language":1345,"output":1346,"inheritFrom":1347,"extension":1339,"title":1349,"version":1350},"en",false,[1348],0,"NetLogo User Manual","7.0.1","content","autogen","handlebars",true,[1348],[1357,1358,1359,1360,1361],"HubNet Authoring","HubNet","Multi-user","Participatory Simulations","NetLogo",[1358,1357,1359,1360],"i-lucide-network","/Volumes/CCL/netlogo/Helio/apps/docs-nuxt/autogen","/hubnet-authoring",{"title":5,"description":1338},"hubnet-authoring","T9lbaQ5gXAct_rcKFIEz8Nwyyawi4gKdpRSOHKWQqRA",[1370,1373],{"title":1358,"path":27,"stem":1371,"description":1372},"hubnet","HubNet is a technology that lets you use NetLogo to run participatory simulations in the classroom where multiple users can interact with the model.",{"title":1374,"path":1375,"stem":1376,"description":1377},"Info Tab Guide","/infotab","infotab","Guide to NetLogo's graphical user interface, including the Info Tab Markdown.",1761669088819]