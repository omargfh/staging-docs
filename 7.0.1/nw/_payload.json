[{"data":1,"prerenderedAt":8270},["ShallowReactive",2],{"/nw":3,"/nw-surround":8259},{"id":4,"title":5,"body":6,"description":8236,"extension":8237,"meta":8238,"navigation":8252,"path":8256,"seo":8257,"stem":1988,"__hash__":8258},"content/nw.md","Networks Extension",{"type":7,"value":8,"toc":8037},"minimark",[9,22,32,41,110,113,116,123,156,159,236,246,259,313,321,352,367,397,400,458,461,494,497,522,525,549,555,586,589,632,655,696,699,748,751,788,791,840,843,873,876,901,904,937,940,965,974,1008,1017,1117,1120,1123,1147,1156,1163,1172,1212,1221,1259,1268,1285,1294,1316,1325,1384,1393,1438,1447,1520,1529,1585,2384,2548,2802,2848,3047,3317,3545,3762,4045,4325,4498,4695,4727,4769,4805,4846,4879,5072,5148,5177,5216,5403,5444,5485,5574,5659,5752,5937,6087,6160,6226,6334,6497,6698,7563,7804,7900,8033],[10,11,15],"h1",{"id":12,"className":13},"networks",[14],"section-heading",[16,17,21],"a",{"className":18,"href":20},[19],"section-anchor","#networks","Networks",[23,24,27],"h2",{"id":25,"className":26},"usage",[14],[16,28,31],{"className":29,"href":30},[19],"#usage","Usage",[33,34,35,36,40],"p",{},"The first thing that one needs to understand in order to work with the network extension is how to tell the extension ",[37,38,39],"em",{},"which"," network to work with. Consider the following example situation:",[42,43,44],"pre",{},[45,46,47,54,55,60,61,65,66,54,72,60,76,65,80,82,54,88,60,92,65,96,54,102,60,106,65],"code",{},[48,49,53],"span",{"className":50},[51,52],"token","keyword","breed"," [ ",[48,56,59],{"className":57},[51,58],"variable","bankers"," ",[48,62,64],{"className":63},[51,58],"banker"," ]",[48,67,69,53],{"className":68},[51,52],[70,71],"br",{},[48,73,75],{"className":74},[51,58],"clients",[48,77,79],{"className":78},[51,58],"client",[70,81],{},[48,83,85,87],{"className":84},[51,52],[70,86],{},"undirected-link-breed",[48,89,91],{"className":90},[51,58],"friendships",[48,93,95],{"className":94},[51,58],"friendship",[48,97,99,101],{"className":98},[51,52],[70,100],{},"directed-link-breed",[48,103,105],{"className":104},[51,58],"accounts",[48,107,109],{"className":108},[51,58],"account",[33,111,112],{},"Basically, you have bankers and clients. Clients can have accounts with bankers. Bankers can probably have account with other bankers, and anyone can be friends with anyone.",[33,114,115],{},"Now we might want to consider this whole thing as one big network. If that is the case, there is nothing special to do: by default, the NW extension primitives consider all turtles and all links to be part of the current network.",[33,117,118,119,122],{},"We could also, however, be only interested in a subset of the network. Maybe we want to consider only friendship relations. Furthermore, maybe we want to consider only the friendships ",[37,120,121],{},"between bankers",". After all, having a very high centrality in a network of banker friendships is very different from having a high centrality in a network of client friendships.",[33,124,125,126,129,130,133,134,136,137,139,140,144,145,151,152,155],{},"To specify such networks, we need to tell the extension ",[37,127,128],{},"both"," which turtles ",[37,131,132],{},"and"," which links we are interested in. All the turtles from the specified set of turtles will be included in the network, and only the links from the specified set of links that are between turtles of the specified set will be included. For example, if you ask for ",[45,135,59],{}," and ",[45,138,91],{},", even the lonely bankers with no friends will be included, but friendship links between bankers and clients will ",[141,142,143],"strong",{},"not"," be included. The way to tell the extension about this is with the ",[16,146,148],{"href":147},"/nw/set-context",[45,149,150],{},"nw:set-context"," primitive, which you must call ",[37,153,154],{},"prior"," to doing any operations on a network.",[33,157,158],{},"Some examples:",[160,161,162,180,194,208,222],"ul",{},[163,164,165,179],"li",{},[45,166,167,60,170,60,175],{},[48,168,150],{"className":169},[51,58],[48,171,174],{"className":172},[51,173],"reporter","turtles",[48,176,178],{"className":177},[51,173],"links"," will give you everything: bankers and clients, friendships and accounts, as one big network.",[163,181,182,193],{},[45,183,184,60,187,60,190],{},[48,185,150],{"className":186},[51,58],[48,188,174],{"className":189},[51,173],[48,191,91],{"className":192},[51,58]," will give you all the bankers and clients and friendships between any of them.",[163,195,196,207],{},[45,197,198,60,201,60,204],{},[48,199,150],{"className":200},[51,58],[48,202,59],{"className":203},[51,58],[48,205,91],{"className":206},[51,58]," will give you all the bankers, and only friendships between bankers.",[163,209,210,221],{},[45,211,212,60,215,60,218],{},[48,213,150],{"className":214},[51,58],[48,216,59],{"className":217},[51,58],[48,219,178],{"className":220},[51,173]," will give you all the bankers, and any links between them, whether these links are friendships or accounts.",[163,223,224,235],{},[45,225,226,60,229,60,232],{},[48,227,150],{"className":228},[51,58],[48,230,75],{"className":231},[51,58],[48,233,105],{"className":234},[51,58]," will give you all the clients, and accounts between each other, but since in our fictional example clients can only have accounts with bankers, this will be a completely disconnected network.",[237,238,241],"h3",{"id":239,"className":240},"special-agentsets-vs-normal-agentsets",[14],[16,242,245],{"className":243,"href":244},[19],"#special-agentsets-vs-normal-agentsets","Special agentsets vs normal agentsets",[33,247,248,249,251,252,258],{},"It must be noted that NetLogo has two types of agentsets that behave slightly differently, and that this has an impact on the way ",[45,250,150],{}," works. We will say a few words about these concepts here but, for a thorough understanding, it is highly recommended that you read ",[16,253,257],{"href":254,"rel":255},"http://ccl.northwestern.edu/netlogo/docs/programming.html#agentsets",[256],"nofollow","the section on agentsets in the NetLogo programming guide",".",[33,260,261,262,264,265,267,268,270,271,273,274,276,277,279,280,283,284,305,306,136,309,312],{},"The “special” agentsets in NetLogo are ",[45,263,174],{},", ",[45,266,178],{}," and the different “breed” agentsets. What is special about them is that they can grow: if you create a new turtle, it will be added to the ",[45,269,174],{}," agentset. If you have a ",[45,272,59],{}," breed and you create a new banker, it will be added to the ",[45,275,59],{}," agentset and to the ",[45,278,174],{}," agentset. Same goes for links. Other agentsets, such as those created with the ",[45,281,282],{},"with"," primitive (e.g., ",[45,285,286,60,289,54,292,60,296,60,300,65],{},[48,287,174],{"className":288},[51,173],[48,290,282],{"className":291},[51,173],[48,293,295],{"className":294},[51,173],"color",[48,297,299],{"className":298},[51,173],"=",[48,301,304],{"className":302},[51,303],"constant","red",") or the ",[45,307,308],{},"turtle-set",[45,310,311],{},"link-set"," primitives) are never added to. The content of normal agentsets will only change if the agents that they contain die.",[33,314,315,316,320],{},"To show how different types of agentsets interact with ",[16,317,318],{"href":147},[45,319,150],{},", let’s create a very simple network:",[42,322,323],{},[45,324,325,330,332,60,336,54,341,60,345,60,349,65],{},[48,326,329],{"className":327},[51,328],"command","clear-all",[70,331],{},[48,333,335],{"className":334},[51,328],"create-turtles",[48,337,340],{"className":338},[51,339],"number","3",[48,342,344],{"className":343},[51,328],"create-links-with",[48,346,348],{"className":347},[51,173],"other",[48,350,174],{"className":351},[51,173],[33,353,354,355,136,357,359,360,366],{},"Let’s set the context to ",[45,356,174],{},[45,358,178],{}," (which is the default anyway) and use ",[16,361,363],{"href":362},"/nw/get-context",[45,364,365],{},"nw:get-context"," to see what we have:",[42,368,369],{},[45,370,371,60,374,60,377,380,382,60,386,60,390,60,394],{},[48,372,150],{"className":373},[51,58],[48,375,174],{"className":376},[51,173],[48,378,178],{"className":379},[51,173],[70,381],{},[48,383,385],{"className":384},[51,328],"show",[48,387,389],{"className":388},[51,173],"map",[48,391,393],{"className":392},[51,173],"sort",[48,395,365],{"className":396},[51,58],[33,398,399],{},"We get all three turtles and all three links:",[42,401,402],{},[45,403,404,405,60,409,413,414,60,417,413,421,60,424,428,429,60,433,60,436,413,439,60,442,60,445,413,448,60,451,60,454,457],{},"[[(",[48,406,408],{"className":407},[51,173],"turtle",[48,410,412],{"className":411},[51,339],"0",") (",[48,415,408],{"className":416},[51,173],[48,418,420],{"className":419},[51,339],"1",[48,422,408],{"className":423},[51,173],[48,425,427],{"className":426},[51,339],"2",")] [(",[48,430,432],{"className":431},[51,173],"link",[48,434,412],{"className":435},[51,339],[48,437,420],{"className":438},[51,339],[48,440,432],{"className":441},[51,173],[48,443,412],{"className":444},[51,339],[48,446,427],{"className":447},[51,339],[48,449,432],{"className":450},[51,173],[48,452,420],{"className":453},[51,339],[48,455,427],{"className":456},[51,339],")]]",[33,459,460],{},"Now let’s kill one turtle:",[42,462,463],{},[45,464,465,60,469,60,473,54,476,65,480,482,60,485,60,488,60,491],{},[48,466,468],{"className":467},[51,328],"ask",[48,470,472],{"className":471},[51,173],"one-of",[48,474,174],{"className":475},[51,173],[48,477,479],{"className":478},[51,328],"die",[70,481],{},[48,483,385],{"className":484},[51,328],[48,486,389],{"className":487},[51,173],[48,489,393],{"className":490},[51,173],[48,492,365],{"className":493},[51,58],[33,495,496],{},"As expected, the context is updated to reflect the death of the turtle and of the two links that died with it:",[42,498,499],{},[45,500,404,501,60,504,413,507,60,510,428,513,60,516,60,519,457],{},[48,502,408],{"className":503},[51,173],[48,505,412],{"className":506},[51,339],[48,508,408],{"className":509},[51,173],[48,511,420],{"className":512},[51,339],[48,514,432],{"className":515},[51,173],[48,517,412],{"className":518},[51,339],[48,520,420],{"className":521},[51,339],[33,523,524],{},"What if we now create a new turtle?",[42,526,527],{},[45,528,529,60,532,535,537,60,540,60,543,60,546],{},[48,530,335],{"className":531},[51,328],[48,533,420],{"className":534},[51,339],[70,536],{},[48,538,385],{"className":539},[51,328],[48,541,389],{"className":542},[51,173],[48,544,393],{"className":545},[51,173],[48,547,365],{"className":548},[51,58],[33,550,551,552,554],{},"Since our context is using the special ",[45,553,174],{}," agentset, the new turtle is automatically added:",[42,556,557],{},[45,558,404,559,60,562,413,565,60,568,413,571,60,574,428,577,60,580,60,583,457],{},[48,560,408],{"className":561},[51,173],[48,563,412],{"className":564},[51,339],[48,566,408],{"className":567},[51,173],[48,569,420],{"className":570},[51,339],[48,572,408],{"className":573},[51,173],[48,575,340],{"className":576},[51,339],[48,578,432],{"className":579},[51,173],[48,581,412],{"className":582},[51,339],[48,584,420],{"className":585},[51,339],[33,587,588],{},"Now let’s demonstrate how it works with normal agentsets. We start over with a new network of red turtles:",[42,590,591],{},[45,592,593,596,598,60,601,604,605,607,608,60,611,60,614,617,607,619,60,623,60,626,629,631],{},[48,594,329],{"className":595},[51,328],[70,597],{},[48,599,335],{"className":600},[51,328],[48,602,340],{"className":603},[51,339]," [",[70,606],{},"  ",[48,609,344],{"className":610},[51,328],[48,612,348],{"className":613},[51,173],[48,615,174],{"className":616},[51,173],[70,618],{},[48,620,622],{"className":621},[51,328],"set",[48,624,295],{"className":625},[51,173],[48,627,304],{"className":628},[51,303],[70,630],{},"]",[33,633,634,635,136,653],{},"And we set the context to ",[45,636,637,60,640,54,643,60,646,60,649,652],{},[48,638,174],{"className":639},[51,173],[48,641,282],{"className":642},[51,173],[48,644,295],{"className":645},[51,173],[48,647,299],{"className":648},[51,173],[48,650,304],{"className":651},[51,303]," ])",[45,654,178],{},[42,656,657],{},[45,658,659,662,663,60,666,54,669,60,672,60,675,678,679,682,684,60,687,60,690,60,693],{},[48,660,150],{"className":661},[51,58]," (",[48,664,174],{"className":665},[51,173],[48,667,282],{"className":668},[51,173],[48,670,295],{"className":671},[51,173],[48,673,299],{"className":674},[51,173],[48,676,304],{"className":677},[51,303]," ]) ",[48,680,178],{"className":681},[51,173],[70,683],{},[48,685,385],{"className":686},[51,328],[48,688,389],{"className":689},[51,173],[48,691,393],{"className":692},[51,173],[48,694,365],{"className":695},[51,58],[33,697,698],{},"Since all turtles are red, we get everything in our context:",[42,700,701],{},[45,702,404,703,60,706,413,709,60,712,413,715,60,718,428,721,60,724,60,727,413,730,60,733,60,736,413,739,60,742,60,745,457],{},[48,704,408],{"className":705},[51,173],[48,707,412],{"className":708},[51,339],[48,710,408],{"className":711},[51,173],[48,713,420],{"className":714},[51,339],[48,716,408],{"className":717},[51,173],[48,719,427],{"className":720},[51,339],[48,722,432],{"className":723},[51,173],[48,725,412],{"className":726},[51,339],[48,728,420],{"className":729},[51,339],[48,731,432],{"className":732},[51,173],[48,734,412],{"className":735},[51,339],[48,737,427],{"className":738},[51,339],[48,740,432],{"className":741},[51,173],[48,743,420],{"className":744},[51,339],[48,746,427],{"className":747},[51,339],[33,749,750],{},"But what if we ask one of them to turn blue?",[42,752,753],{},[45,754,755,60,758,60,761,54,764,60,767,60,770,65,774,776,60,779,60,782,60,785],{},[48,756,468],{"className":757},[51,328],[48,759,472],{"className":760},[51,173],[48,762,174],{"className":763},[51,173],[48,765,622],{"className":766},[51,328],[48,768,295],{"className":769},[51,173],[48,771,773],{"className":772},[51,303],"blue",[70,775],{},[48,777,385],{"className":778},[51,328],[48,780,389],{"className":781},[51,173],[48,783,393],{"className":784},[51,173],[48,786,365],{"className":787},[51,58],[33,789,790],{},"No change. The agentset used in our context remains unaffected:",[42,792,793],{},[45,794,404,795,60,798,413,801,60,804,413,807,60,810,428,813,60,816,60,819,413,822,60,825,60,828,413,831,60,834,60,837,457],{},[48,796,408],{"className":797},[51,173],[48,799,412],{"className":800},[51,339],[48,802,408],{"className":803},[51,173],[48,805,420],{"className":806},[51,339],[48,808,408],{"className":809},[51,173],[48,811,427],{"className":812},[51,339],[48,814,432],{"className":815},[51,173],[48,817,412],{"className":818},[51,339],[48,820,420],{"className":821},[51,339],[48,823,432],{"className":824},[51,173],[48,826,412],{"className":827},[51,339],[48,829,427],{"className":830},[51,339],[48,832,432],{"className":833},[51,173],[48,835,420],{"className":836},[51,339],[48,838,427],{"className":839},[51,339],[33,841,842],{},"If we kill one of them, however…",[42,844,845],{},[45,846,847,60,850,60,853,54,856,65,859,861,60,864,60,867,60,870],{},[48,848,468],{"className":849},[51,328],[48,851,472],{"className":852},[51,173],[48,854,174],{"className":855},[51,173],[48,857,479],{"className":858},[51,328],[70,860],{},[48,862,385],{"className":863},[51,328],[48,865,389],{"className":866},[51,173],[48,868,393],{"className":869},[51,173],[48,871,365],{"className":872},[51,58],[33,874,875],{},"It gets removed from the set:",[42,877,878],{},[45,879,404,880,60,883,413,886,60,889,428,892,60,895,60,898,457],{},[48,881,408],{"className":882},[51,173],[48,884,412],{"className":885},[51,339],[48,887,408],{"className":888},[51,173],[48,890,427],{"className":891},[51,339],[48,893,432],{"className":894},[51,173],[48,896,412],{"className":897},[51,339],[48,899,427],{"className":900},[51,339],[33,902,903],{},"What if we add a new red turtle?",[42,905,906],{},[45,907,908,60,911,54,914,60,917,60,920,65,923,925,60,928,60,931,60,934],{},[48,909,335],{"className":910},[51,328],[48,912,420],{"className":913},[51,339],[48,915,622],{"className":916},[51,328],[48,918,295],{"className":919},[51,173],[48,921,304],{"className":922},[51,303],[70,924],{},[48,926,385],{"className":927},[51,328],[48,929,389],{"className":930},[51,173],[48,932,393],{"className":933},[51,173],[48,935,365],{"className":936},[51,58],[33,938,939],{},"Nope:",[42,941,942],{},[45,943,404,944,60,947,413,950,60,953,428,956,60,959,60,962,457],{},[48,945,408],{"className":946},[51,173],[48,948,412],{"className":949},[51,339],[48,951,408],{"className":952},[51,173],[48,954,427],{"className":955},[51,339],[48,957,432],{"className":958},[51,173],[48,960,412],{"className":961},[51,339],[48,963,427],{"className":964},[51,339],[23,966,969],{"id":967,"className":968},"a-note-regarding-floating-point-calculations",[14],[16,970,973],{"className":971,"href":972},[19],"#a-note-regarding-floating-point-calculations","A note regarding floating point calculations",[33,975,976,977,982,983,988,989,997,998,1001,1002,1007],{},"Neither ",[16,978,981],{"href":979,"rel":980},"https://github.com/jgrapht",[256],"JGraphT"," nor ",[16,984,987],{"href":985,"rel":986},"http://jung.sourceforge.net/",[256],"Jung",", the two network libraries that we use internally, use ",[16,990,993,996],{"href":991,"rel":992},"https://en.wikipedia.org/wiki/Strictfp",[256],[45,994,995],{},"strictfp"," floating point calculations",". This does mean that exact reproducibility of results involving floating point calculations ",[37,999,1000],{},"between different hardware architectures"," is not fully guaranteed. (NetLogo itself ",[16,1003,1006],{"href":1004,"rel":1005},"http://ccl.northwestern.edu/netlogo/docs/faq.html#are-netlogo-models-runs-scientifically-reproducible",[256],"always uses strict math"," so this only applies to some primitives of the NW extension.)",[23,1009,1012],{"id":1010,"className":1011},"performance",[14],[16,1013,1016],{"className":1014,"href":1015},[19],"#performance","Performance",[33,1018,1019,1020,136,1028,1037,1038,1047,1048,1056,1057,1065,1066,136,1074,1082,1083,136,1091,1099,1100,136,1108,1116],{},"In order to be fast in as many circumstances as possible, the NW extension tries hard to never calculate things twice. It remembers all paths, distances, and centralities that it calculates. So, while the first time you ask for the distance between ",[45,1021,1022,60,1025],{},[48,1023,408],{"className":1024},[51,173],[48,1026,412],{"className":1027},[51,339],[45,1029,1030,60,1033],{},[48,1031,408],{"className":1032},[51,173],[48,1034,1036],{"className":1035},[51,339],"3782"," may take some time, after that, it should be almost instantaneous. Furthermore, it keeps track of values it just happened to calculate along the way. For example, if ",[45,1039,1040,60,1043],{},[48,1041,408],{"className":1042},[51,173],[48,1044,1046],{"className":1045},[51,339],"297"," is closer to ",[45,1049,1050,60,1053],{},[48,1051,408],{"className":1052},[51,173],[48,1054,412],{"className":1055},[51,339]," than ",[45,1058,1059,60,1062],{},[48,1060,408],{"className":1061},[51,173],[48,1063,1036],{"className":1064},[51,339]," is, it may just happen to figure out the distance between ",[45,1067,1068,60,1071],{},[48,1069,408],{"className":1070},[51,173],[48,1072,412],{"className":1073},[51,339],[45,1075,1076,60,1079],{},[48,1077,408],{"className":1078},[51,173],[48,1080,1046],{"className":1081},[51,339]," while it figures out the distance between ",[45,1084,1085,60,1088],{},[48,1086,408],{"className":1087},[51,173],[48,1089,412],{"className":1090},[51,339],[45,1092,1093,60,1096],{},[48,1094,408],{"className":1095},[51,173],[48,1097,1036],{"className":1098},[51,339],". It will remember this value, so that if you ask it for the distance between ",[45,1101,1102,60,1105],{},[48,1103,408],{"className":1104},[51,173],[48,1106,412],{"className":1107},[51,339],[45,1109,1110,60,1113],{},[48,1111,408],{"className":1112},[51,173],[48,1114,1046],{"className":1115},[51,339],", it doesn’t have to do all that work again.",[33,1118,1119],{},"There are a few circumstances where the NW extension has to forget things. If the network changes at all (you add turtles or links, or remove turtles or links), it has to forget everything. For weighted primitives, if the value of the weight variable changes for any of the links in the network, it will forget the values associated with that weight variable.",[33,1121,1122],{},"If you’re working on a network that can change regularly, try to do all your network calculations at once, then all your network changes at once. The more your interweave network calculations and network changes, the more the NW extension will have to recalculate things. For example, if you have a traffic model, and cars need to figure out the shortest path to their destination based on the traffic each tick, have all the cars find their shortest paths, then change the network weights to account for how traffic has changed.",[33,1124,1125,1126,1146],{},"There may be rare occasions in which you don’t want the NW extension to remember values. For example, if you’re working on an extremely large network, remembering all those values may take more memory than you have. In that case, you can just call ",[45,1127,1128,662,1131,60,1135,413,1138,60,1142,1145],{},[48,1129,150],{"className":1130},[51,58],[48,1132,1134],{"className":1133},[51,173],"first",[48,1136,365],{"className":1137},[51,58],[48,1139,1141],{"className":1140},[51,173],"last",[48,1143,365],{"className":1144},[51,58],")"," to force the NW extension to immediately forget everything.",[23,1148,1151],{"id":1149,"className":1150},"primitives",[14],[16,1152,1155],{"className":1153,"href":1154},[19],"#primitives","Primitives",[33,1157,1158,1159,258],{},"Looking for the primitive reference for the Networks extension? You can find ",[16,1160,1162],{"href":1161},"/nw/dictionary","the full reference here",[237,1164,1167],{"id":1165,"className":1166},"centrality-measures",[14],[16,1168,1171],{"className":1169,"href":1170},[19],"#centrality-measures","Centrality Measures",[1173,1174,1176,1177,1176,1184,1176,1191,1176,1198,1176,1205],"div",{"id":1175},"centrality","\n  ",[16,1178,1181],{"className":1179,"href":1180},[45],"#betweenness-centrality",[45,1182,1183],{},"nw:betweenness-centrality",[16,1185,1188],{"className":1186,"href":1187},[45],"#eigenvector-centrality",[45,1189,1190],{},"nw:eigenvector-centrality",[16,1192,1195],{"className":1193,"href":1194},[45],"#page-rank",[45,1196,1197],{},"nw:page-rank",[16,1199,1202],{"className":1200,"href":1201},[45],"#closeness-centrality",[45,1203,1204],{},"nw:closeness-centrality",[16,1206,1209],{"className":1207,"href":1208},[45],"#weighted-closeness-centrality",[45,1210,1211],{},"nw:weighted-closeness-centrality",[237,1213,1216],{"id":1214,"className":1215},"clusterercommunity-detection",[14],[16,1217,1220],{"className":1218,"href":1219},[19],"#clusterercommunity-detection","Clusterer/Community Detection",[1173,1222,1176,1224,1176,1231,1176,1238,1176,1245,1176,1252],{"id":1223},"clusterer",[16,1225,1228],{"className":1226,"href":1227},[45],"#bicomponent-clusters",[45,1229,1230],{},"nw:bicomponent-clusters",[16,1232,1235],{"className":1233,"href":1234},[45],"#weak-component-clusters",[45,1236,1237],{},"nw:weak-component-clusters",[16,1239,1242],{"className":1240,"href":1241},[45],"#louvain-communities",[45,1243,1244],{},"nw:louvain-communities",[16,1246,1249],{"className":1247,"href":1248},[45],"#maximal-cliques",[45,1250,1251],{},"nw:maximal-cliques",[16,1253,1256],{"className":1254,"href":1255},[45],"#biggest-maximal-cliques",[45,1257,1258],{},"nw:biggest-maximal-cliques",[237,1260,1263],{"id":1261,"className":1262},"clustering-measures",[14],[16,1264,1267],{"className":1265,"href":1266},[19],"#clustering-measures","Clustering Measures",[1173,1269,1176,1271,1176,1278],{"id":1270},"clustering",[16,1272,1275],{"className":1273,"href":1274},[45],"#clustering-coefficient",[45,1276,1277],{},"nw:clustering-coefficient",[16,1279,1282],{"className":1280,"href":1281},[45],"#modularity",[45,1283,1284],{},"nw:modularity",[237,1286,1289],{"id":1287,"className":1288},"context-management",[14],[16,1290,1293],{"className":1291,"href":1292},[19],"#context-management","Context Management",[1173,1295,1176,1297,1176,1303,1176,1309],{"id":1296},"context",[16,1298,1301],{"className":1299,"href":1300},[45],"#set-context",[45,1302,150],{},[16,1304,1307],{"className":1305,"href":1306},[45],"#get-context",[45,1308,365],{},[16,1310,1313],{"className":1311,"href":1312},[45],"#with-context",[45,1314,1315],{},"nw:with-context",[237,1317,1320],{"id":1318,"className":1319},"generators",[14],[16,1321,1324],{"className":1322,"href":1323},[19],"#generators","Generators",[1173,1326,1176,1328,1176,1335,1176,1342,1176,1349,1176,1356,1176,1363,1176,1370,1176,1377],{"id":1327},"generator",[16,1329,1332],{"className":1330,"href":1331},[45],"#generate-preferential-attachment",[45,1333,1334],{},"nw:generate-preferential-attachment",[16,1336,1339],{"className":1337,"href":1338},[45],"#generate-random",[45,1340,1341],{},"nw:generate-random",[16,1343,1346],{"className":1344,"href":1345},[45],"#generate-watts-strogatz",[45,1347,1348],{},"nw:generate-watts-strogatz",[16,1350,1353],{"className":1351,"href":1352},[45],"#generate-small-world",[45,1354,1355],{},"nw:generate-small-world",[16,1357,1360],{"className":1358,"href":1359},[45],"#generate-lattice-2d",[45,1361,1362],{},"nw:generate-lattice-2d",[16,1364,1367],{"className":1365,"href":1366},[45],"#generate-ring",[45,1368,1369],{},"nw:generate-ring",[16,1371,1374],{"className":1372,"href":1373},[45],"#generate-star",[45,1375,1376],{},"nw:generate-star",[16,1378,1381],{"className":1379,"href":1380},[45],"#generate-wheel",[45,1382,1383],{},"nw:generate-wheel",[237,1385,1388],{"id":1386,"className":1387},"import-and-export",[14],[16,1389,1392],{"className":1390,"href":1391},[19],"#import-and-export","Import and Export",[1173,1394,1176,1396,1176,1403,1176,1410,1176,1417,1176,1424,1176,1431],{"id":1395},"io",[16,1397,1400],{"className":1398,"href":1399},[45],"#save-matrix",[45,1401,1402],{},"nw:save-matrix",[16,1404,1407],{"className":1405,"href":1406},[45],"#load-matrix",[45,1408,1409],{},"nw:load-matrix",[16,1411,1414],{"className":1412,"href":1413},[45],"#save-graphml",[45,1415,1416],{},"nw:save-graphml",[16,1418,1421],{"className":1419,"href":1420},[45],"#load-graphml",[45,1422,1423],{},"nw:load-graphml",[16,1425,1428],{"className":1426,"href":1427},[45],"#load",[45,1429,1430],{},"nw:load",[16,1432,1435],{"className":1433,"href":1434},[45],"#save",[45,1436,1437],{},"nw:save",[237,1439,1442],{"id":1440,"className":1441},"path-and-distance",[14],[16,1443,1446],{"className":1444,"href":1445},[19],"#path-and-distance","Path and Distance",[1173,1448,1176,1450,1176,1457,1176,1464,1176,1471,1176,1478,1176,1485,1176,1492,1176,1499,1176,1506,1176,1513],{"id":1449},"path",[16,1451,1454],{"className":1452,"href":1453},[45],"#turtles-in-radius",[45,1455,1456],{},"nw:turtles-in-radius",[16,1458,1461],{"className":1459,"href":1460},[45],"#turtles-in-reverse-radius",[45,1462,1463],{},"nw:turtles-in-reverse-radius",[16,1465,1468],{"className":1466,"href":1467},[45],"#distance-to",[45,1469,1470],{},"nw:distance-to",[16,1472,1475],{"className":1473,"href":1474},[45],"#weighted-distance-to",[45,1476,1477],{},"nw:weighted-distance-to",[16,1479,1482],{"className":1480,"href":1481},[45],"#path-to",[45,1483,1484],{},"nw:path-to",[16,1486,1489],{"className":1487,"href":1488},[45],"#turtles-on-path-to",[45,1490,1491],{},"nw:turtles-on-path-to",[16,1493,1496],{"className":1494,"href":1495},[45],"#weighted-path-to",[45,1497,1498],{},"nw:weighted-path-to",[16,1500,1503],{"className":1501,"href":1502},[45],"#turtles-on-weighted-path-to",[45,1504,1505],{},"nw:turtles-on-weighted-path-to",[16,1507,1510],{"className":1508,"href":1509},[45],"#mean-path-length",[45,1511,1512],{},"nw:mean-path-length",[16,1514,1517],{"className":1515,"href":1516},[45],"#mean-weighted-path-length",[45,1518,1519],{},"nw:mean-weighted-path-length",[237,1521,1524],{"id":1522,"className":1523},"all-primitives",[14],[16,1525,1528],{"className":1526,"href":1527},[19],"#all-primitives","All Primitives",[1173,1530,1176,1534,1176,1540,1561,1573,1576],{"className":1531,"id":1533},[1532],"dict_entry","set-context",[237,1535,1537,1538,1176],{"id":1536},"nwset-context","\n    ",[16,1539,150],{"href":1300},[1541,1542,1545],"h4",{"id":1543,"className":1544},"nwset-context-turtleset-linkset",[14],[16,1546,1537,1549,1176],{"className":1547,"href":1548},[19],"#----nwset-context-turtleset-linkset--",[48,1550,1553,1554,60,1558],{"className":1551},[1552],"prim_example","nw:set-context ",[1555,1556,1557],"i",{},"turtleset",[1555,1559,1560],{},"linkset",[33,1562,1563,1564,1566,1567,1569,1570,1572],{},"Specifies the set of turtles and the set of links that the extension will consider to be the current graph. All the turtles from ",[37,1565,1557],{}," and all the links from ",[37,1568,1560],{}," that connect two turtles from ",[37,1571,1557],{}," will be included.",[33,1574,1575],{},"This context is used by all other primitives (unless specified otherwise) until a new context is specified. (At the moment, only the generator primitives and the file input primitives are exceptions to this rule.)",[33,1577,1578,1579,1582,1583,258],{},"See ",[16,1580,1581],{"href":30},"the usage section"," for a much more detailed explanation of ",[45,1584,150],{},[1173,1586,1176,1589,1176,1594,1605,1608,1623,1657,1665,1710,1721,1788,1794,1850,1853,1909,1925,1971,1977,2293,2296],{"className":1587,"id":1588},[1532],"get-context",[237,1590,1537,1592,1176],{"id":1591},"nwget-context",[16,1593,365],{"href":1306},[1541,1595,1598],{"id":1596,"className":1597},"nwget-context-1",[14],[16,1599,1537,1602,1176],{"className":1600,"href":1601},[19],"#----nwget-context---1",[48,1603,365],{"className":1604},[1552],[33,1606,1607],{},"Reports the content of the current graph context as a list containing two agentsets: the agentset of turtles that are part of the context and the agentset of links that are part of the context.",[33,1609,1610,1611,136,1613,264,1615,1617,1618,136,1620,1622],{},"Let’s say we start with a blank slate and the default context consisting of ",[45,1612,174],{},[45,1614,178],{},[45,1616,365],{}," will report a list the special ",[45,1619,174],{},[45,1621,178],{}," breed agentsets:",[42,1624,1625],{},[45,1626,1627,60,1631,1634,1636,60,1639,60,1642,1645,1647,604,1651,60,1654,631],{},[48,1628,1630],{"className":1629},[51,58],"observer>",[48,1632,329],{"className":1633},[51,328],[70,1635],{},[48,1637,1630],{"className":1638},[51,58],[48,1640,385],{"className":1641},[51,328],[48,1643,365],{"className":1644},[51,58],[70,1646],{},[48,1648,1650],{"className":1649},[51,58],"observer:",[48,1652,174],{"className":1653},[51,173],[48,1655,178],{"className":1656},[51,173],[33,1658,1659,1660,136,1662,1664],{},"If we add some turtles and links to our context, we’ll still see the same thing, even though ",[45,1661,174],{},[45,1663,178],{}," have internally grown:",[42,1666,1667],{},[45,1668,1669,60,1672,60,1676,54,1679,60,1682,60,1685,65,1688,1690,60,1693,60,1696,1699,1701,604,1704,60,1707,631],{},[48,1670,1630],{"className":1671},[51,58],[48,1673,1675],{"className":1674},[51,328],"crt",[48,1677,427],{"className":1678},[51,339],[48,1680,344],{"className":1681},[51,328],[48,1683,348],{"className":1684},[51,173],[48,1686,174],{"className":1687},[51,173],[70,1689],{},[48,1691,1630],{"className":1692},[51,58],[48,1694,385],{"className":1695},[51,328],[48,1697,365],{"className":1698},[51,58],[70,1700],{},[48,1702,1650],{"className":1703},[51,58],[48,1705,174],{"className":1706},[51,173],[48,1708,178],{"className":1709},[51,173],[33,1711,1712,1713,264,1715,1717,1718,1720],{},"If you had set your context to normal agentsets instead (built with ",[45,1714,308],{},[45,1716,311],{}," or ",[45,1719,282],{},") here is what you would see:",[42,1722,1723],{},[45,1724,1725,60,1728,1731,1733,60,1736,60,1739,60,1742,60,1745,60,1748,1751,1753,60,1756,60,1759,1762,1764,1767,1768,60,1772,60,1775,413,1778,60,1781,60,1784,1787],{},[48,1726,1630],{"className":1727},[51,58],[48,1729,329],{"className":1730},[51,328],[70,1732],{},[48,1734,1630],{"className":1735},[51,58],[48,1737,150],{"className":1738},[51,58],[48,1740,308],{"className":1741},[51,173],[48,1743,174],{"className":1744},[51,173],[48,1746,311],{"className":1747},[51,173],[48,1749,178],{"className":1750},[51,173],[70,1752],{},[48,1754,1630],{"className":1755},[51,58],[48,1757,385],{"className":1758},[51,328],[48,1760,365],{"className":1761},[51,58],[70,1763],{},[48,1765,1650],{"className":1766},[51,58]," [(",[48,1769,1771],{"className":1770},[51,58],"agentset,",[48,1773,412],{"className":1774},[51,339],[48,1776,174],{"className":1777},[51,173],[48,1779,1771],{"className":1780},[51,58],[48,1782,412],{"className":1783},[51,339],[48,1785,178],{"className":1786},[51,173],")]",[33,1789,1790,1791,1793],{},"If you then create new turtles and links, they are not added to the context because normal agentsets don’t grow (see ",[16,1792,245],{"href":244},"):",[42,1795,1796],{},[45,1797,1798,60,1801,60,1804,54,1807,60,1810,60,1813,65,1816,1818,60,1821,60,1824,1827,1829,1767,1832,60,1835,60,1838,413,1841,60,1844,60,1847,1787],{},[48,1799,1630],{"className":1800},[51,58],[48,1802,1675],{"className":1803},[51,328],[48,1805,427],{"className":1806},[51,339],[48,1808,344],{"className":1809},[51,328],[48,1811,348],{"className":1812},[51,173],[48,1814,174],{"className":1815},[51,173],[70,1817],{},[48,1819,1630],{"className":1820},[51,58],[48,1822,385],{"className":1823},[51,328],[48,1825,365],{"className":1826},[51,58],[70,1828],{},[48,1830,1650],{"className":1831},[51,58],[48,1833,1771],{"className":1834},[51,58],[48,1836,412],{"className":1837},[51,339],[48,1839,174],{"className":1840},[51,173],[48,1842,1771],{"className":1843},[51,58],[48,1845,412],{"className":1846},[51,339],[48,1848,178],{"className":1849},[51,173],[33,1851,1852],{},"But if you construct new agentsets and set the context to them, your new agents will be there:",[42,1854,1855],{},[45,1856,1857,60,1860,60,1863,60,1866,60,1869,60,1872,1875,1877,60,1880,60,1883,1886,1888,1767,1891,60,1894,60,1897,413,1900,60,1903,60,1906,1787],{},[48,1858,1630],{"className":1859},[51,58],[48,1861,150],{"className":1862},[51,58],[48,1864,308],{"className":1865},[51,173],[48,1867,174],{"className":1868},[51,173],[48,1870,311],{"className":1871},[51,173],[48,1873,178],{"className":1874},[51,173],[70,1876],{},[48,1878,1630],{"className":1879},[51,58],[48,1881,385],{"className":1882},[51,328],[48,1884,365],{"className":1885},[51,58],[70,1887],{},[48,1889,1650],{"className":1890},[51,58],[48,1892,1771],{"className":1893},[51,58],[48,1895,427],{"className":1896},[51,339],[48,1898,174],{"className":1899},[51,173],[48,1901,1771],{"className":1902},[51,58],[48,1904,420],{"className":1905},[51,339],[48,1907,432],{"className":1908},[51,173],[33,1910,1911,1912,136,1918,1924],{},"If you want to see the actual content of your context, it is easy to turn your agentsets into lists that can be nicely displayed. Just use a combination of ",[16,1913,1916],{"href":1914,"rel":1915},"http://ccl.northwestern.edu/netlogo/docs/dictionary.html#map",[256],[45,1917,389],{},[16,1919,1922],{"href":1920,"rel":1921},"http://ccl.northwestern.edu/netlogo/docs/dictionary.html#sort",[256],[45,1923,393],{},":",[42,1926,1927],{},[45,1928,1929,60,1932,60,1935,60,1938,60,1941,1944,1946,1949,1950,60,1953,413,1956,60,1959,428,1962,60,1965,60,1968,457],{},[48,1930,1630],{"className":1931},[51,58],[48,1933,385],{"className":1934},[51,328],[48,1936,389],{"className":1937},[51,173],[48,1939,393],{"className":1940},[51,173],[48,1942,365],{"className":1943},[51,58],[70,1945],{},[48,1947,1650],{"className":1948},[51,58]," [[(",[48,1951,408],{"className":1952},[51,173],[48,1954,412],{"className":1955},[51,339],[48,1957,408],{"className":1958},[51,173],[48,1960,420],{"className":1961},[51,339],[48,1963,432],{"className":1964},[51,173],[48,1966,412],{"className":1967},[51,339],[48,1969,420],{"className":1970},[51,339],[33,1972,1973,1974,1976],{},"Finally, you can use ",[45,1975,365],{}," to store a context that you eventually want to restore:",[42,1978,1979],{},[45,1980,1981,54,1985,65,1989,60,1995,1999,607,2001,2004,607,2006,60,2009,604,2012,2014,2015,60,2018,60,2021,2024,2014,2026,60,2029,60,2032,60,2035,54,2038,60,2041,60,2044,2047,2048,2050,2051,60,2054,60,2057,2061,2063,2064,2066,2067,607,2069,60,2072,604,2075,2014,2077,60,2080,60,2083,2086,2014,2088,60,2091,60,2094,60,2097,54,2100,60,2103,60,2106,2047,2109,2050,2111,60,2114,60,2117,2121,2063,2123,2066,2125,607,2127,60,2130,60,2133,54,2136,60,2139,60,2142,2145,2146,60,2149,54,2152,60,2155,60,2158,65,2161,607,2163,60,2166,60,2169,60,2172,2175,607,2177,60,2181,60,2185,60,2189,60,2192,2195,607,2197,60,2200,60,2204,60,2207,60,2210,2213,607,2215,60,2218,60,2221,54,2224,60,2227,60,2230,2145,2233,60,2236,54,2239,60,2242,60,2245,65,2248,607,2250,60,2253,60,2256,60,2259,2262,607,2264,60,2267,60,2270,2273,607,2275,60,2278,60,2281,60,2284,2287],{},[48,1982,1984],{"className":1983},[51,52],"extensions",[48,1986,1988],{"className":1987},[51,58],"nw",[48,1990,1992,1994],{"className":1991},[51,52],[70,1993],{},"to",[48,1996,1998],{"className":1997},[51,58],"store-and-restore-context",[70,2000],{},[48,2002,329],{"className":2003},[51,328],[70,2005],{},[48,2007,1675],{"className":2008},[51,328],[48,2010,427],{"className":2011},[51,339],[70,2013],{},"    ",[48,2016,622],{"className":2017},[51,328],[48,2019,295],{"className":2020},[51,173],[48,2022,304],{"className":2023},[51,303],[70,2025],{},[48,2027,344],{"className":2028},[51,328],[48,2030,348],{"className":2031},[51,173],[48,2033,174],{"className":2034},[51,173],[48,2036,282],{"className":2037},[51,173],[48,2039,295],{"className":2040},[51,173],[48,2042,299],{"className":2043},[51,173],[48,2045,304],{"className":2046},[51,303]," ] [",[70,2049],{},"      ",[48,2052,622],{"className":2053},[51,328],[48,2055,295],{"className":2056},[51,173],[48,2058,2060],{"className":2059},[51,303],"yellow",[70,2062],{},"    ]",[70,2065],{},"  ]",[70,2068],{},[48,2070,1675],{"className":2071},[51,328],[48,2073,427],{"className":2074},[51,339],[70,2076],{},[48,2078,622],{"className":2079},[51,328],[48,2081,295],{"className":2082},[51,173],[48,2084,773],{"className":2085},[51,303],[70,2087],{},[48,2089,344],{"className":2090},[51,328],[48,2092,348],{"className":2093},[51,173],[48,2095,174],{"className":2096},[51,173],[48,2098,282],{"className":2099},[51,173],[48,2101,295],{"className":2102},[51,173],[48,2104,299],{"className":2105},[51,173],[48,2107,773],{"className":2108},[51,303],[70,2110],{},[48,2112,622],{"className":2113},[51,328],[48,2115,295],{"className":2116},[51,173],[48,2118,2120],{"className":2119},[51,303],"green",[70,2122],{},[70,2124],{},[70,2126],{},[48,2128,150],{"className":2129},[51,58],[48,2131,174],{"className":2132},[51,173],[48,2134,282],{"className":2135},[51,173],[48,2137,295],{"className":2138},[51,173],[48,2140,299],{"className":2141},[51,173],[48,2143,304],{"className":2144},[51,303]," ] ",[48,2147,178],{"className":2148},[51,173],[48,2150,282],{"className":2151},[51,173],[48,2153,295],{"className":2154},[51,173],[48,2156,299],{"className":2157},[51,173],[48,2159,2060],{"className":2160},[51,303],[70,2162],{},[48,2164,385],{"className":2165},[51,328],[48,2167,389],{"className":2168},[51,173],[48,2170,393],{"className":2171},[51,173],[48,2173,365],{"className":2174},[51,58],[70,2176],{},[48,2178,2180],{"className":2179},[51,328],"let",[48,2182,2184],{"className":2183},[51,58],"old-turtles",[48,2186,2188],{"className":2187},[51,173],"item",[48,2190,412],{"className":2191},[51,339],[48,2193,365],{"className":2194},[51,58],[70,2196],{},[48,2198,2180],{"className":2199},[51,328],[48,2201,2203],{"className":2202},[51,58],"old-links",[48,2205,2188],{"className":2206},[51,173],[48,2208,420],{"className":2209},[51,339],[48,2211,365],{"className":2212},[51,58],[70,2214],{},[48,2216,150],{"className":2217},[51,58],[48,2219,174],{"className":2220},[51,173],[48,2222,282],{"className":2223},[51,173],[48,2225,295],{"className":2226},[51,173],[48,2228,299],{"className":2229},[51,173],[48,2231,773],{"className":2232},[51,303],[48,2234,178],{"className":2235},[51,173],[48,2237,282],{"className":2238},[51,173],[48,2240,295],{"className":2241},[51,173],[48,2243,299],{"className":2244},[51,173],[48,2246,2120],{"className":2247},[51,303],[70,2249],{},[48,2251,385],{"className":2252},[51,328],[48,2254,389],{"className":2255},[51,173],[48,2257,393],{"className":2258},[51,173],[48,2260,365],{"className":2261},[51,58],[70,2263],{},[48,2265,150],{"className":2266},[51,58],[48,2268,2184],{"className":2269},[51,58],[48,2271,2203],{"className":2272},[51,58],[70,2274],{},[48,2276,385],{"className":2277},[51,328],[48,2279,389],{"className":2280},[51,173],[48,2282,393],{"className":2283},[51,173],[48,2285,365],{"className":2286},[51,58],[48,2288,2290,2292],{"className":2289},[51,52],[70,2291],{},"end",[33,2294,2295],{},"Here is the result:",[42,2297,2298],{},[45,2299,2300,60,2303,2306,2308,1949,2311,60,2314,413,2317,60,2320,428,2323,60,2326,60,2329,457,2332,2334,1949,2337,60,2340,413,2343,60,2346,428,2349,60,2352,60,2355,457,2358,2360,1949,2363,60,2366,413,2369,60,2372,428,2375,60,2378,60,2381,457],{},[48,2301,1630],{"className":2302},[51,58],[48,2304,1998],{"className":2305},[51,58],[70,2307],{},[48,2309,1650],{"className":2310},[51,58],[48,2312,408],{"className":2313},[51,173],[48,2315,412],{"className":2316},[51,339],[48,2318,408],{"className":2319},[51,173],[48,2321,420],{"className":2322},[51,339],[48,2324,432],{"className":2325},[51,173],[48,2327,412],{"className":2328},[51,339],[48,2330,420],{"className":2331},[51,339],[70,2333],{},[48,2335,1650],{"className":2336},[51,58],[48,2338,408],{"className":2339},[51,173],[48,2341,427],{"className":2342},[51,339],[48,2344,408],{"className":2345},[51,173],[48,2347,340],{"className":2348},[51,339],[48,2350,432],{"className":2351},[51,173],[48,2353,427],{"className":2354},[51,339],[48,2356,340],{"className":2357},[51,339],[70,2359],{},[48,2361,1650],{"className":2362},[51,58],[48,2364,408],{"className":2365},[51,173],[48,2367,412],{"className":2368},[51,339],[48,2370,408],{"className":2371},[51,173],[48,2373,420],{"className":2374},[51,339],[48,2376,432],{"className":2377},[51,173],[48,2379,412],{"className":2380},[51,339],[48,2382,420],{"className":2383},[51,339],[1173,2385,1176,2388,1176,2393,2412,2426,2429,2538],{"className":2386,"id":2387},[1532],"with-context",[237,2389,1537,2391,1176],{"id":2390},"nwwith-context",[16,2392,1315],{"href":1312},[1541,2394,2397],{"id":2395,"className":2396},"nwwith-context-turtleset-linkset-command-block",[14],[16,2398,1537,2401,1176],{"className":2399,"href":2400},[19],"#----nwwith-context-turtleset-linkset-command-block--",[48,2402,2404,2405,60,2407,60,2409],{"className":2403},[1552],"nw:with-context ",[1555,2406,1557],{},[1555,2408,1560],{},[1555,2410,2411],{},"command-block",[33,2413,2414,2415,2417,2418,136,2420,2422,2423,2425],{},"Executes the ",[37,2416,2411],{}," with the context temporarily set to ",[37,2419,1557],{},[37,2421,1560],{},".\nAfter ",[37,2424,2411],{}," finishes running, the previous context will be restored.",[33,2427,2428],{},"For example:",[42,2430,2431],{},[45,2432,2433,60,2436,60,2439,54,2442,60,2445,60,2448,65,2451,2453,60,2456,662,2459,60,2462,60,2465,60,2468,60,2471,413,2474,60,2477,60,2480,60,2483,2486,2487,60,2490,65,2493,2495,1767,2498,60,2501,60,2504,413,2507,60,2510,60,2513,1145,2516,2518,60,2521,60,2524,2527,2529,604,2532,60,2535,631],{},[48,2434,1630],{"className":2435},[51,58],[48,2437,335],{"className":2438},[51,328],[48,2440,340],{"className":2441},[51,339],[48,2443,344],{"className":2444},[51,328],[48,2446,348],{"className":2447},[51,173],[48,2449,174],{"className":2450},[51,173],[70,2452],{},[48,2454,1630],{"className":2455},[51,58],[48,2457,1315],{"className":2458},[51,58],[48,2460,308],{"className":2461},[51,173],[48,2463,408],{"className":2464},[51,173],[48,2466,412],{"className":2467},[51,339],[48,2469,408],{"className":2470},[51,173],[48,2472,420],{"className":2473},[51,339],[48,2475,311],{"className":2476},[51,173],[48,2478,432],{"className":2479},[51,173],[48,2481,412],{"className":2482},[51,339],[48,2484,420],{"className":2485},[51,339],") [ ",[48,2488,385],{"className":2489},[51,328],[48,2491,365],{"className":2492},[51,58],[70,2494],{},[48,2496,1650],{"className":2497},[51,58],[48,2499,1771],{"className":2500},[51,58],[48,2502,427],{"className":2503},[51,339],[48,2505,174],{"className":2506},[51,173],[48,2508,1771],{"className":2509},[51,58],[48,2511,420],{"className":2512},[51,339],[48,2514,432],{"className":2515},[51,173],[70,2517],{},[48,2519,1630],{"className":2520},[51,58],[48,2522,385],{"className":2523},[51,328],[48,2525,365],{"className":2526},[51,58],[70,2528],{},[48,2530,1650],{"className":2531},[51,58],[48,2533,174],{"className":2534},[51,173],[48,2536,178],{"className":2537},[51,173],[33,2539,2540,2541,2544,2545,2547],{},"If you have NW extension code running in two forever buttons or ",[45,2542,2543],{},"loop"," blocks that each need to use different contexts, you should use ",[45,2546,1315],{}," in each to make sure they are operating in the correct context.",[1173,2549,1176,2552,1176,2557,2572,2575,2594,2628,2631,2756,2759,2791],{"className":2550,"id":2551},[1532],"turtles-in-radius",[237,2553,1537,2555,1176],{"id":2554},"nwturtles-in-radius",[16,2556,1456],{"href":1453},[1541,2558,2561],{"id":2559,"className":2560},"nwturtles-in-radius-radius",[14],[16,2562,1537,2565,1176],{"className":2563,"href":2564},[19],"#----nwturtles-in-radius-radius--",[48,2566,2568,2569],{"className":2567},[1552],"nw:turtles-in-radius ",[1555,2570,2571],{},"radius",[33,2573,2574],{},"Returns the set of turtles within the given distance (number of links followed) of the calling turtle in the current context, including the calling turtle.",[33,2576,2577,2579,2580,2583,2584,2586,2587,2590,2591,2593],{},[45,2578,1456],{}," form will follow both undirected links and directed ",[141,2581,2582],{},"out"," links. You can think of ",[45,2585,2551],{}," as “turtles ",[141,2588,2589],{},"who I can get to"," in ",[37,2592,2571],{}," steps”.",[33,2595,2596,2597,2609,2610,2612,2613,2609,2625,2627],{},"If you want the primitive to follow only undirected links or only directed links, you can do it by setting the context appropriately. For example: ",[45,2598,2599,60,2602,60,2605],{},[48,2600,150],{"className":2601},[51,58],[48,2603,174],{"className":2604},[51,173],[48,2606,2608],{"className":2607},[51,58],"undir-links"," (assuming ",[45,2611,2608],{}," is an undirected link breed) or ",[45,2614,2615,60,2618,60,2621],{},[48,2616,150],{"className":2617},[51,58],[48,2619,174],{"className":2620},[51,173],[48,2622,2624],{"className":2623},[51,58],"dir-links",[45,2626,2624],{}," is a directed link breed).",[33,2629,2630],{},"Example:",[42,2632,2633],{},[45,2634,2635,2638,2640,60,2643,2647,2649,60,2652,60,2655,54,2658,60,2662,60,2665,65,2668,2670,60,2673,60,2676,54,2679,60,2682,60,2685,65,2688,2690,60,2693,60,2696,54,2699,60,2702,60,2705,65,2708,2710,60,2713,60,2716,54,2719,60,2722,60,2725,65,2729,2731,60,2734,60,2737,604,2740,607,2742,60,2745,60,2748,60,2751,2754,631],{},[48,2636,329],{"className":2637},[51,328],[70,2639],{},[48,2641,335],{"className":2642},[51,328],[48,2644,2646],{"className":2645},[51,339],"5",[70,2648],{},[48,2650,468],{"className":2651},[51,328],[48,2653,408],{"className":2654},[51,173],[48,2656,412],{"className":2657},[51,339],[48,2659,2661],{"className":2660},[51,328],"create-link-with",[48,2663,408],{"className":2664},[51,173],[48,2666,420],{"className":2667},[51,339],[70,2669],{},[48,2671,468],{"className":2672},[51,328],[48,2674,408],{"className":2675},[51,173],[48,2677,412],{"className":2678},[51,339],[48,2680,2661],{"className":2681},[51,328],[48,2683,408],{"className":2684},[51,173],[48,2686,427],{"className":2687},[51,339],[70,2689],{},[48,2691,468],{"className":2692},[51,328],[48,2694,408],{"className":2695},[51,173],[48,2697,420],{"className":2698},[51,339],[48,2700,2661],{"className":2701},[51,328],[48,2703,408],{"className":2704},[51,173],[48,2706,340],{"className":2707},[51,339],[70,2709],{},[48,2711,468],{"className":2712},[51,328],[48,2714,408],{"className":2715},[51,173],[48,2717,427],{"className":2718},[51,339],[48,2720,2661],{"className":2721},[51,328],[48,2723,408],{"className":2724},[51,173],[48,2726,2728],{"className":2727},[51,339],"4",[70,2730],{},[48,2732,468],{"className":2733},[51,328],[48,2735,408],{"className":2736},[51,173],[48,2738,412],{"className":2739},[51,339],[70,2741],{},[48,2743,385],{"className":2744},[51,328],[48,2746,393],{"className":2747},[51,173],[48,2749,1456],{"className":2750},[51,58],[48,2752,420],{"className":2753},[51,339],[70,2755],{},[33,2757,2758],{},"Will output:",[42,2760,2761],{},[45,2762,2763,2764,60,2767,1145,2770,1767,2773,60,2776,413,2779,60,2782,413,2785,60,2788,1787],{},"(",[48,2765,408],{"className":2766},[51,173],[48,2768,412],{"className":2769},[51,339],[48,2771,1924],{"className":2772},[51,58],[48,2774,408],{"className":2775},[51,173],[48,2777,412],{"className":2778},[51,339],[48,2780,408],{"className":2781},[51,173],[48,2783,420],{"className":2784},[51,339],[48,2786,408],{"className":2787},[51,173],[48,2789,427],{"className":2790},[51,339],[33,2792,2793,2794,2801],{},"As you may have noticed, the result includes the calling turtle. This mimics the behavior of the regular NetLogo ",[16,2795,2798],{"href":2796,"rel":2797},"http://ccl.northwestern.edu/netlogo/docs/dictionary.html#in-radius",[256],[45,2799,2800],{},"in-radius"," primitive.",[1173,2803,1176,2806,1176,2811,2825],{"className":2804,"id":2805},[1532],"turtles-in-reverse-radius",[237,2807,1537,2809,1176],{"id":2808},"nwturtles-in-reverse-radius",[16,2810,1463],{"href":1460},[1541,2812,2815],{"id":2813,"className":2814},"nwturtles-in-reverse-radius-radius",[14],[16,2816,1537,2819,1176],{"className":2817,"href":2818},[19],"#----nwturtles-in-reverse-radius-radius--",[48,2820,2822,2823],{"className":2821},[1552],"nw:turtles-in-reverse-radius ",[1555,2824,2571],{},[33,2826,2827,2828,2840,2841,2586,2843,2590,2846,2593],{},"Like ",[45,2829,2832],{"className":2830},[2831],"netlogo-command",[16,2833,1456],{"href":2834,"rel":2835,"className":2837,"dataDisplayText":1456,"target":2839,"title":1456},"/nw/turtles-in-radius",[2836],"noopener",[2838],"netlogo-wiki-link","_self",", but follows in-links instead of out-links. Also follow undirected links. You can think of ",[45,2842,2805],{},[141,2844,2845],{},"who can get to me",[37,2847,2571],{},[1173,2849,1176,2852,1176,2857,2872,2875,2877,3029,3031],{"className":2850,"id":2851},[1532],"distance-to",[237,2853,1537,2855,1176],{"id":2854},"nwdistance-to",[16,2856,1470],{"href":1467},[1541,2858,2861],{"id":2859,"className":2860},"nwdistance-to-target-turtle",[14],[16,2862,1537,2865,1176],{"className":2863,"href":2864},[19],"#----nwdistance-to-target-turtle--",[48,2866,2868,2869],{"className":2867},[1552],"nw:distance-to ",[1555,2870,2871],{},"target-turtle",[33,2873,2874],{},"Finds the shortest path to the target turtle and reports the total distance for this path, or false if no path exists in the current context. Each link counts for a distance of one.",[33,2876,2630],{},[42,2878,2879],{},[45,2880,2881,60,2884,2888,607,2890,2893,607,2895,60,2898,2901,607,2903,60,2906,60,2909,54,2912,60,2915,60,2918,65,2921,607,2923,60,2926,60,2929,54,2932,60,2935,60,2938,65,2941,607,2943,60,2946,60,2949,54,2952,60,2955,60,2958,65,2961,607,2963,60,2966,60,2969,54,2972,60,2975,60,2978,65,2981,607,2983,60,2986,60,2989,54,2992,60,2995,60,2998,65,3001,607,3003,60,3006,60,3009,54,3012,60,3015,60,3018,60,3021,65,3024],{},[48,2882,1994],{"className":2883},[51,52],[48,2885,2887],{"className":2886},[51,58],"go",[70,2889],{},[48,2891,329],{"className":2892},[51,328],[70,2894],{},[48,2896,335],{"className":2897},[51,328],[48,2899,2646],{"className":2900},[51,339],[70,2902],{},[48,2904,468],{"className":2905},[51,328],[48,2907,408],{"className":2908},[51,173],[48,2910,412],{"className":2911},[51,339],[48,2913,2661],{"className":2914},[51,328],[48,2916,408],{"className":2917},[51,173],[48,2919,420],{"className":2920},[51,339],[70,2922],{},[48,2924,468],{"className":2925},[51,328],[48,2927,408],{"className":2928},[51,173],[48,2930,420],{"className":2931},[51,339],[48,2933,2661],{"className":2934},[51,328],[48,2936,408],{"className":2937},[51,173],[48,2939,427],{"className":2940},[51,339],[70,2942],{},[48,2944,468],{"className":2945},[51,328],[48,2947,408],{"className":2948},[51,173],[48,2950,412],{"className":2951},[51,339],[48,2953,2661],{"className":2954},[51,328],[48,2956,408],{"className":2957},[51,173],[48,2959,340],{"className":2960},[51,339],[70,2962],{},[48,2964,468],{"className":2965},[51,328],[48,2967,408],{"className":2968},[51,173],[48,2970,340],{"className":2971},[51,339],[48,2973,2661],{"className":2974},[51,328],[48,2976,408],{"className":2977},[51,173],[48,2979,2728],{"className":2980},[51,339],[70,2982],{},[48,2984,468],{"className":2985},[51,328],[48,2987,408],{"className":2988},[51,173],[48,2990,2728],{"className":2991},[51,339],[48,2993,2661],{"className":2994},[51,328],[48,2996,408],{"className":2997},[51,173],[48,2999,427],{"className":3000},[51,339],[70,3002],{},[48,3004,468],{"className":3005},[51,328],[48,3007,408],{"className":3008},[51,173],[48,3010,412],{"className":3011},[51,339],[48,3013,385],{"className":3014},[51,328],[48,3016,1470],{"className":3017},[51,58],[48,3019,408],{"className":3020},[51,173],[48,3022,427],{"className":3023},[51,339],[48,3025,3027,2292],{"className":3026},[51,52],[70,3028],{},[33,3030,2758],{},[42,3032,3033],{},[45,3034,2763,3035,60,3038,1145,3041,60,3044],{},[48,3036,408],{"className":3037},[51,173],[48,3039,412],{"className":3040},[51,339],[48,3042,1924],{"className":3043},[51,58],[48,3045,427],{"className":3046},[51,339],[1173,3048,1176,3051,1176,3056,3073,3084,3086,3298,3300],{"className":3049,"id":3050},[1532],"weighted-distance-to",[237,3052,1537,3054,1176],{"id":3053},"nwweighted-distance-to",[16,3055,1477],{"href":1474},[1541,3057,3060],{"id":3058,"className":3059},"nwweighted-distance-to-target-turtle-weight-variable",[14],[16,3061,1537,3064,1176],{"className":3062,"href":3063},[19],"#----nwweighted-distance-to-target-turtle-weight-variable--",[48,3065,3067,3068,60,3070],{"className":3066},[1552],"nw:weighted-distance-to ",[1555,3069,2871],{},[1555,3071,3072],{},"weight-variable",[33,3074,2827,3075,3083],{},[45,3076,3078],{"className":3077},[2831],[16,3079,1470],{"href":3080,"rel":3081,"className":3082,"dataDisplayText":1470,"target":2839,"title":1470},"/nw/distance-to",[2836],[2838],", but takes link weight into account. The weights cannot be negative numbers.",[33,3085,2630],{},[42,3087,3088],{},[45,3089,3090,54,3094,65,3098,60,3103,3106,607,3108,3111,607,3113,60,3116,3119,607,3121,60,3124,60,3127,54,3130,60,3133,60,3136,54,3139,60,3142,60,3145,3149,3150,607,3152,60,3155,60,3158,54,3161,60,3164,60,3167,54,3170,60,3173,60,3176,3149,3179,607,3181,60,3184,60,3187,54,3190,60,3193,60,3196,54,3199,60,3202,60,3205,3149,3209,607,3211,60,3214,60,3217,54,3220,60,3223,60,3226,54,3229,60,3232,60,3235,3149,3238,607,3240,60,3243,60,3246,54,3249,60,3252,60,3255,54,3258,60,3261,60,3264,3149,3267,607,3269,60,3272,60,3275,54,3278,60,3281,60,3284,60,3287,60,3290,65,3293],{},[48,3091,3093],{"className":3092},[51,52],"links-own",[48,3095,3097],{"className":3096},[51,58],"weight",[48,3099,3101,1994],{"className":3100},[51,52],[70,3102],{},[48,3104,2887],{"className":3105},[51,58],[70,3107],{},[48,3109,329],{"className":3110},[51,328],[70,3112],{},[48,3114,335],{"className":3115},[51,328],[48,3117,2646],{"className":3118},[51,339],[70,3120],{},[48,3122,468],{"className":3123},[51,328],[48,3125,408],{"className":3126},[51,173],[48,3128,412],{"className":3129},[51,339],[48,3131,2661],{"className":3132},[51,328],[48,3134,408],{"className":3135},[51,173],[48,3137,420],{"className":3138},[51,339],[48,3140,622],{"className":3141},[51,328],[48,3143,3097],{"className":3144},[51,58],[48,3146,3148],{"className":3147},[51,339],"2.0"," ] ]",[70,3151],{},[48,3153,468],{"className":3154},[51,328],[48,3156,408],{"className":3157},[51,173],[48,3159,420],{"className":3160},[51,339],[48,3162,2661],{"className":3163},[51,328],[48,3165,408],{"className":3166},[51,173],[48,3168,427],{"className":3169},[51,339],[48,3171,622],{"className":3172},[51,328],[48,3174,3097],{"className":3175},[51,58],[48,3177,3148],{"className":3178},[51,339],[70,3180],{},[48,3182,468],{"className":3183},[51,328],[48,3185,408],{"className":3186},[51,173],[48,3188,412],{"className":3189},[51,339],[48,3191,2661],{"className":3192},[51,328],[48,3194,408],{"className":3195},[51,173],[48,3197,340],{"className":3198},[51,339],[48,3200,622],{"className":3201},[51,328],[48,3203,3097],{"className":3204},[51,58],[48,3206,3208],{"className":3207},[51,339],"0.5",[70,3210],{},[48,3212,468],{"className":3213},[51,328],[48,3215,408],{"className":3216},[51,173],[48,3218,340],{"className":3219},[51,339],[48,3221,2661],{"className":3222},[51,328],[48,3224,408],{"className":3225},[51,173],[48,3227,2728],{"className":3228},[51,339],[48,3230,622],{"className":3231},[51,328],[48,3233,3097],{"className":3234},[51,58],[48,3236,3208],{"className":3237},[51,339],[70,3239],{},[48,3241,468],{"className":3242},[51,328],[48,3244,408],{"className":3245},[51,173],[48,3247,2728],{"className":3248},[51,339],[48,3250,2661],{"className":3251},[51,328],[48,3253,408],{"className":3254},[51,173],[48,3256,427],{"className":3257},[51,339],[48,3259,622],{"className":3260},[51,328],[48,3262,3097],{"className":3263},[51,58],[48,3265,3208],{"className":3266},[51,339],[70,3268],{},[48,3270,468],{"className":3271},[51,328],[48,3273,408],{"className":3274},[51,173],[48,3276,412],{"className":3277},[51,339],[48,3279,385],{"className":3280},[51,328],[48,3282,1477],{"className":3283},[51,58],[48,3285,408],{"className":3286},[51,173],[48,3288,427],{"className":3289},[51,339],[48,3291,3097],{"className":3292},[51,58],[48,3294,3296,2292],{"className":3295},[51,52],[70,3297],{},[33,3299,2758],{},[42,3301,3302],{},[45,3303,2763,3304,60,3307,1145,3310,60,3313],{},[48,3305,408],{"className":3306},[51,173],[48,3308,412],{"className":3309},[51,339],[48,3311,1924],{"className":3312},[51,58],[48,3314,3316],{"className":3315},[51,339],"1.5",[1173,3318,1176,3321,1176,3326,3340,3343,3350,3353,3512,3514],{"className":3319,"id":3320},[1532],"path-to",[237,3322,1537,3324,1176],{"id":3323},"nwpath-to",[16,3325,1484],{"href":1481},[1541,3327,3330],{"id":3328,"className":3329},"nwpath-to-target-turtle",[14],[16,3331,1537,3334,1176],{"className":3332,"href":3333},[19],"#----nwpath-to-target-turtle--",[48,3335,3337,3338],{"className":3336},[1552],"nw:path-to ",[1555,3339,2871],{},[33,3341,3342],{},"Finds the shortest path to the target turtle and reports the actual path between the source and the target turtle. The path is reported as the list of links that constitute the path.",[33,3344,3345,3346,3349],{},"If no path exist between the source and the target turtles, ",[45,3347,3348],{},"false"," will be reported instead.",[33,3351,3352],{},"Note that the NW-Extension remembers paths that its calculated previously unless the network changes. Thus, you don’t need to store paths to efficiently move across the network; you can just keep re-calling one of the path primitives. If the network changes, however, the stored answers are forgotten.\nExample:",[42,3354,3355],{},[45,3356,3357,54,3360,65,3363,60,3368,3371,607,3373,3376,607,3378,60,3381,3384,607,3386,60,3389,60,3392,54,3395,60,3398,60,3401,65,3404,607,3406,60,3409,60,3412,54,3415,60,3418,60,3421,65,3424,607,3426,60,3429,60,3432,54,3435,60,3438,60,3441,65,3444,607,3446,60,3449,60,3452,54,3455,60,3458,60,3461,65,3464,607,3466,60,3469,60,3472,54,3475,60,3478,60,3481,65,3484,607,3486,60,3489,60,3492,54,3495,60,3498,60,3501,60,3504,65,3507],{},[48,3358,3093],{"className":3359},[51,52],[48,3361,3097],{"className":3362},[51,58],[48,3364,3366,1994],{"className":3365},[51,52],[70,3367],{},[48,3369,2887],{"className":3370},[51,58],[70,3372],{},[48,3374,329],{"className":3375},[51,328],[70,3377],{},[48,3379,335],{"className":3380},[51,328],[48,3382,2646],{"className":3383},[51,339],[70,3385],{},[48,3387,468],{"className":3388},[51,328],[48,3390,408],{"className":3391},[51,173],[48,3393,412],{"className":3394},[51,339],[48,3396,2661],{"className":3397},[51,328],[48,3399,408],{"className":3400},[51,173],[48,3402,420],{"className":3403},[51,339],[70,3405],{},[48,3407,468],{"className":3408},[51,328],[48,3410,408],{"className":3411},[51,173],[48,3413,420],{"className":3414},[51,339],[48,3416,2661],{"className":3417},[51,328],[48,3419,408],{"className":3420},[51,173],[48,3422,427],{"className":3423},[51,339],[70,3425],{},[48,3427,468],{"className":3428},[51,328],[48,3430,408],{"className":3431},[51,173],[48,3433,412],{"className":3434},[51,339],[48,3436,2661],{"className":3437},[51,328],[48,3439,408],{"className":3440},[51,173],[48,3442,340],{"className":3443},[51,339],[70,3445],{},[48,3447,468],{"className":3448},[51,328],[48,3450,408],{"className":3451},[51,173],[48,3453,340],{"className":3454},[51,339],[48,3456,2661],{"className":3457},[51,328],[48,3459,408],{"className":3460},[51,173],[48,3462,2728],{"className":3463},[51,339],[70,3465],{},[48,3467,468],{"className":3468},[51,328],[48,3470,408],{"className":3471},[51,173],[48,3473,2728],{"className":3474},[51,339],[48,3476,2661],{"className":3477},[51,328],[48,3479,408],{"className":3480},[51,173],[48,3482,427],{"className":3483},[51,339],[70,3485],{},[48,3487,468],{"className":3488},[51,328],[48,3490,408],{"className":3491},[51,173],[48,3493,412],{"className":3494},[51,339],[48,3496,385],{"className":3497},[51,328],[48,3499,1484],{"className":3500},[51,58],[48,3502,408],{"className":3503},[51,173],[48,3505,427],{"className":3506},[51,339],[48,3508,3510,2292],{"className":3509},[51,52],[70,3511],{},[33,3513,2758],{},[42,3515,3516],{},[45,3517,2763,3518,60,3521,1145,3524,1767,3527,60,3530,60,3533,413,3536,60,3539,60,3542,1787],{},[48,3519,408],{"className":3520},[51,173],[48,3522,412],{"className":3523},[51,339],[48,3525,1924],{"className":3526},[51,58],[48,3528,432],{"className":3529},[51,173],[48,3531,412],{"className":3532},[51,339],[48,3534,420],{"className":3535},[51,339],[48,3537,432],{"className":3538},[51,173],[48,3540,420],{"className":3541},[51,339],[48,3543,427],{"className":3544},[51,339],[1173,3546,1176,3549,1176,3554,3568,3576,3578,3729,3731],{"className":3547,"id":3548},[1532],"turtles-on-path-to",[237,3550,1537,3552,1176],{"id":3551},"nwturtles-on-path-to",[16,3553,1491],{"href":1488},[1541,3555,3558],{"id":3556,"className":3557},"nwturtles-on-path-to-target-turtle",[14],[16,3559,1537,3562,1176],{"className":3560,"href":3561},[19],"#----nwturtles-on-path-to-target-turtle--",[48,3563,3565,3566],{"className":3564},[1552],"nw:turtles-on-path-to ",[1555,3567,2871],{},[33,3569,2827,3570,3575],{},[16,3571,3573],{"href":3572},"/nw/path-to",[45,3574,1484],{},", but the turtles on the path are reported, instead of the links, including the source turtle and target turtle.",[33,3577,2630],{},[42,3579,3580],{},[45,3581,3582,60,3585,3588,607,3590,3593,607,3595,60,3598,3601,607,3603,60,3606,60,3609,54,3612,60,3615,60,3618,65,3621,607,3623,60,3626,60,3629,54,3632,60,3635,60,3638,65,3641,607,3643,60,3646,60,3649,54,3652,60,3655,60,3658,65,3661,607,3663,60,3666,60,3669,54,3672,60,3675,60,3678,65,3681,607,3683,60,3686,60,3689,54,3692,60,3695,60,3698,65,3701,607,3703,60,3706,60,3709,54,3712,60,3715,60,3718,60,3721,65,3724],{},[48,3583,1994],{"className":3584},[51,52],[48,3586,2887],{"className":3587},[51,58],[70,3589],{},[48,3591,329],{"className":3592},[51,328],[70,3594],{},[48,3596,335],{"className":3597},[51,328],[48,3599,2646],{"className":3600},[51,339],[70,3602],{},[48,3604,468],{"className":3605},[51,328],[48,3607,408],{"className":3608},[51,173],[48,3610,412],{"className":3611},[51,339],[48,3613,2661],{"className":3614},[51,328],[48,3616,408],{"className":3617},[51,173],[48,3619,420],{"className":3620},[51,339],[70,3622],{},[48,3624,468],{"className":3625},[51,328],[48,3627,408],{"className":3628},[51,173],[48,3630,420],{"className":3631},[51,339],[48,3633,2661],{"className":3634},[51,328],[48,3636,408],{"className":3637},[51,173],[48,3639,427],{"className":3640},[51,339],[70,3642],{},[48,3644,468],{"className":3645},[51,328],[48,3647,408],{"className":3648},[51,173],[48,3650,412],{"className":3651},[51,339],[48,3653,2661],{"className":3654},[51,328],[48,3656,408],{"className":3657},[51,173],[48,3659,340],{"className":3660},[51,339],[70,3662],{},[48,3664,468],{"className":3665},[51,328],[48,3667,408],{"className":3668},[51,173],[48,3670,340],{"className":3671},[51,339],[48,3673,2661],{"className":3674},[51,328],[48,3676,408],{"className":3677},[51,173],[48,3679,2728],{"className":3680},[51,339],[70,3682],{},[48,3684,468],{"className":3685},[51,328],[48,3687,408],{"className":3688},[51,173],[48,3690,2728],{"className":3691},[51,339],[48,3693,2661],{"className":3694},[51,328],[48,3696,408],{"className":3697},[51,173],[48,3699,427],{"className":3700},[51,339],[70,3702],{},[48,3704,468],{"className":3705},[51,328],[48,3707,408],{"className":3708},[51,173],[48,3710,412],{"className":3711},[51,339],[48,3713,385],{"className":3714},[51,328],[48,3716,1491],{"className":3717},[51,58],[48,3719,408],{"className":3720},[51,173],[48,3722,427],{"className":3723},[51,339],[48,3725,3727,2292],{"className":3726},[51,52],[70,3728],{},[33,3730,2758],{},[42,3732,3733],{},[45,3734,2763,3735,60,3738,1145,3741,1767,3744,60,3747,413,3750,60,3753,413,3756,60,3759,1787],{},[48,3736,408],{"className":3737},[51,173],[48,3739,412],{"className":3740},[51,339],[48,3742,1924],{"className":3743},[51,58],[48,3745,408],{"className":3746},[51,173],[48,3748,412],{"className":3749},[51,339],[48,3751,408],{"className":3752},[51,173],[48,3754,420],{"className":3755},[51,339],[48,3757,408],{"className":3758},[51,173],[48,3760,427],{"className":3761},[51,339],[1173,3763,1176,3766,1176,3771,3787,3794,3796,4003,4005],{"className":3764,"id":3765},[1532],"weighted-path-to",[237,3767,1537,3769,1176],{"id":3768},"nwweighted-path-to",[16,3770,1498],{"href":1495},[1541,3772,3775],{"id":3773,"className":3774},"nwweighted-path-to-target-turtle-weight-variable",[14],[16,3776,1537,3779,1176],{"className":3777,"href":3778},[19],"#----nwweighted-path-to-target-turtle-weight-variable--",[48,3780,3782,3783,60,3785],{"className":3781},[1552],"nw:weighted-path-to ",[1555,3784,2871],{},[1555,3786,3072],{},[33,3788,2827,3789,3793],{},[16,3790,3791],{"href":3572},[45,3792,1484],{},", but takes link weight into account.",[33,3795,2630],{},[42,3797,3798],{},[45,3799,3800,54,3803,65,3806,60,3811,3814,607,3816,3819,607,3821,60,3824,3827,607,3829,60,3832,60,3835,54,3838,60,3841,60,3844,54,3847,60,3850,60,3853,3149,3856,607,3858,60,3861,60,3864,54,3867,60,3870,60,3873,54,3876,60,3879,60,3882,3149,3885,607,3887,60,3890,60,3893,54,3896,60,3899,60,3902,54,3905,60,3908,60,3911,3149,3914,607,3916,60,3919,60,3922,54,3925,60,3928,60,3931,54,3934,60,3937,60,3940,3149,3943,607,3945,60,3948,60,3951,54,3954,60,3957,60,3960,54,3963,60,3966,60,3969,3149,3972,607,3974,60,3977,60,3980,54,3983,60,3986,60,3989,60,3992,60,3995,65,3998],{},[48,3801,3093],{"className":3802},[51,52],[48,3804,3097],{"className":3805},[51,58],[48,3807,3809,1994],{"className":3808},[51,52],[70,3810],{},[48,3812,2887],{"className":3813},[51,58],[70,3815],{},[48,3817,329],{"className":3818},[51,328],[70,3820],{},[48,3822,335],{"className":3823},[51,328],[48,3825,2646],{"className":3826},[51,339],[70,3828],{},[48,3830,468],{"className":3831},[51,328],[48,3833,408],{"className":3834},[51,173],[48,3836,412],{"className":3837},[51,339],[48,3839,2661],{"className":3840},[51,328],[48,3842,408],{"className":3843},[51,173],[48,3845,420],{"className":3846},[51,339],[48,3848,622],{"className":3849},[51,328],[48,3851,3097],{"className":3852},[51,58],[48,3854,3148],{"className":3855},[51,339],[70,3857],{},[48,3859,468],{"className":3860},[51,328],[48,3862,408],{"className":3863},[51,173],[48,3865,420],{"className":3866},[51,339],[48,3868,2661],{"className":3869},[51,328],[48,3871,408],{"className":3872},[51,173],[48,3874,427],{"className":3875},[51,339],[48,3877,622],{"className":3878},[51,328],[48,3880,3097],{"className":3881},[51,58],[48,3883,3148],{"className":3884},[51,339],[70,3886],{},[48,3888,468],{"className":3889},[51,328],[48,3891,408],{"className":3892},[51,173],[48,3894,412],{"className":3895},[51,339],[48,3897,2661],{"className":3898},[51,328],[48,3900,408],{"className":3901},[51,173],[48,3903,340],{"className":3904},[51,339],[48,3906,622],{"className":3907},[51,328],[48,3909,3097],{"className":3910},[51,58],[48,3912,3208],{"className":3913},[51,339],[70,3915],{},[48,3917,468],{"className":3918},[51,328],[48,3920,408],{"className":3921},[51,173],[48,3923,340],{"className":3924},[51,339],[48,3926,2661],{"className":3927},[51,328],[48,3929,408],{"className":3930},[51,173],[48,3932,2728],{"className":3933},[51,339],[48,3935,622],{"className":3936},[51,328],[48,3938,3097],{"className":3939},[51,58],[48,3941,3208],{"className":3942},[51,339],[70,3944],{},[48,3946,468],{"className":3947},[51,328],[48,3949,408],{"className":3950},[51,173],[48,3952,2728],{"className":3953},[51,339],[48,3955,2661],{"className":3956},[51,328],[48,3958,408],{"className":3959},[51,173],[48,3961,427],{"className":3962},[51,339],[48,3964,622],{"className":3965},[51,328],[48,3967,3097],{"className":3968},[51,58],[48,3970,3208],{"className":3971},[51,339],[70,3973],{},[48,3975,468],{"className":3976},[51,328],[48,3978,408],{"className":3979},[51,173],[48,3981,412],{"className":3982},[51,339],[48,3984,385],{"className":3985},[51,328],[48,3987,1498],{"className":3988},[51,58],[48,3990,408],{"className":3991},[51,173],[48,3993,427],{"className":3994},[51,339],[48,3996,3097],{"className":3997},[51,58],[48,3999,4001,2292],{"className":4000},[51,52],[70,4002],{},[33,4004,2758],{},[42,4006,4007],{},[45,4008,2763,4009,60,4012,1145,4015,1767,4018,60,4021,60,4024,413,4027,60,4030,60,4033,413,4036,60,4039,60,4042,1787],{},[48,4010,408],{"className":4011},[51,173],[48,4013,412],{"className":4014},[51,339],[48,4016,1924],{"className":4017},[51,58],[48,4019,432],{"className":4020},[51,173],[48,4022,412],{"className":4023},[51,339],[48,4025,340],{"className":4026},[51,339],[48,4028,432],{"className":4029},[51,173],[48,4031,340],{"className":4032},[51,339],[48,4034,2728],{"className":4035},[51,339],[48,4037,432],{"className":4038},[51,173],[48,4040,427],{"className":4041},[51,339],[48,4043,2728],{"className":4044},[51,339],[1173,4046,1176,4049,1176,4054,4070,4077,4079,4286,4288],{"className":4047,"id":4048},[1532],"turtles-on-weighted-path-to",[237,4050,1537,4052,1176],{"id":4051},"nwturtles-on-weighted-path-to",[16,4053,1505],{"href":1502},[1541,4055,4058],{"id":4056,"className":4057},"nwturtles-on-weighted-path-to-target-turtle-weight-variable",[14],[16,4059,1537,4062,1176],{"className":4060,"href":4061},[19],"#----nwturtles-on-weighted-path-to-target-turtle-weight-variable--",[48,4063,4065,4066,60,4068],{"className":4064},[1552],"nw:turtles-on-weighted-path-to ",[1555,4067,2871],{},[1555,4069,3072],{},[33,4071,2827,4072,3793],{},[16,4073,4075],{"href":4074},"/nw/turtles-on-path-to",[45,4076,1491],{},[33,4078,2630],{},[42,4080,4081],{},[45,4082,4083,54,4086,65,4089,60,4094,4097,607,4099,4102,607,4104,60,4107,4110,607,4112,60,4115,60,4118,54,4121,60,4124,60,4127,54,4130,60,4133,60,4136,3149,4139,607,4141,60,4144,60,4147,54,4150,60,4153,60,4156,54,4159,60,4162,60,4165,3149,4168,607,4170,60,4173,60,4176,54,4179,60,4182,60,4185,54,4188,60,4191,60,4194,3149,4197,607,4199,60,4202,60,4205,54,4208,60,4211,60,4214,54,4217,60,4220,60,4223,3149,4226,607,4228,60,4231,60,4234,54,4237,60,4240,60,4243,54,4246,60,4249,60,4252,3149,4255,607,4257,60,4260,60,4263,54,4266,60,4269,60,4272,60,4275,60,4278,65,4281],{},[48,4084,3093],{"className":4085},[51,52],[48,4087,3097],{"className":4088},[51,58],[48,4090,4092,1994],{"className":4091},[51,52],[70,4093],{},[48,4095,2887],{"className":4096},[51,58],[70,4098],{},[48,4100,329],{"className":4101},[51,328],[70,4103],{},[48,4105,335],{"className":4106},[51,328],[48,4108,2646],{"className":4109},[51,339],[70,4111],{},[48,4113,468],{"className":4114},[51,328],[48,4116,408],{"className":4117},[51,173],[48,4119,412],{"className":4120},[51,339],[48,4122,2661],{"className":4123},[51,328],[48,4125,408],{"className":4126},[51,173],[48,4128,420],{"className":4129},[51,339],[48,4131,622],{"className":4132},[51,328],[48,4134,3097],{"className":4135},[51,58],[48,4137,3148],{"className":4138},[51,339],[70,4140],{},[48,4142,468],{"className":4143},[51,328],[48,4145,408],{"className":4146},[51,173],[48,4148,420],{"className":4149},[51,339],[48,4151,2661],{"className":4152},[51,328],[48,4154,408],{"className":4155},[51,173],[48,4157,427],{"className":4158},[51,339],[48,4160,622],{"className":4161},[51,328],[48,4163,3097],{"className":4164},[51,58],[48,4166,3148],{"className":4167},[51,339],[70,4169],{},[48,4171,468],{"className":4172},[51,328],[48,4174,408],{"className":4175},[51,173],[48,4177,412],{"className":4178},[51,339],[48,4180,2661],{"className":4181},[51,328],[48,4183,408],{"className":4184},[51,173],[48,4186,340],{"className":4187},[51,339],[48,4189,622],{"className":4190},[51,328],[48,4192,3097],{"className":4193},[51,58],[48,4195,3208],{"className":4196},[51,339],[70,4198],{},[48,4200,468],{"className":4201},[51,328],[48,4203,408],{"className":4204},[51,173],[48,4206,340],{"className":4207},[51,339],[48,4209,2661],{"className":4210},[51,328],[48,4212,408],{"className":4213},[51,173],[48,4215,2728],{"className":4216},[51,339],[48,4218,622],{"className":4219},[51,328],[48,4221,3097],{"className":4222},[51,58],[48,4224,3208],{"className":4225},[51,339],[70,4227],{},[48,4229,468],{"className":4230},[51,328],[48,4232,408],{"className":4233},[51,173],[48,4235,2728],{"className":4236},[51,339],[48,4238,2661],{"className":4239},[51,328],[48,4241,408],{"className":4242},[51,173],[48,4244,427],{"className":4245},[51,339],[48,4247,622],{"className":4248},[51,328],[48,4250,3097],{"className":4251},[51,58],[48,4253,3208],{"className":4254},[51,339],[70,4256],{},[48,4258,468],{"className":4259},[51,328],[48,4261,408],{"className":4262},[51,173],[48,4264,412],{"className":4265},[51,339],[48,4267,385],{"className":4268},[51,328],[48,4270,1498],{"className":4271},[51,58],[48,4273,408],{"className":4274},[51,173],[48,4276,427],{"className":4277},[51,339],[48,4279,3097],{"className":4280},[51,58],[48,4282,4284,2292],{"className":4283},[51,52],[70,4285],{},[33,4287,2758],{},[42,4289,4290],{},[45,4291,2763,4292,60,4295,1145,4298,1767,4301,60,4304,413,4307,60,4310,413,4313,60,4316,413,4319,60,4322,1787],{},[48,4293,408],{"className":4294},[51,173],[48,4296,412],{"className":4297},[51,339],[48,4299,1924],{"className":4300},[51,58],[48,4302,408],{"className":4303},[51,173],[48,4305,412],{"className":4306},[51,339],[48,4308,408],{"className":4309},[51,173],[48,4311,340],{"className":4312},[51,339],[48,4314,408],{"className":4315},[51,173],[48,4317,2728],{"className":4318},[51,339],[48,4320,408],{"className":4321},[51,173],[48,4323,427],{"className":4324},[51,339],[1173,4326,1176,4329,1176,4334,4345,4348,4351,4353,4476,4479],{"className":4327,"id":4328},[1532],"mean-path-length",[237,4330,1537,4332,1176],{"id":4331},"nwmean-path-length",[16,4333,1512],{"href":1509},[1541,4335,4338],{"id":4336,"className":4337},"nwmean-path-length-1",[14],[16,4339,1537,4342,1176],{"className":4340,"href":4341},[19],"#----nwmean-path-length---1",[48,4343,1512],{"className":4344},[1552],[33,4346,4347],{},"Reports the average shortest-path length between all distinct pairs of nodes in the current context.",[33,4349,4350],{},"Reports false unless paths exist between all pairs.",[33,4352,2630],{},[42,4354,4355],{},[45,4356,4357,54,4360,65,4363,60,4368,4371,607,4373,4376,607,4378,60,4381,4384,607,4386,60,4389,60,4392,54,4395,60,4398,60,4401,54,4404,60,4407,60,4410,3149,4413,607,4415,60,4418,60,4421,54,4424,60,4427,60,4430,54,4433,60,4436,60,4439,3149,4442,607,4444,60,4447,4450,607,4452,60,4455,60,4458,4463,607,4465,60,4468,4471],{},[48,4358,3093],{"className":4359},[51,52],[48,4361,3097],{"className":4362},[51,58],[48,4364,4366,1994],{"className":4365},[51,52],[70,4367],{},[48,4369,2887],{"className":4370},[51,58],[70,4372],{},[48,4374,329],{"className":4375},[51,328],[70,4377],{},[48,4379,335],{"className":4380},[51,328],[48,4382,340],{"className":4383},[51,339],[70,4385],{},[48,4387,468],{"className":4388},[51,328],[48,4390,408],{"className":4391},[51,173],[48,4393,412],{"className":4394},[51,339],[48,4396,2661],{"className":4397},[51,328],[48,4399,408],{"className":4400},[51,173],[48,4402,420],{"className":4403},[51,339],[48,4405,622],{"className":4406},[51,328],[48,4408,3097],{"className":4409},[51,58],[48,4411,3148],{"className":4412},[51,339],[70,4414],{},[48,4416,468],{"className":4417},[51,328],[48,4419,408],{"className":4420},[51,173],[48,4422,420],{"className":4423},[51,339],[48,4425,2661],{"className":4426},[51,328],[48,4428,408],{"className":4429},[51,173],[48,4431,427],{"className":4432},[51,339],[48,4434,622],{"className":4435},[51,328],[48,4437,3097],{"className":4438},[51,58],[48,4440,3148],{"className":4441},[51,339],[70,4443],{},[48,4445,385],{"className":4446},[51,328],[48,4448,1512],{"className":4449},[51,58],[70,4451],{},[48,4453,335],{"className":4454},[51,328],[48,4456,420],{"className":4457},[51,339],[48,4459,4462],{"className":4460},[51,4461],"comment","; create a new, disconnected turtle",[70,4464],{},[48,4466,385],{"className":4467},[51,328],[48,4469,1512],{"className":4470},[51,58],[48,4472,4474,2292],{"className":4473},[51,52],[70,4475],{},[33,4477,4478],{},"Will ouput:",[42,4480,4481],{},[45,4482,4483,60,4486,4490,4492,60,4495],{},[48,4484,1650],{"className":4485},[51,58],[48,4487,4489],{"className":4488},[51,339],"1.3333333333333333",[70,4491],{},[48,4493,1650],{"className":4494},[51,58],[48,4496,3348],{"className":4497},[51,303],[1173,4499,1176,4502,1176,4507,4521,4529,4531,4674,4676],{"className":4500,"id":4501},[1532],"mean-weighted-path-length",[237,4503,1537,4505,1176],{"id":4504},"nwmean-weighted-path-length",[16,4506,1519],{"href":1516},[1541,4508,4511],{"id":4509,"className":4510},"nwmean-weighted-path-length-weight-variable",[14],[16,4512,1537,4515,1176],{"className":4513,"href":4514},[19],"#----nwmean-weighted-path-length-weight-variable--",[48,4516,4518,4519],{"className":4517},[1552],"nw:mean-weighted-path-length ",[1555,4520,3072],{},[33,4522,2827,4523,4528],{},[16,4524,4526],{"href":4525},"/nw/mean-path-length",[45,4527,1512],{},", but takes into account link weights.",[33,4530,2630],{},[42,4532,4533],{},[45,4534,4535,54,4538,65,4541,60,4546,4549,607,4551,4554,607,4556,60,4559,4562,607,4564,60,4567,60,4570,54,4573,60,4576,60,4579,54,4582,60,4585,60,4588,3149,4591,607,4593,60,4596,60,4599,54,4602,60,4605,60,4608,54,4611,60,4614,60,4617,3149,4620,607,4622,60,4625,4628,607,4630,60,4633,60,4636,4639,607,4641,60,4644,60,4647,4650,607,4652,60,4655,4658,607,4660,60,4663,60,4666,4669],{},[48,4536,3093],{"className":4537},[51,52],[48,4539,3097],{"className":4540},[51,58],[48,4542,4544,1994],{"className":4543},[51,52],[70,4545],{},[48,4547,2887],{"className":4548},[51,58],[70,4550],{},[48,4552,329],{"className":4553},[51,328],[70,4555],{},[48,4557,335],{"className":4558},[51,328],[48,4560,340],{"className":4561},[51,339],[70,4563],{},[48,4565,468],{"className":4566},[51,328],[48,4568,408],{"className":4569},[51,173],[48,4571,412],{"className":4572},[51,339],[48,4574,2661],{"className":4575},[51,328],[48,4577,408],{"className":4578},[51,173],[48,4580,420],{"className":4581},[51,339],[48,4583,622],{"className":4584},[51,328],[48,4586,3097],{"className":4587},[51,58],[48,4589,3148],{"className":4590},[51,339],[70,4592],{},[48,4594,468],{"className":4595},[51,328],[48,4597,408],{"className":4598},[51,173],[48,4600,420],{"className":4601},[51,339],[48,4603,2661],{"className":4604},[51,328],[48,4606,408],{"className":4607},[51,173],[48,4609,427],{"className":4610},[51,339],[48,4612,622],{"className":4613},[51,328],[48,4615,3097],{"className":4616},[51,58],[48,4618,3148],{"className":4619},[51,339],[70,4621],{},[48,4623,385],{"className":4624},[51,328],[48,4626,1512],{"className":4627},[51,58],[70,4629],{},[48,4631,385],{"className":4632},[51,328],[48,4634,1519],{"className":4635},[51,58],[48,4637,3097],{"className":4638},[51,58],[70,4640],{},[48,4642,335],{"className":4643},[51,328],[48,4645,420],{"className":4646},[51,339],[48,4648,4462],{"className":4649},[51,4461],[70,4651],{},[48,4653,385],{"className":4654},[51,328],[48,4656,1512],{"className":4657},[51,58],[70,4659],{},[48,4661,385],{"className":4662},[51,328],[48,4664,1519],{"className":4665},[51,58],[48,4667,3097],{"className":4668},[51,58],[48,4670,4672,2292],{"className":4671},[51,52],[70,4673],{},[33,4675,4478],{},[42,4677,4678],{},[45,4679,4680,60,4683,4687,4689,60,4692],{},[48,4681,1650],{"className":4682},[51,58],[48,4684,4686],{"className":4685},[51,339],"2.6666666666666665",[70,4688],{},[48,4690,1650],{"className":4691},[51,58],[48,4693,3348],{"className":4694},[51,303],[1173,4696,1176,4699,1176,4704,4715,4724],{"className":4697,"id":4698},[1532],"betweenness-centrality",[237,4700,1537,4702,1176],{"id":4701},"nwbetweenness-centrality",[16,4703,1183],{"href":1180},[1541,4705,4708],{"id":4706,"className":4707},"nwbetweenness-centrality-1",[14],[16,4709,1537,4712,1176],{"className":4710,"href":4711},[19],"#----nwbetweenness-centrality---1",[48,4713,1183],{"className":4714},[1552],[33,4716,4717,4718,4723],{},"To calculate the ",[16,4719,4722],{"href":4720,"rel":4721},"https://en.wikipedia.org/wiki/Betweenness_centrality",[256],"betweenness centrality"," of a turtle, you take every other possible pairs of turtles and, for each pair, you calculate the proportion of shortest paths between members of the pair that passes through the current turtle. The betweenness centrality of a turtle is the sum of these.",[33,4725,4726],{},"As of now, link weights are not taken into account.",[1173,4728,1176,4731,1176,4736,4747,4756,4764,4767],{"className":4729,"id":4730},[1532],"eigenvector-centrality",[237,4732,1537,4734,1176],{"id":4733},"nweigenvector-centrality",[16,4735,1190],{"href":1187},[1541,4737,4740],{"id":4738,"className":4739},"nweigenvector-centrality-1",[14],[16,4741,1537,4744,1176],{"className":4742,"href":4743},[19],"#----nweigenvector-centrality---1",[48,4745,1190],{"className":4746},[1552],[33,4748,4749,4750,4755],{},"The ",[16,4751,4754],{"href":4752,"rel":4753},"https://en.wikipedia.org/wiki/Centrality#Eigenvector_centrality",[256],"Eigenvector centrality"," of a node can be thought of as the amount of influence a node has on a network. In practice, turtles that are connected to a lot of other turtles that are themselves well-connected (and so on) get a higher Eigenvector centrality score.",[33,4757,4758,4759,258],{},"In this implementation, the eigenvector centrality is normalized such that the highest eigenvector centrality a node can have is 1. This implementation is designed to agree with Gephi’s implementation out to at least 3 decimal places. If you discover that it disagrees with Gephi on a particular network, please ",[16,4760,4763],{"href":4761,"rel":4762},"https://github.com/NetLogo/NW-Extension/issues/new",[256],"report it",[33,4765,4766],{},"The primitive respects link direction, even in mixed-directed networks. This is the one place where it should disagree with Gephi; Gephi refuses to treat directed links as directed in mixed-networks.",[33,4768,4726],{},[1173,4770,1176,4773,1176,4778,4789,4797,4800,4803],{"className":4771,"id":4772},[1532],"page-rank",[237,4774,1537,4776,1176],{"id":4775},"nwpage-rank",[16,4777,1197],{"href":1194},[1541,4779,4782],{"id":4780,"className":4781},"nwpage-rank-1",[14],[16,4783,1537,4786,1176],{"className":4784,"href":4785},[19],"#----nwpage-rank---1",[48,4787,1197],{"className":4788},[1552],[33,4790,4749,4791,4796],{},[16,4792,4795],{"href":4793,"rel":4794},"https://en.wikipedia.org/wiki/PageRank",[256],"page rank"," of a node can be thought of as the proportion of time that an agent walking forever at random on the network would spend at this node. The agent has an equal chance of taking any of a nodes edges, and will jump around the network completely randomly 15% of the time. In practice, like with eigenvector centrality, turtles that are connected to a lot of other turtles that are themselves well-connected (and so on) get a higher page rank.",[33,4798,4799],{},"Page rank is one of the several algorithms that search engines use to determine the importance of a website.",[33,4801,4802],{},"The sum of all page rank values should be approximately one. Unlike eigenvector centrality, page rank is defined for all networks, no matter the connectivity. Currently, it treats all links as undirected links.",[33,4804,4726],{},[1173,4806,1176,4809,1176,4814,4825,4833],{"className":4807,"id":4808},[1532],"closeness-centrality",[237,4810,1537,4812,1176],{"id":4811},"nwcloseness-centrality",[16,4813,1204],{"href":1201},[1541,4815,4818],{"id":4816,"className":4817},"nwcloseness-centrality-1",[14],[16,4819,1537,4822,1176],{"className":4820,"href":4821},[19],"#----nwcloseness-centrality---1",[48,4823,1204],{"className":4824},[1552],[33,4826,4749,4827,4832],{},[16,4828,4831],{"href":4829,"rel":4830},"https://en.wikipedia.org/wiki/Centrality#Closeness_centrality",[256],"closeness centrality"," of a turtle is defined as the inverse of the average of it’s distances to all other turtles. (Some people use the sum of distances instead of the average, but the extension uses the average.)",[33,4834,4835,4836,4839,4840,4845],{},"Note that this primitive reports the ",[37,4837,4838],{},"intra-component"," closeness of a turtle, that is, it takes into account only the distances to the turtles that are part of the same ",[16,4841,4844],{"href":4842,"rel":4843},"https://en.wikipedia.org/wiki/Connected_component_%28graph_theory%29",[256],"component"," as the current turtle, since distance to turtles in other components is undefined. The closeness centrality of an isolated turtle is defined to be zero.",[1173,4847,1176,4850,1176,4855,4870],{"className":4848,"id":4849},[1532],"weighted-closeness-centrality",[237,4851,1537,4853,1176],{"id":4852},"nwweighted-closeness-centrality",[16,4854,1211],{"href":1208},[1541,4856,4859],{"id":4857,"className":4858},"nwweighted-closeness-centrality-link-weight-variable",[14],[16,4860,1537,4863,1176],{"className":4861,"href":4862},[19],"#----nwweighted-closeness-centrality-link-weight-variable--",[48,4864,4866,4867],{"className":4865},[1552],"nw:weighted-closeness-centrality ",[1555,4868,4869],{},"link-weight-variable",[33,4871,4872,4873,4878],{},"This is identical to ",[16,4874,4876],{"href":4875},"/nw/closeness-centrality",[45,4877,1204],{},", except that weights provided by the given variable are treated as the distances of links.",[1173,4880,1176,4883,1176,4888,4899,4908,4913,4921,5045,5052,5055],{"className":4881,"id":4882},[1532],"clustering-coefficient",[237,4884,1537,4886,1176],{"id":4885},"nwclustering-coefficient",[16,4887,1277],{"href":1274},[1541,4889,4892],{"id":4890,"className":4891},"nwclustering-coefficient-1",[14],[16,4893,1537,4896,1176],{"className":4894,"href":4895},[19],"#----nwclustering-coefficient---1",[48,4897,1277],{"className":4898},[1552],[33,4900,4901,4902,4907],{},"Reports the ",[16,4903,4906],{"href":4904,"rel":4905},"https://en.wikipedia.org/wiki/Clustering_coefficient#Local_clustering_coefficient",[256],"local clustering coefficient"," of the turtle. The clustering coefficient of a node measures how connected its neighbors are. It is defined as the number of links between the node’s neighbors divided by the total number of possible links between its neighbors.",[33,4909,4910,4912],{},[45,4911,1277],{}," takes the directedness of links into account. A directed link counts as a single link whereas an undirected link counts as two links (one going one-way, one going the other).",[33,4914,4749,4915,4920],{},[16,4916,4919],{"href":4917,"rel":4918},"https://en.wikipedia.org/wiki/Clustering_coefficient#Global_clustering_coefficient",[256],"global clustering coefficient"," measures how much nodes tend to cluster together in the network in general. It is defined based on the types of triplets in the network. A triplet consists of a central node and two of its neighbors. If its neighbors are also connected, it’s a closed triplet. If its neighbors are not connected, it’s an open triplet. The global clustering coefficient is simply the number of closed triplets in a network divided by the total number of triplets. It can be calculated from the local clustering coefficient quite easily with the following code",[42,4922,4923],{},[45,4924,4925,60,4929,4933,607,4935,60,4938,60,4942,54,4946,60,4949,60,4953,60,4957,60,4961,662,4964,60,4967,60,4970,60,4974,4977,4978,60,4982,4985,607,4987,60,4990,60,4994,54,4997,60,5000,60,5003,662,5006,60,5009,60,5012,60,5015,4977,5018,60,5021,5024,607,5026,60,5030,60,5033,60,5037,5040],{},[48,4926,4928],{"className":4927},[51,52],"to-report",[48,4930,4932],{"className":4931},[51,58],"global-clustering-coefficient",[70,4934],{},[48,4936,2180],{"className":4937},[51,328],[48,4939,4941],{"className":4940},[51,58],"closed-triplets",[48,4943,4945],{"className":4944},[51,173],"sum",[48,4947,1277],{"className":4948},[51,58],[48,4950,4952],{"className":4951},[51,173],"*",[48,4954,4956],{"className":4955},[51,173],"count",[48,4958,4960],{"className":4959},[51,173],"my-links",[48,4962,4952],{"className":4963},[51,173],[48,4965,4956],{"className":4966},[51,173],[48,4968,4960],{"className":4969},[51,173],[48,4971,4973],{"className":4972},[51,173],"-",[48,4975,420],{"className":4976},[51,339],") ] ",[48,4979,4981],{"className":4980},[51,173],"of",[48,4983,174],{"className":4984},[51,173],[70,4986],{},[48,4988,2180],{"className":4989},[51,328],[48,4991,4993],{"className":4992},[51,58],"triplets",[48,4995,4945],{"className":4996},[51,173],[48,4998,4956],{"className":4999},[51,173],[48,5001,4960],{"className":5002},[51,173],[48,5004,4952],{"className":5005},[51,173],[48,5007,4956],{"className":5008},[51,173],[48,5010,4960],{"className":5011},[51,173],[48,5013,4973],{"className":5014},[51,173],[48,5016,420],{"className":5017},[51,339],[48,5019,4981],{"className":5020},[51,173],[48,5022,174],{"className":5023},[51,173],[70,5025],{},[48,5027,5029],{"className":5028},[51,328],"report",[48,5031,4941],{"className":5032},[51,58],[48,5034,5036],{"className":5035},[51,173],"/",[48,5038,4993],{"className":5039},[51,58],[48,5041,5043,2292],{"className":5042},[51,52],[70,5044],{},[33,5046,5047,5048,136,5050,258],{},"Note that the above will only work with the default context, and may need to tweaked if you’ve set the turtles or links in the network to something other than ",[45,5049,174],{},[45,5051,178],{},[33,5053,5054],{},"The average local clustering coefficient is another popular method for measuring the amount of clustering in the network as a whole. It may be calculated with",[42,5056,5057],{},[45,5058,5059,54,5063,2145,5066,60,5069],{},[48,5060,5062],{"className":5061},[51,173],"mean",[48,5064,1277],{"className":5065},[51,58],[48,5067,4981],{"className":5068},[51,173],[48,5070,174],{"className":5071},[51,173],[1173,5073,1176,5076,1176,5081,5092,5100,5103,5105],{"className":5074,"id":5075},[1532],"modularity",[237,5077,1537,5079,1176],{"id":5078},"nwmodularity",[16,5080,1284],{"href":1281},[1541,5082,5085],{"id":5083,"className":5084},"nwmodularity-1",[14],[16,5086,1537,5089,1176],{"className":5087,"href":5088},[19],"#----nwmodularity---1",[48,5090,1284],{"className":5091},[1552],[33,5093,5094,5099],{},[16,5095,5098],{"href":5096,"rel":5097},"https://en.wikipedia.org/wiki/Modularity_(networks)",[256],"Modularity"," is a measurement of community structure in the network. It is defined based on the number of in-community links versus the number of between-community links. This primitive takes as input a list of agentsets, where each of the agentsets is one the communities that you’re separating the network into.",[33,5101,5102],{},"This measurement works on undirected, directed, and mixed-directedness networks. In the case of mixed-directedness, undirected links are treated essentially the same as two opposing directed links. It does not take weight into account.",[33,5104,2630],{},[42,5106,5107],{},[45,5108,5109,662,5112,662,5116,60,5119,54,5122,60,5125,60,5128,5131,5132,60,5135,54,5138,60,5141,60,5144,5147],{},[48,5110,1284],{"className":5111},[51,58],[48,5113,5115],{"className":5114},[51,173],"list",[48,5117,174],{"className":5118},[51,173],[48,5120,282],{"className":5121},[51,173],[48,5123,295],{"className":5124},[51,173],[48,5126,299],{"className":5127},[51,173],[48,5129,773],{"className":5130},[51,303]," ]) (",[48,5133,174],{"className":5134},[51,173],[48,5136,282],{"className":5137},[51,173],[48,5139,295],{"className":5140},[51,173],[48,5142,299],{"className":5143},[51,173],[48,5145,304],{"className":5146},[51,303]," ]))",[1173,5149,1176,5152,1176,5157,5168],{"className":5150,"id":5151},[1532],"bicomponent-clusters",[237,5153,1537,5155,1176],{"id":5154},"nwbicomponent-clusters",[16,5156,1230],{"href":1227},[1541,5158,5161],{"id":5159,"className":5160},"nwbicomponent-clusters-1",[14],[16,5162,1537,5165,1176],{"className":5163,"href":5164},[19],"#----nwbicomponent-clusters---1",[48,5166,1230],{"className":5167},[1552],[33,5169,5170,5171,5176],{},"Reports the list of ",[16,5172,5175],{"href":5173,"rel":5174},"https://en.wikipedia.org/wiki/Biconnected_component",[256],"bicomponent clusters"," in the current network context. A bicomponent (also known as a maximal biconnected subgraph) is a part of a network that cannot be disconnected by removing only one node (i.e. you need to remove at least two to disconnect it). The result is reported as a list of agentsets, in random order. Note that one turtle can be a member of more than one bicomponent at once.",[1173,5178,1176,5181,1176,5186,5197,5209],{"className":5179,"id":5180},[1532],"weak-component-clusters",[237,5182,1537,5184,1176],{"id":5183},"nwweak-component-clusters",[16,5185,1237],{"href":1234},[1541,5187,5190],{"id":5188,"className":5189},"nwweak-component-clusters-1",[14],[16,5191,1537,5194,1176],{"className":5192,"href":5193},[19],"#----nwweak-component-clusters---1",[48,5195,1237],{"className":5196},[1552],[33,5198,5199,5200,5204,5205,5208],{},"Reports the list of “weakly” ",[16,5201,5203],{"href":4842,"rel":5202},[256],"connected components"," in the current network context. A weakly connected component is simply a group of nodes where there is a path from each node to every other node. A “strongly” connected component would be one where there is a ",[37,5206,5207],{},"directed"," path from each node to every other. The extension does not support the identification of strongly connected components at the moment.",[33,5210,5211,5212,5215],{},"The result is reported as a list of agentsets, in random order. Note that one turtle ",[37,5213,5214],{},"cannot"," be a member of more than one weakly connected component at once.",[1173,5217,1176,5220,1176,5225,5236,5254,5257,5317,5320],{"className":5218,"id":5219},[1532],"louvain-communities",[237,5221,1537,5223,1176],{"id":5222},"nwlouvain-communities",[16,5224,1244],{"href":1241},[1541,5226,5229],{"id":5227,"className":5228},"nwlouvain-communities-1",[14],[16,5230,1537,5233,1176],{"className":5231,"href":5232},[19],"#----nwlouvain-communities---1",[48,5234,1244],{"className":5235},[1552],[33,5237,5238,5239,5247,5248,5253],{},"Detects community structure present in the network. It does this by maximizing ",[45,5240,5242],{"className":5241},[2831],[16,5243,5075],{"href":5244,"rel":5245,"className":5246,"dataDisplayText":5075,"target":2839,"title":5075},"/nw/modularity",[2836],[2838]," using the ",[16,5249,5252],{"href":5250,"rel":5251},"https://en.wikipedia.org/wiki/Louvain_Modularity",[256],"Louvain method",". The communities are reported as a list of turtle-sets.",[33,5255,5256],{},"Often you’ll want to tell turtles about the community that they are in. You can do this like so:",[42,5258,5259],{},[45,5260,5261,54,5265,65,5269,5271,5273,5277,5279,5281,60,5285,5288,5289,5293,5294,5298,607,5300,60,5303,54,5306,60,5309,60,5312,65,5315,631],{},[48,5262,5264],{"className":5263},[51,52],"turtles-own",[48,5266,5268],{"className":5267},[51,58],"community",[70,5270],{},[70,5272],{},[48,5274,5276],{"className":5275},[51,58],"...",[70,5278],{},[70,5280],{},[48,5282,5284],{"className":5283},[51,328],"foreach",[48,5286,1244],{"className":5287},[51,58]," [ [",[48,5290,5292],{"className":5291},[51,58],"comm","] ",[48,5295,5297],{"className":5296},[51,173],"->",[70,5299],{},[48,5301,468],{"className":5302},[51,328],[48,5304,5292],{"className":5305},[51,58],[48,5307,622],{"className":5308},[51,328],[48,5310,5268],{"className":5311},[51,58],[48,5313,5292],{"className":5314},[51,58],[70,5316],{},[33,5318,5319],{},"You can give each community its own color with something like this:",[42,5321,5322],{},[45,5323,5324,60,5327,60,5331,5334,5336,60,5339,60,5343,60,5347,662,5350,60,5354,5357,5358,5362,2763,5364,60,5367,60,5370,5288,5373,60,5376,5293,5380,5383,607,5385,60,5388,54,5391,60,5394,60,5397,65,5400,5402],{},[48,5325,2180],{"className":5326},[51,328],[48,5328,5330],{"className":5329},[51,58],"communities",[48,5332,1244],{"className":5333},[51,58],[70,5335],{},[48,5337,2180],{"className":5338},[51,328],[48,5340,5342],{"className":5341},[51,58],"colors",[48,5344,5346],{"className":5345},[51,173],"sublist",[48,5348,412],{"className":5349},[51,339],[48,5351,5353],{"className":5352},[51,173],"length",[48,5355,5330],{"className":5356},[51,58],") ",[48,5359,5361],{"className":5360},[51,173],"base-colors",[70,5363],{},[48,5365,5284],{"className":5366},[51,328],[48,5368,5330],{"className":5369},[51,58],[48,5371,5342],{"className":5372},[51,58],[48,5374,5268],{"className":5375},[51,58],[48,5377,5379],{"className":5378},[51,58],"col",[48,5381,5297],{"className":5382},[51,173],[70,5384],{},[48,5386,468],{"className":5387},[51,328],[48,5389,5268],{"className":5390},[51,58],[48,5392,622],{"className":5393},[51,328],[48,5395,295],{"className":5396},[51,173],[48,5398,5379],{"className":5399},[51,58],[70,5401],{},"])",[1173,5404,1176,5407,1176,5412,5423,5432,5435],{"className":5405,"id":5406},[1532],"maximal-cliques",[237,5408,1537,5410,1176],{"id":5409},"nwmaximal-cliques",[16,5411,1251],{"href":1248},[1541,5413,5416],{"id":5414,"className":5415},"nwmaximal-cliques-1",[14],[16,5417,1537,5420,1176],{"className":5418,"href":5419},[19],"#----nwmaximal-cliques---1",[48,5421,1251],{"className":5422},[1552],[33,5424,5425,5426,5431],{},"A ",[16,5427,5430],{"href":5428,"rel":5429},"https://en.wikipedia.org/wiki/Clique_%28graph_theory%29",[256],"clique"," is a subset of a network in which every node has a direct link to every other node. A maximal clique is a clique that is not, itself, contained in a bigger clique.",[33,5433,5434],{},"The result is reported as a list of agentsets, in random order. Note that one turtle can be a member of more than one maximal clique at once.",[33,5436,5437,5438,5443],{},"The primitive uses the ",[16,5439,5442],{"href":5440,"rel":5441},"https://en.wikipedia.org/wiki/Bron%E2%80%93Kerbosch_algorithm",[256],"Bron–Kerbosch algorithm"," and only works with undirected links.",[1173,5445,1176,5448,1176,5453,5464,5480],{"className":5446,"id":5447},[1532],"biggest-maximal-cliques",[237,5449,1537,5451,1176],{"id":5450},"nwbiggest-maximal-cliques",[16,5452,1258],{"href":1255},[1541,5454,5457],{"id":5455,"className":5456},"nwbiggest-maximal-cliques-1",[14],[16,5458,1537,5461,1176],{"className":5459,"href":5460},[19],"#----nwbiggest-maximal-cliques---1",[48,5462,1258],{"className":5463},[1552],[33,5465,5466,5467,5471,5472,258],{},"The biggest maximal cliques are, as the name implies, the biggest ",[16,5468,5470],{"href":5428,"rel":5469},[256],"cliques"," in the current context. Often, more than one clique are tied for the title of biggest clique, so the result is reported as a list of agentsets, in random order. If you want only one clique, use ",[45,5473,5474,60,5477],{},[48,5475,472],{"className":5476},[51,173],[48,5478,1258],{"className":5479},[51,58],[33,5481,5437,5482,5443],{},[16,5483,5442],{"href":5440,"rel":5484},[256],[1173,5486,1176,5489,1176,5494,5521,5530,5539,5545],{"className":5487,"id":5488},[1532],"generate-preferential-attachment",[237,5490,1537,5492,1176],{"id":5491},"nwgenerate-preferential-attachment",[16,5493,1334],{"href":1331},[1541,5495,5498],{"id":5496,"className":5497},"nwgenerate-preferential-attachment-turtle-breed-link-breed-num-nodes-min-degree-optional-command-block",[14],[16,5499,1537,5502,1176],{"className":5500,"href":5501},[19],"#----nwgenerate-preferential-attachment-turtle-breed-link-breed-num-nodes-min-degree-optional-command-block--",[48,5503,5505,5506,60,5509,60,5512,60,5515,60,5518],{"className":5504},[1552],"nw:generate-preferential-attachment ",[1555,5507,5508],{},"turtle-breed",[1555,5510,5511],{},"link-breed",[1555,5513,5514],{},"num-nodes",[1555,5516,5517],{},"min-degree",[1555,5519,5520],{},"optional-command-block",[33,5522,5523,5524,5529],{},"Generates a new network using a version of the ",[16,5525,5528],{"href":5526,"rel":5527},"https://en.wikipedia.org/wiki/Barab%C3%A1si%E2%80%93Albert_model",[256],"Barabási–Albert"," algorithm. This network will have the property of being “scale free”: the distribution of degrees (i.e. the number of links for each turtle) should follow a power law.",[33,5531,5532,5533,5535,5536,5538],{},"Generation works as follows turtles are added, one by one, each forming ",[45,5534,5517],{}," links to a previously added turtles, until ",[45,5537,5514],{}," is reached.\nThe more links a turtle already has, the greater the probability that new turtles form links with it when they are added.",[33,5540,5541,5542,5544],{},"If you specify an ",[45,5543,5520],{},", it is executed for each turtle in the newly created network. For example:",[42,5546,5547],{},[45,5548,5549,60,5552,60,5555,60,5558,60,5562,54,5565,60,5568,60,5571,65],{},[48,5550,1334],{"className":5551},[51,58],[48,5553,174],{"className":5554},[51,173],[48,5556,178],{"className":5557},[51,173],[48,5559,5561],{"className":5560},[51,339],"100",[48,5563,420],{"className":5564},[51,339],[48,5566,622],{"className":5567},[51,328],[48,5569,295],{"className":5570},[51,173],[48,5572,304],{"className":5573},[51,303],[1173,5575,1176,5578,1176,5583,5606,5624,5627,5631],{"className":5576,"id":5577},[1532],"generate-random",[237,5579,1537,5581,1176],{"id":5580},"nwgenerate-random",[16,5582,1341],{"href":1338},[1541,5584,5587],{"id":5585,"className":5586},"nwgenerate-random-turtle-breed-link-breed-num-nodes-connection-probability-optional-command-block",[14],[16,5588,1537,5591,1176],{"className":5589,"href":5590},[19],"#----nwgenerate-random-turtle-breed-link-breed-num-nodes-connection-probability-optional-command-block--",[48,5592,5594,5595,60,5597,60,5599,60,5601,60,5604],{"className":5593},[1552],"nw:generate-random ",[1555,5596,5508],{},[1555,5598,5511],{},[1555,5600,5514],{},[1555,5602,5603],{},"connection-probability",[1555,5605,5520],{},[33,5607,5608,5609,5611,5612,5614,5615,5618,5619,258],{},"Generates a new random network of ",[37,5610,5514],{}," turtles in which each one has a  ",[37,5613,5603],{}," (between 0 and 1) of being connected to each other turtles. The algorithm uses the ",[37,5616,5617],{},"G(n, p)"," variant of the ",[16,5620,5623],{"href":5621,"rel":5622},"https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model",[256],"Erdős–Rényi model",[33,5625,5626],{},"The algorithm is O(n²) for directed networks and O(n²/2) for undirected networks, so generating more than a couple thousand nodes will likely take a very long time.",[33,5628,5541,5629,5544],{},[37,5630,5520],{},[42,5632,5633],{},[45,5634,5635,60,5638,60,5641,60,5644,60,5647,54,5650,60,5653,60,5656,65],{},[48,5636,1341],{"className":5637},[51,58],[48,5639,174],{"className":5640},[51,173],[48,5642,178],{"className":5643},[51,173],[48,5645,5561],{"className":5646},[51,339],[48,5648,3208],{"className":5649},[51,339],[48,5651,622],{"className":5652},[51,328],[48,5654,295],{"className":5655},[51,173],[48,5657,304],{"className":5658},[51,303],[1173,5660,1176,5663,1176,5668,5694,5702,5711,5720],{"className":5661,"id":5662},[1532],"generate-watts-strogatz",[237,5664,1537,5666,1176],{"id":5665},"nwgenerate-watts-strogatz",[16,5667,1348],{"href":1345},[1541,5669,5672],{"id":5670,"className":5671},"nwgenerate-watts-strogatz-turtle-breed-link-breed-num-nodes-neighborhood-size-rewire-probability-optional-command-block",[14],[16,5673,1537,5676,1176],{"className":5674,"href":5675},[19],"#----nwgenerate-watts-strogatz-turtle-breed-link-breed-num-nodes-neighborhood-size-rewire-probability-optional-command-block--",[48,5677,5679,5680,60,5682,60,5684,60,5686,60,5689,60,5692],{"className":5678},[1552],"nw:generate-watts-strogatz ",[1555,5681,5508],{},[1555,5683,5511],{},[1555,5685,5514],{},[1555,5687,5688],{},"neighborhood-size",[1555,5690,5691],{},"rewire-probability",[1555,5693,5520],{},[33,5695,5696,5697,258],{},"Generates a new ",[16,5698,5701],{"href":5699,"rel":5700},"https://en.wikipedia.org/wiki/Watts_and_Strogatz_model",[256],"Watts-Strogatz small-world network",[33,5703,5704,5705,5707,5708,258],{},"The algorithm begins by creating a ring of nodes, where each node is connected to ",[45,5706,5688],{}," nodes on either side. Then, each link is rewired with probability ",[45,5709,5710],{},"rewire-prob",[33,5712,5541,5713,5715,5716,5719],{},[37,5714,5520],{},", it is executed for each turtle in the newly created network. Furthermore, the turtles are generated in the order they appear as in ",[45,5717,5718],{},"create-ordered-turtles",". So, in order to lay the ring out as a ring, you can do something like:",[42,5721,5722],{},[45,5723,5724,60,5727,60,5730,60,5733,60,5737,60,5740,54,5744,60,5748,65],{},[48,5725,1348],{"className":5726},[51,58],[48,5728,174],{"className":5729},[51,173],[48,5731,178],{"className":5732},[51,173],[48,5734,5736],{"className":5735},[51,339],"50",[48,5738,427],{"className":5739},[51,339],[48,5741,5743],{"className":5742},[51,339],"0.1",[48,5745,5747],{"className":5746},[51,328],"fd",[48,5749,5751],{"className":5750},[51,339],"10",[1173,5753,1176,5756,1176,5761,5791,5810,5826,5830,5864,5867],{"className":5754,"id":5755},[1532],"generate-small-world",[237,5757,1537,5759,1176],{"id":5758},"nwgenerate-small-world",[16,5760,1355],{"href":1352},[1541,5762,5765],{"id":5763,"className":5764},"nwgenerate-small-world-turtle-breed-link-breed-row-count-column-count-clustering-exponent-is-toroidal-optional-command-block",[14],[16,5766,1537,5769,1176],{"className":5767,"href":5768},[19],"#----nwgenerate-small-world-turtle-breed-link-breed-row-count-column-count-clustering-exponent-is-toroidal-optional-command-block--",[48,5770,5772,5773,60,5775,60,5777,60,5780,60,5783,60,5786,60,5789],{"className":5771},[1552],"nw:generate-small-world ",[1555,5774,5508],{},[1555,5776,5511],{},[1555,5778,5779],{},"row-count",[1555,5781,5782],{},"column-count",[1555,5784,5785],{},"clustering-exponent",[1555,5787,5788],{},"is-toroidal",[1555,5790,5520],{},[33,5792,5696,5793,5247,5798,5803,5804,5809],{},[16,5794,5797],{"href":5795,"rel":5796},"https://en.wikipedia.org/wiki/Small-world_network",[256],"small-world network",[16,5799,5802],{"href":5800,"rel":5801},"https://en.wikipedia.org/wiki/Small_world_routing#The_Kleinberg_Model",[256],"Kleinberg Model",". Note that ",[16,5805,5807],{"href":5806},"/nw/generate-watts-strogatz",[45,5808,1348],{}," generates a more traditional small-world network.",[33,5811,5812,5813,5815,5816,5819,5820,5822,5823,5825],{},"The algorithm proceeds by generating a lattice of the given number of rows and columns (the lattice will wrap around itself if ",[37,5814,5788],{}," is ",[45,5817,5818],{},"true","). The “small world effect” is created by adding additional links between the nodes in the lattice. The higher the ",[37,5821,5785],{},", the more the algorithm will favor already close-by nodes when adding new links. A clustering exponent of ",[45,5824,3148],{}," is typically used.",[33,5827,5541,5828,5544],{},[37,5829,5520],{},[42,5831,5832],{},[45,5833,5834,60,5837,60,5840,60,5843,60,5846,60,5849,60,5852,54,5855,60,5858,60,5861,65],{},[48,5835,1355],{"className":5836},[51,58],[48,5838,174],{"className":5839},[51,173],[48,5841,178],{"className":5842},[51,173],[48,5844,5751],{"className":5845},[51,339],[48,5847,5751],{"className":5848},[51,339],[48,5850,3148],{"className":5851},[51,339],[48,5853,3348],{"className":5854},[51,303],[48,5856,622],{"className":5857},[51,328],[48,5859,295],{"className":5860},[51,173],[48,5862,304],{"className":5863},[51,303],[33,5865,5866],{},"The turtles are generated in the order that they appear in the lattice. So, for instance, to generate a kleinberg lattice accross the entire world, and lay it out accordingly, try the following:",[42,5868,5869],{},[45,5870,5871,60,5874,60,5877,60,5880,60,5884,60,5888,60,5891,5894,2763,5896,662,5899,60,5902,413,5905,60,5908,5912,5913,60,5917,5293,5920,60,5923,60,5926,54,5929,60,5933,5936],{},[48,5872,1355],{"className":5873},[51,58],[48,5875,174],{"className":5876},[51,173],[48,5878,178],{"className":5879},[51,173],[48,5881,5883],{"className":5882},[51,173],"world-width",[48,5885,5887],{"className":5886},[51,173],"world-height",[48,5889,3148],{"className":5890},[51,339],[48,5892,3348],{"className":5893},[51,303],[70,5895],{},[48,5897,5284],{"className":5898},[51,328],[48,5900,393],{"className":5901},[51,173],[48,5903,174],{"className":5904},[51,173],[48,5906,393],{"className":5907},[51,173],[48,5909,5911],{"className":5910},[51,173],"patches",") [ [",[48,5914,5916],{"className":5915},[51,58],"t",[48,5918,33],{"className":5919},[51,58],[48,5921,5297],{"className":5922},[51,173],[48,5924,468],{"className":5925},[51,328],[48,5927,5916],{"className":5928},[51,58],[48,5930,5932],{"className":5931},[51,328],"move-to",[48,5934,33],{"className":5935},[51,58]," ] ])",[1173,5938,1176,5941,1176,5946,5970,5989,5993,6024,6027],{"className":5939,"id":5940},[1532],"generate-lattice-2d",[237,5942,1537,5944,1176],{"id":5943},"nwgenerate-lattice-2d",[16,5945,1362],{"href":1359},[1541,5947,5950],{"id":5948,"className":5949},"nwgenerate-lattice-2d-turtle-breed-link-breed-row-count-column-count-is-toroidal-optional-command-block",[14],[16,5951,1537,5954,1176],{"className":5952,"href":5953},[19],"#----nwgenerate-lattice-2d-turtle-breed-link-breed-row-count-column-count-is-toroidal-optional-command-block--",[48,5955,5957,5958,60,5960,60,5962,60,5964,60,5966,60,5968],{"className":5956},[1552],"nw:generate-lattice-2d ",[1555,5959,5508],{},[1555,5961,5511],{},[1555,5963,5779],{},[1555,5965,5782],{},[1555,5967,5788],{},[1555,5969,5520],{},[33,5971,5972,5973,5978,5979,5981,5982,5984,5985,5815,5987,258],{},"Generates a new 2D ",[16,5974,5977],{"href":5975,"rel":5976},"https://en.wikipedia.org/wiki/Lattice_graph",[256],"lattice network"," (basically, a grid) of ",[37,5980,5779],{}," rows and ",[37,5983,5782],{}," columns. The grid will wrap around itself if ",[37,5986,5788],{},[45,5988,5818],{},[33,5990,5541,5991,5544],{},[37,5992,5520],{},[42,5994,5995],{},[45,5996,5997,60,6000,60,6003,60,6006,60,6009,60,6012,54,6015,60,6018,60,6021,65],{},[48,5998,1362],{"className":5999},[51,58],[48,6001,174],{"className":6002},[51,173],[48,6004,178],{"className":6005},[51,173],[48,6007,5751],{"className":6008},[51,339],[48,6010,5751],{"className":6011},[51,339],[48,6013,3348],{"className":6014},[51,303],[48,6016,622],{"className":6017},[51,328],[48,6019,295],{"className":6020},[51,173],[48,6022,304],{"className":6023},[51,303],[33,6025,6026],{},"The turtles are generated in the order that they appear in the lattice. So, for instance, to generate a lattice accross the entire world, and lay it out accordingly, try the following:",[42,6028,6029],{},[45,6030,6031,60,6034,60,6037,60,6040,60,6043,60,6046,6049,2763,6051,662,6054,60,6057,413,6060,60,6063,5912,6066,60,6069,5293,6072,60,6075,60,6078,54,6081,60,6084,5936],{},[48,6032,1362],{"className":6033},[51,58],[48,6035,174],{"className":6036},[51,173],[48,6038,178],{"className":6039},[51,173],[48,6041,5883],{"className":6042},[51,173],[48,6044,5887],{"className":6045},[51,173],[48,6047,3348],{"className":6048},[51,303],[70,6050],{},[48,6052,5284],{"className":6053},[51,328],[48,6055,393],{"className":6056},[51,173],[48,6058,174],{"className":6059},[51,173],[48,6061,393],{"className":6062},[51,173],[48,6064,5911],{"className":6065},[51,173],[48,6067,5916],{"className":6068},[51,58],[48,6070,33],{"className":6071},[51,58],[48,6073,5297],{"className":6074},[51,173],[48,6076,468],{"className":6077},[51,328],[48,6079,5916],{"className":6080},[51,58],[48,6082,5932],{"className":6083},[51,328],[48,6085,33],{"className":6086},[51,58],[1173,6088,1176,6091,1176,6096,6116,6128,6131,6135],{"className":6089,"id":6090},[1532],"generate-ring",[237,6092,1537,6094,1176],{"id":6093},"nwgenerate-ring",[16,6095,1369],{"href":1366},[1541,6097,6100],{"id":6098,"className":6099},"nwgenerate-ring-turtle-breed-link-breed-num-nodes-optional-command-block",[14],[16,6101,1537,6104,1176],{"className":6102,"href":6103},[19],"#----nwgenerate-ring-turtle-breed-link-breed-num-nodes-optional-command-block--",[48,6105,6107,6108,60,6110,60,6112,60,6114],{"className":6106},[1552],"nw:generate-ring ",[1555,6109,5508],{},[1555,6111,5511],{},[1555,6113,5514],{},[1555,6115,5520],{},[33,6117,6118,6119,6124,6125,6127],{},"Generates a ",[16,6120,6123],{"href":6121,"rel":6122},"https://en.wikipedia.org/wiki/Ring_network",[256],"ring network"," of ",[37,6126,5514],{}," turtles, in which each turtle is connected to exactly two other turtles.",[33,6129,6130],{},"The number of nodes must be at least three.",[33,6132,5541,6133,5544],{},[37,6134,5520],{},[42,6136,6137],{},[45,6138,6139,60,6142,60,6145,60,6148,54,6151,60,6154,60,6157,65],{},[48,6140,1369],{"className":6141},[51,58],[48,6143,174],{"className":6144},[51,173],[48,6146,178],{"className":6147},[51,173],[48,6149,5561],{"className":6150},[51,339],[48,6152,622],{"className":6153},[51,328],[48,6155,295],{"className":6156},[51,173],[48,6158,304],{"className":6159},[51,303],[1173,6161,1176,6164,1176,6169,6189,6197,6201],{"className":6162,"id":6163},[1532],"generate-star",[237,6165,1537,6167,1176],{"id":6166},"nwgenerate-star",[16,6168,1376],{"href":1373},[1541,6170,6173],{"id":6171,"className":6172},"nwgenerate-star-turtle-breed-link-breed-num-nodes-optional-command-block",[14],[16,6174,1537,6177,1176],{"className":6175,"href":6176},[19],"#----nwgenerate-star-turtle-breed-link-breed-num-nodes-optional-command-block--",[48,6178,6180,6181,60,6183,60,6185,60,6187],{"className":6179},[1552],"nw:generate-star ",[1555,6182,5508],{},[1555,6184,5511],{},[1555,6186,5514],{},[1555,6188,5520],{},[33,6190,6118,6191,6196],{},[16,6192,6195],{"href":6193,"rel":6194},"https://en.wikipedia.org/wiki/Star_graph",[256],"star network"," in which there is one central turtle and every other turtle is connected only to this central node. The number of turtles can be as low as one, but it won’t look much like a star.",[33,6198,5541,6199,5544],{},[37,6200,5520],{},[42,6202,6203],{},[45,6204,6205,60,6208,60,6211,60,6214,54,6217,60,6220,60,6223,65],{},[48,6206,1376],{"className":6207},[51,58],[48,6209,174],{"className":6210},[51,173],[48,6212,178],{"className":6213},[51,173],[48,6215,5561],{"className":6216},[51,339],[48,6218,622],{"className":6219},[51,328],[48,6221,295],{"className":6222},[51,173],[48,6224,304],{"className":6225},[51,303],[1173,6227,1176,6230,1176,6235,6255,6258,6270,6282,6285,6305,6309],{"className":6228,"id":6229},[1532],"generate-wheel",[237,6231,1537,6233,1176],{"id":6232},"nwgenerate-wheel",[16,6234,1383],{"href":1380},[1541,6236,6239],{"id":6237,"className":6238},"nwgenerate-wheel-turtle-breed-link-breed-num-nodes-optional-command-block",[14],[16,6240,1537,6243,1176],{"className":6241,"href":6242},[19],"#----nwgenerate-wheel-turtle-breed-link-breed-num-nodes-optional-command-block--",[48,6244,6246,6247,60,6249,60,6251,60,6253],{"className":6245},[1552],"nw:generate-wheel ",[1555,6248,5508],{},[1555,6250,5511],{},[1555,6252,5514],{},[1555,6254,5520],{},[33,6256,6257],{},"Variants:",[160,6259,6260,6265],{},[163,6261,6262],{},[45,6263,6264],{},"nw:generate-wheel-inward",[163,6266,6267],{},[45,6268,6269],{},"nw:generate-wheel-outward",[33,6271,6118,6272,6277,6278,6281],{},[16,6273,6276],{"href":6274,"rel":6275},"https://en.wikipedia.org/wiki/Wheel_graph",[256],"wheel network",", which is basically a ",[16,6279,6123],{"href":6121,"rel":6280},[256]," with an additional “central” turtle that is connected to every other turtle.",[33,6283,6284],{},"The number of nodes must be at least four.",[33,6286,4749,6287,6289,6290,136,6292,6294,6295,6297,6298,136,6301,6304],{},[45,6288,1383],{}," only works with undirected link breeds. The ",[45,6291,6264],{},[45,6293,6269],{}," versions only work with directed ",[37,6296,5511],{},". The ",[45,6299,6300],{},"inward",[45,6302,6303],{},"outward"," part of the primitive names refer to the direction that the “spokes” of the wheel point to relative to the central turtle.",[33,6306,5541,6307,5544],{},[37,6308,5520],{},[42,6310,6311],{},[45,6312,6313,60,6316,60,6319,60,6322,54,6325,60,6328,60,6331,65],{},[48,6314,1383],{"className":6315},[51,58],[48,6317,174],{"className":6318},[51,173],[48,6320,178],{"className":6321},[51,173],[48,6323,5561],{"className":6324},[51,339],[48,6326,622],{"className":6327},[51,328],[48,6329,295],{"className":6330},[51,173],[48,6332,304],{"className":6333},[51,303],[1173,6335,1176,6338,1176,6343,6358,6367,6370,6430,6433,6491],{"className":6336,"id":6337},[1532],"save-matrix",[237,6339,1537,6341,1176],{"id":6340},"nwsave-matrix",[16,6342,1402],{"href":1399},[1541,6344,6347],{"id":6345,"className":6346},"nwsave-matrix-file-name",[14],[16,6348,1537,6351,1176],{"className":6349,"href":6350},[19],"#----nwsave-matrix-file-name--",[48,6352,6354,6355],{"className":6353},[1552],"nw:save-matrix ",[1555,6356,6357],{},"file-name",[33,6359,6360,6361,6363,6364,6366],{},"Saves the current network, as defined by ",[45,6362,150],{},", to ",[37,6365,6357],{},", as a text file, in the form of a simple connection matrix.",[33,6368,6369],{},"Here is, for example, a undirected ring network with four nodes:",[42,6371,6372],{},[45,6373,6374,60,6378,60,6382,60,6385,6388,6390,60,6393,60,6396,60,6399,6402,6404,60,6407,60,6410,60,6413,6416,6418,60,6421,60,6424,60,6427],{},[48,6375,6377],{"className":6376},[51,339],"0.00",[48,6379,6381],{"className":6380},[51,339],"1.00",[48,6383,6377],{"className":6384},[51,339],[48,6386,6381],{"className":6387},[51,339],[70,6389],{},[48,6391,6381],{"className":6392},[51,339],[48,6394,6377],{"className":6395},[51,339],[48,6397,6381],{"className":6398},[51,339],[48,6400,6377],{"className":6401},[51,339],[70,6403],{},[48,6405,6377],{"className":6406},[51,339],[48,6408,6381],{"className":6409},[51,339],[48,6411,6377],{"className":6412},[51,339],[48,6414,6381],{"className":6415},[51,339],[70,6417],{},[48,6419,6381],{"className":6420},[51,339],[48,6422,6377],{"className":6423},[51,339],[48,6425,6381],{"className":6426},[51,339],[48,6428,6377],{"className":6429},[51,339],[33,6431,6432],{},"And here is the directed version:",[42,6434,6435],{},[45,6436,6437,60,6440,60,6443,60,6446,6449,6451,60,6454,60,6457,60,6460,6463,6465,60,6468,60,6471,60,6474,6477,6479,60,6482,60,6485,60,6488],{},[48,6438,6377],{"className":6439},[51,339],[48,6441,6381],{"className":6442},[51,339],[48,6444,6377],{"className":6445},[51,339],[48,6447,6377],{"className":6448},[51,339],[70,6450],{},[48,6452,6377],{"className":6453},[51,339],[48,6455,6377],{"className":6456},[51,339],[48,6458,6381],{"className":6459},[51,339],[48,6461,6377],{"className":6462},[51,339],[70,6464],{},[48,6466,6377],{"className":6467},[51,339],[48,6469,6377],{"className":6470},[51,339],[48,6472,6377],{"className":6473},[51,339],[48,6475,6381],{"className":6476},[51,339],[70,6478],{},[48,6480,6381],{"className":6481},[51,339],[48,6483,6377],{"className":6484},[51,339],[48,6486,6377],{"className":6487},[51,339],[48,6489,6377],{"className":6490},[51,339],[33,6492,6493,6494,6496],{},"At the moment, ",[45,6495,1402],{}," does not support link weights. Every link is represented as a “1.00” in the connection matrix. This will change in a future version of the extension.",[1173,6498,1176,6501,1176,6506,6526,6537,6542,6545,6547,6658,6669,6673],{"className":6499,"id":6500},[1532],"load-matrix",[237,6502,1537,6504,1176],{"id":6503},"nwload-matrix",[16,6505,1409],{"href":1406},[1541,6507,6510],{"id":6508,"className":6509},"nwload-matrix-file-name-turtle-breed-link-breed-optional-command-block",[14],[16,6511,1537,6514,1176],{"className":6512,"href":6513},[19],"#----nwload-matrix-file-name-turtle-breed-link-breed-optional-command-block--",[48,6515,6517,6518,60,6520,60,6522,60,6524],{"className":6516},[1552],"nw:load-matrix ",[1555,6519,6357],{},[1555,6521,5508],{},[1555,6523,5511],{},[1555,6525,5520],{},[33,6527,6528,6529,6531,6532,136,6534,6536],{},"Generates a new network according to the connection matrix saved in ",[37,6530,6357],{},", using ",[37,6533,5508],{},[37,6535,5511],{}," to create the new turtles and links.",[33,6538,6493,6539,6541],{},[45,6540,1409],{}," does not support link weights.",[33,6543,6544],{},"Please be aware that the breeds used to load the matrix may be different from those that you used when you saved it.",[33,6546,2428],{},[42,6548,6549],{},[45,6550,6551,54,6554,65,6557,54,6562,60,6566,65,6570,60,6575,6578,607,6580,6583,607,6585,60,6588,54,6591,60,6595,60,6598,65,6601,607,6603,60,6606,60,6609,6612,607,6614,60,6617,6622,607,6624,6627,607,6629,60,6632,60,6635,60,6638,6641,607,6643,60,6647,60,6650,6653],{},[48,6552,1984],{"className":6553},[51,52],[48,6555,1988],{"className":6556},[51,58],[48,6558,6560,101],{"className":6559},[51,52],[70,6561],{},[48,6563,6565],{"className":6564},[51,58],"dirlinks",[48,6567,6569],{"className":6568},[51,58],"dirlink",[48,6571,6573,1994],{"className":6572},[51,52],[70,6574],{},[48,6576,2887],{"className":6577},[51,58],[70,6579],{},[48,6581,329],{"className":6582},[51,328],[70,6584],{},[48,6586,1675],{"className":6587},[51,328],[48,6589,2646],{"className":6590},[51,339],[48,6592,6594],{"className":6593},[51,58],"create-dirlinks-to",[48,6596,348],{"className":6597},[51,173],[48,6599,174],{"className":6600},[51,173],[70,6602],{},[48,6604,150],{"className":6605},[51,58],[48,6607,174],{"className":6608},[51,173],[48,6610,6565],{"className":6611},[51,58],[70,6613],{},[48,6615,1402],{"className":6616},[51,58],[48,6618,6621],{"className":6619},[51,6620],"string","\"matrix.txt\"",[70,6623],{},[48,6625,329],{"className":6626},[51,328],[70,6628],{},[48,6630,1409],{"className":6631},[51,58],[48,6633,6621],{"className":6634},[51,6620],[48,6636,174],{"className":6637},[51,173],[48,6639,178],{"className":6640},[51,173],[70,6642],{},[48,6644,6646],{"className":6645},[51,328],"layout-circle",[48,6648,174],{"className":6649},[51,173],[48,6651,5751],{"className":6652},[51,339],[48,6654,6656,2292],{"className":6655},[51,52],[70,6657],{},[33,6659,6660,6661,6664,6665,6668],{},"…",[37,6662,6663],{},"will"," give you back ",[141,6666,6667],{},"undirected"," links, even if you saved directed links into the matrix.",[33,6670,5541,6671,5544],{},[37,6672,5520],{},[42,6674,6675],{},[45,6676,6677,60,6680,60,6683,60,6686,54,6689,60,6692,60,6695,65],{},[48,6678,1409],{"className":6679},[51,58],[48,6681,6621],{"className":6682},[51,6620],[48,6684,174],{"className":6685},[51,173],[48,6687,178],{"className":6688},[51,173],[48,6690,622],{"className":6691},[51,328],[48,6693,295],{"className":6694},[51,173],[48,6696,304],{"className":6697},[51,303],[1173,6699,1176,6702,1176,6707,6721,6724,6938,6941,7468,7471],{"className":6700,"id":6701},[1532],"save-graphml",[237,6703,1537,6705,1176],{"id":6704},"nwsave-graphml",[16,6706,1416],{"href":1413},[1541,6708,6711],{"id":6709,"className":6710},"nwsave-graphml-file-name",[14],[16,6712,1537,6715,1176],{"className":6713,"href":6714},[19],"#----nwsave-graphml-file-name--",[48,6716,6718,6719],{"className":6717},[1552],"nw:save-graphml ",[1555,6720,6357],{},[33,6722,6723],{},"You can save the current graph to GraphML. The following NetLogo code:",[42,6725,6726],{},[45,6727,6728,54,6731,65,6734,6736,54,6741,60,6744,65,6747,54,6753,65,6757,54,6762,60,6765,65,6768,54,6774,65,6778,6780,54,6785,60,6788,65,6791,6793,54,6798,60,6801,65,6804,54,6810,65,6814,6816,60,6821,6824,607,6826,6829,607,6831,60,6835,604,6838,2014,6840,60,6843,60,6846,6850,2066,6852,607,6854,60,6858,604,6861,2014,6863,60,6866,60,6869,6873,2014,6875,60,6879,60,6882,6885,2014,6887,60,6891,60,6894,604,6897,2050,6899,60,6902,60,6905,6909,2063,6911,2066,6913,607,6915,60,6918,60,6921,6924,607,6926,60,6929,6933],{},[48,6729,1984],{"className":6730},[51,52],[48,6732,1988],{"className":6733},[51,58],[70,6735],{},[48,6737,6739,53],{"className":6738},[51,52],[70,6740],{},[48,6742,59],{"className":6743},[51,58],[48,6745,64],{"className":6746},[51,58],[48,6748,6750,6752],{"className":6749},[51,52],[70,6751],{},"bankers-own",[48,6754,6756],{"className":6755},[51,58],"bank-name",[48,6758,6760,53],{"className":6759},[51,52],[70,6761],{},[48,6763,75],{"className":6764},[51,58],[48,6766,79],{"className":6767},[51,58],[48,6769,6771,6773],{"className":6770},[51,52],[70,6772],{},"clients-own",[48,6775,6777],{"className":6776},[51,58],"hometown",[70,6779],{},[48,6781,6783,87],{"className":6782},[51,52],[70,6784],{},[48,6786,91],{"className":6787},[51,58],[48,6789,95],{"className":6790},[51,58],[70,6792],{},[48,6794,6796,101],{"className":6795},[51,52],[70,6797],{},[48,6799,105],{"className":6800},[51,58],[48,6802,109],{"className":6803},[51,58],[48,6805,6807,6809],{"className":6806},[51,52],[70,6808],{},"accounts-own",[48,6811,6813],{"className":6812},[51,58],"amount",[70,6815],{},[48,6817,6819,1994],{"className":6818},[51,52],[70,6820],{},[48,6822,2887],{"className":6823},[51,58],[70,6825],{},[48,6827,329],{"className":6828},[51,328],[70,6830],{},[48,6832,6834],{"className":6833},[51,58],"create-bankers",[48,6836,420],{"className":6837},[51,339],[70,6839],{},[48,6841,622],{"className":6842},[51,328],[48,6844,6756],{"className":6845},[51,58],[48,6847,6849],{"className":6848},[51,6620],"\"The Bank\"",[70,6851],{},[70,6853],{},[48,6855,6857],{"className":6856},[51,58],"create-clients",[48,6859,420],{"className":6860},[51,339],[70,6862],{},[48,6864,622],{"className":6865},[51,328],[48,6867,6777],{"className":6868},[51,58],[48,6870,6872],{"className":6871},[51,6620],"\"Turtle City\"",[70,6874],{},[48,6876,6878],{"className":6877},[51,58],"create-friendship-with",[48,6880,64],{"className":6881},[51,58],[48,6883,412],{"className":6884},[51,339],[70,6886],{},[48,6888,6890],{"className":6889},[51,58],"create-account-to",[48,6892,64],{"className":6893},[51,58],[48,6895,412],{"className":6896},[51,339],[70,6898],{},[48,6900,622],{"className":6901},[51,328],[48,6903,6813],{"className":6904},[51,58],[48,6906,6908],{"className":6907},[51,339],"9999.99",[70,6910],{},[70,6912],{},[70,6914],{},[48,6916,150],{"className":6917},[51,58],[48,6919,174],{"className":6920},[51,173],[48,6922,178],{"className":6923},[51,173],[70,6925],{},[48,6927,1416],{"className":6928},[51,58],[48,6930,6932],{"className":6931},[51,6620],"\"example.graphml\"",[48,6934,6936,2292],{"className":6935},[51,52],[70,6937],{},[33,6939,6940],{},"Will produce the following GraphML file:",[42,6942,6947],{"className":6943,"code":6944,"language":6945,"meta":6946,"style":6946},"language-XML shiki shiki-themes material-theme-lighter github-light github-dark","\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\u003Cgraphml xmlns=\"http://graphml.graphdrawing.org/xmlns/graphml\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns/graphml\">\n\u003Ckey id=\"PEN-MODE\" for=\"node\" attr.name=\"PEN-MODE\" attr.type=\"string\"/>\n\u003Ckey id=\"YCOR\" for=\"node\" attr.name=\"YCOR\" attr.type=\"double\"/>\n\u003Ckey id=\"PEN-SIZE\" for=\"node\" attr.name=\"PEN-SIZE\" attr.type=\"double\"/>\n\u003Ckey id=\"LABEL\" for=\"node\" attr.name=\"LABEL\" attr.type=\"string\"/>\n\u003Ckey id=\"SHAPE\" for=\"node\" attr.name=\"SHAPE\" attr.type=\"string\"/>\n\u003Ckey id=\"BREED\" for=\"node\" attr.name=\"BREED\" attr.type=\"string\"/>\n\u003Ckey id=\"WHO\" for=\"node\" attr.name=\"WHO\" attr.type=\"double\"/>\n\u003Ckey id=\"HIDDEN?\" for=\"node\" attr.name=\"HIDDEN?\" attr.type=\"boolean\"/>\n\u003Ckey id=\"LABEL-COLOR\" for=\"node\" attr.name=\"LABEL-COLOR\" attr.type=\"double\"/>\n\u003Ckey id=\"HEADING\" for=\"node\" attr.name=\"HEADING\" attr.type=\"double\"/>\n\u003Ckey id=\"BANK-NAME\" for=\"node\" attr.name=\"BANK-NAME\" attr.type=\"string\"/>\n\u003Ckey id=\"HOMETOWN\" for=\"node\" attr.name=\"HOMETOWN\" attr.type=\"string\"/>\n\u003Ckey id=\"COLOR\" for=\"node\" attr.name=\"COLOR\" attr.type=\"double\"/>\n\u003Ckey id=\"XCOR\" for=\"node\" attr.name=\"XCOR\" attr.type=\"double\"/>\n\u003Ckey id=\"SIZE\" for=\"node\" attr.name=\"SIZE\" attr.type=\"double\"/>\n\u003Ckey id=\"END1\" for=\"edge\" attr.name=\"END1\" attr.type=\"string\"/>\n\u003Ckey id=\"TIE-MODE\" for=\"edge\" attr.name=\"TIE-MODE\" attr.type=\"string\"/>\n\u003Ckey id=\"END2\" for=\"edge\" attr.name=\"END2\" attr.type=\"string\"/>\n\u003Ckey id=\"LABEL-COLOR\" for=\"edge\" attr.name=\"LABEL-COLOR\" attr.type=\"double\"/>\n\u003Ckey id=\"THICKNESS\" for=\"edge\" attr.name=\"THICKNESS\" attr.type=\"double\"/>\n\u003Ckey id=\"LABEL\" for=\"edge\" attr.name=\"LABEL\" attr.type=\"string\"/>\n\u003Ckey id=\"SHAPE\" for=\"edge\" attr.name=\"SHAPE\" attr.type=\"string\"/>\n\u003Ckey id=\"BREED\" for=\"edge\" attr.name=\"BREED\" attr.type=\"string\"/>\n\u003Ckey id=\"COLOR\" for=\"edge\" attr.name=\"COLOR\" attr.type=\"double\"/>\n\u003Ckey id=\"AMOUNT\" for=\"edge\" attr.name=\"AMOUNT\" attr.type=\"double\"/>\n\u003Ckey id=\"HIDDEN?\" for=\"edge\" attr.name=\"HIDDEN?\" attr.type=\"boolean\"/>\n\u003Cgraph edgedefault=\"undirected\">\n\u003Cnode id=\"client 1\">\n\u003Cdata key=\"PEN-MODE\">up\u003C/data>\n\u003Cdata key=\"YCOR\">0\u003C/data>\n\u003Cdata key=\"PEN-SIZE\">1\u003C/data>\n\u003Cdata key=\"LABEL\">\u003C/data>\n\u003Cdata key=\"SHAPE\">default\u003C/data>\n\u003Cdata key=\"BREED\">clients\u003C/data>\n\u003Cdata key=\"WHO\">1\u003C/data>\n\u003Cdata key=\"HIDDEN?\">false\u003C/data>\n\u003Cdata key=\"LABEL-COLOR\">9.9\u003C/data>\n\u003Cdata key=\"HEADING\">356\u003C/data>\n\u003Cdata key=\"HOMETOWN\">Turtle City\u003C/data>\n\u003Cdata key=\"COLOR\">115\u003C/data>\n\u003Cdata key=\"XCOR\">0\u003C/data>\n\u003Cdata key=\"SIZE\">1\u003C/data>\n\u003C/node>\n\u003Cnode id=\"banker 0\">\n\u003Cdata key=\"PEN-MODE\">up\u003C/data>\n\u003Cdata key=\"YCOR\">0\u003C/data>\n\u003Cdata key=\"PEN-SIZE\">1\u003C/data>\n\u003Cdata key=\"LABEL\">\u003C/data>\n\u003Cdata key=\"SHAPE\">default\u003C/data>\n\u003Cdata key=\"BREED\">bankers\u003C/data>\n\u003Cdata key=\"WHO\">0\u003C/data>\n\u003Cdata key=\"HIDDEN?\">false\u003C/data>\n\u003Cdata key=\"LABEL-COLOR\">9.9\u003C/data>\n\u003Cdata key=\"HEADING\">32\u003C/data>\n\u003Cdata key=\"BANK-NAME\">The Bank\u003C/data>\n\u003Cdata key=\"COLOR\">85\u003C/data>\n\u003Cdata key=\"XCOR\">0\u003C/data>\n\u003Cdata key=\"SIZE\">1\u003C/data>\n\u003C/node>\n\u003Cedge source=\"client 1\" target=\"banker 0\">\n\u003Cdata key=\"END1\">(client 1)\u003C/data>\n\u003Cdata key=\"TIE-MODE\">none\u003C/data>\n\u003Cdata key=\"END2\">(banker 0)\u003C/data>\n\u003Cdata key=\"LABEL-COLOR\">9.9\u003C/data>\n\u003Cdata key=\"THICKNESS\">0\u003C/data>\n\u003Cdata key=\"LABEL\">\u003C/data>\n\u003Cdata key=\"SHAPE\">default\u003C/data>\n\u003Cdata key=\"BREED\">accounts\u003C/data>\n\u003Cdata key=\"COLOR\">5\u003C/data>\n\u003Cdata key=\"AMOUNT\">9999.99\u003C/data>\n\u003Cdata key=\"HIDDEN?\">false\u003C/data>\n\u003C/edge>\n\u003Cedge source=\"banker 0\" target=\"client 1\">\n\u003Cdata key=\"END1\">(banker 0)\u003C/data>\n\u003Cdata key=\"TIE-MODE\">none\u003C/data>\n\u003Cdata key=\"END2\">(client 1)\u003C/data>\n\u003Cdata key=\"LABEL-COLOR\">9.9\u003C/data>\n\u003Cdata key=\"THICKNESS\">0\u003C/data>\n\u003Cdata key=\"LABEL\">\u003C/data>\n\u003Cdata key=\"SHAPE\">default\u003C/data>\n\u003Cdata key=\"BREED\">friendships\u003C/data>\n\u003Cdata key=\"COLOR\">5\u003C/data>\n\u003Cdata key=\"HIDDEN?\">false\u003C/data>\n\u003C/edge>\n\u003C/graph>\n\u003C/graphml>\n","XML","",[45,6948,6949,6956,6962,6968,6974,6980,6986,6992,6998,7004,7010,7016,7022,7028,7034,7040,7046,7052,7058,7064,7070,7076,7082,7088,7094,7100,7106,7112,7118,7124,7130,7136,7142,7148,7154,7160,7166,7172,7178,7184,7190,7196,7202,7208,7214,7220,7226,7232,7238,7243,7248,7253,7258,7263,7269,7275,7280,7285,7291,7297,7303,7308,7313,7318,7324,7330,7336,7342,7347,7353,7358,7363,7369,7375,7381,7386,7392,7398,7404,7409,7415,7420,7425,7430,7435,7441,7446,7451,7456,7462],{"__ignoreMap":6946},[48,6950,6953],{"class":6951,"line":6952},"line",1,[48,6954,6955],{},"\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",[48,6957,6959],{"class":6951,"line":6958},2,[48,6960,6961],{},"\u003Cgraphml xmlns=\"http://graphml.graphdrawing.org/xmlns/graphml\"\n",[48,6963,6965],{"class":6951,"line":6964},3,[48,6966,6967],{},"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n",[48,6969,6971],{"class":6951,"line":6970},4,[48,6972,6973],{},"xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns/graphml\">\n",[48,6975,6977],{"class":6951,"line":6976},5,[48,6978,6979],{},"\u003Ckey id=\"PEN-MODE\" for=\"node\" attr.name=\"PEN-MODE\" attr.type=\"string\"/>\n",[48,6981,6983],{"class":6951,"line":6982},6,[48,6984,6985],{},"\u003Ckey id=\"YCOR\" for=\"node\" attr.name=\"YCOR\" attr.type=\"double\"/>\n",[48,6987,6989],{"class":6951,"line":6988},7,[48,6990,6991],{},"\u003Ckey id=\"PEN-SIZE\" for=\"node\" attr.name=\"PEN-SIZE\" attr.type=\"double\"/>\n",[48,6993,6995],{"class":6951,"line":6994},8,[48,6996,6997],{},"\u003Ckey id=\"LABEL\" for=\"node\" attr.name=\"LABEL\" attr.type=\"string\"/>\n",[48,6999,7001],{"class":6951,"line":7000},9,[48,7002,7003],{},"\u003Ckey id=\"SHAPE\" for=\"node\" attr.name=\"SHAPE\" attr.type=\"string\"/>\n",[48,7005,7007],{"class":6951,"line":7006},10,[48,7008,7009],{},"\u003Ckey id=\"BREED\" for=\"node\" attr.name=\"BREED\" attr.type=\"string\"/>\n",[48,7011,7013],{"class":6951,"line":7012},11,[48,7014,7015],{},"\u003Ckey id=\"WHO\" for=\"node\" attr.name=\"WHO\" attr.type=\"double\"/>\n",[48,7017,7019],{"class":6951,"line":7018},12,[48,7020,7021],{},"\u003Ckey id=\"HIDDEN?\" for=\"node\" attr.name=\"HIDDEN?\" attr.type=\"boolean\"/>\n",[48,7023,7025],{"class":6951,"line":7024},13,[48,7026,7027],{},"\u003Ckey id=\"LABEL-COLOR\" for=\"node\" attr.name=\"LABEL-COLOR\" attr.type=\"double\"/>\n",[48,7029,7031],{"class":6951,"line":7030},14,[48,7032,7033],{},"\u003Ckey id=\"HEADING\" for=\"node\" attr.name=\"HEADING\" attr.type=\"double\"/>\n",[48,7035,7037],{"class":6951,"line":7036},15,[48,7038,7039],{},"\u003Ckey id=\"BANK-NAME\" for=\"node\" attr.name=\"BANK-NAME\" attr.type=\"string\"/>\n",[48,7041,7043],{"class":6951,"line":7042},16,[48,7044,7045],{},"\u003Ckey id=\"HOMETOWN\" for=\"node\" attr.name=\"HOMETOWN\" attr.type=\"string\"/>\n",[48,7047,7049],{"class":6951,"line":7048},17,[48,7050,7051],{},"\u003Ckey id=\"COLOR\" for=\"node\" attr.name=\"COLOR\" attr.type=\"double\"/>\n",[48,7053,7055],{"class":6951,"line":7054},18,[48,7056,7057],{},"\u003Ckey id=\"XCOR\" for=\"node\" attr.name=\"XCOR\" attr.type=\"double\"/>\n",[48,7059,7061],{"class":6951,"line":7060},19,[48,7062,7063],{},"\u003Ckey id=\"SIZE\" for=\"node\" attr.name=\"SIZE\" attr.type=\"double\"/>\n",[48,7065,7067],{"class":6951,"line":7066},20,[48,7068,7069],{},"\u003Ckey id=\"END1\" for=\"edge\" attr.name=\"END1\" attr.type=\"string\"/>\n",[48,7071,7073],{"class":6951,"line":7072},21,[48,7074,7075],{},"\u003Ckey id=\"TIE-MODE\" for=\"edge\" attr.name=\"TIE-MODE\" attr.type=\"string\"/>\n",[48,7077,7079],{"class":6951,"line":7078},22,[48,7080,7081],{},"\u003Ckey id=\"END2\" for=\"edge\" attr.name=\"END2\" attr.type=\"string\"/>\n",[48,7083,7085],{"class":6951,"line":7084},23,[48,7086,7087],{},"\u003Ckey id=\"LABEL-COLOR\" for=\"edge\" attr.name=\"LABEL-COLOR\" attr.type=\"double\"/>\n",[48,7089,7091],{"class":6951,"line":7090},24,[48,7092,7093],{},"\u003Ckey id=\"THICKNESS\" for=\"edge\" attr.name=\"THICKNESS\" attr.type=\"double\"/>\n",[48,7095,7097],{"class":6951,"line":7096},25,[48,7098,7099],{},"\u003Ckey id=\"LABEL\" for=\"edge\" attr.name=\"LABEL\" attr.type=\"string\"/>\n",[48,7101,7103],{"class":6951,"line":7102},26,[48,7104,7105],{},"\u003Ckey id=\"SHAPE\" for=\"edge\" attr.name=\"SHAPE\" attr.type=\"string\"/>\n",[48,7107,7109],{"class":6951,"line":7108},27,[48,7110,7111],{},"\u003Ckey id=\"BREED\" for=\"edge\" attr.name=\"BREED\" attr.type=\"string\"/>\n",[48,7113,7115],{"class":6951,"line":7114},28,[48,7116,7117],{},"\u003Ckey id=\"COLOR\" for=\"edge\" attr.name=\"COLOR\" attr.type=\"double\"/>\n",[48,7119,7121],{"class":6951,"line":7120},29,[48,7122,7123],{},"\u003Ckey id=\"AMOUNT\" for=\"edge\" attr.name=\"AMOUNT\" attr.type=\"double\"/>\n",[48,7125,7127],{"class":6951,"line":7126},30,[48,7128,7129],{},"\u003Ckey id=\"HIDDEN?\" for=\"edge\" attr.name=\"HIDDEN?\" attr.type=\"boolean\"/>\n",[48,7131,7133],{"class":6951,"line":7132},31,[48,7134,7135],{},"\u003Cgraph edgedefault=\"undirected\">\n",[48,7137,7139],{"class":6951,"line":7138},32,[48,7140,7141],{},"\u003Cnode id=\"client 1\">\n",[48,7143,7145],{"class":6951,"line":7144},33,[48,7146,7147],{},"\u003Cdata key=\"PEN-MODE\">up\u003C/data>\n",[48,7149,7151],{"class":6951,"line":7150},34,[48,7152,7153],{},"\u003Cdata key=\"YCOR\">0\u003C/data>\n",[48,7155,7157],{"class":6951,"line":7156},35,[48,7158,7159],{},"\u003Cdata key=\"PEN-SIZE\">1\u003C/data>\n",[48,7161,7163],{"class":6951,"line":7162},36,[48,7164,7165],{},"\u003Cdata key=\"LABEL\">\u003C/data>\n",[48,7167,7169],{"class":6951,"line":7168},37,[48,7170,7171],{},"\u003Cdata key=\"SHAPE\">default\u003C/data>\n",[48,7173,7175],{"class":6951,"line":7174},38,[48,7176,7177],{},"\u003Cdata key=\"BREED\">clients\u003C/data>\n",[48,7179,7181],{"class":6951,"line":7180},39,[48,7182,7183],{},"\u003Cdata key=\"WHO\">1\u003C/data>\n",[48,7185,7187],{"class":6951,"line":7186},40,[48,7188,7189],{},"\u003Cdata key=\"HIDDEN?\">false\u003C/data>\n",[48,7191,7193],{"class":6951,"line":7192},41,[48,7194,7195],{},"\u003Cdata key=\"LABEL-COLOR\">9.9\u003C/data>\n",[48,7197,7199],{"class":6951,"line":7198},42,[48,7200,7201],{},"\u003Cdata key=\"HEADING\">356\u003C/data>\n",[48,7203,7205],{"class":6951,"line":7204},43,[48,7206,7207],{},"\u003Cdata key=\"HOMETOWN\">Turtle City\u003C/data>\n",[48,7209,7211],{"class":6951,"line":7210},44,[48,7212,7213],{},"\u003Cdata key=\"COLOR\">115\u003C/data>\n",[48,7215,7217],{"class":6951,"line":7216},45,[48,7218,7219],{},"\u003Cdata key=\"XCOR\">0\u003C/data>\n",[48,7221,7223],{"class":6951,"line":7222},46,[48,7224,7225],{},"\u003Cdata key=\"SIZE\">1\u003C/data>\n",[48,7227,7229],{"class":6951,"line":7228},47,[48,7230,7231],{},"\u003C/node>\n",[48,7233,7235],{"class":6951,"line":7234},48,[48,7236,7237],{},"\u003Cnode id=\"banker 0\">\n",[48,7239,7241],{"class":6951,"line":7240},49,[48,7242,7147],{},[48,7244,7246],{"class":6951,"line":7245},50,[48,7247,7153],{},[48,7249,7251],{"class":6951,"line":7250},51,[48,7252,7159],{},[48,7254,7256],{"class":6951,"line":7255},52,[48,7257,7165],{},[48,7259,7261],{"class":6951,"line":7260},53,[48,7262,7171],{},[48,7264,7266],{"class":6951,"line":7265},54,[48,7267,7268],{},"\u003Cdata key=\"BREED\">bankers\u003C/data>\n",[48,7270,7272],{"class":6951,"line":7271},55,[48,7273,7274],{},"\u003Cdata key=\"WHO\">0\u003C/data>\n",[48,7276,7278],{"class":6951,"line":7277},56,[48,7279,7189],{},[48,7281,7283],{"class":6951,"line":7282},57,[48,7284,7195],{},[48,7286,7288],{"class":6951,"line":7287},58,[48,7289,7290],{},"\u003Cdata key=\"HEADING\">32\u003C/data>\n",[48,7292,7294],{"class":6951,"line":7293},59,[48,7295,7296],{},"\u003Cdata key=\"BANK-NAME\">The Bank\u003C/data>\n",[48,7298,7300],{"class":6951,"line":7299},60,[48,7301,7302],{},"\u003Cdata key=\"COLOR\">85\u003C/data>\n",[48,7304,7306],{"class":6951,"line":7305},61,[48,7307,7219],{},[48,7309,7311],{"class":6951,"line":7310},62,[48,7312,7225],{},[48,7314,7316],{"class":6951,"line":7315},63,[48,7317,7231],{},[48,7319,7321],{"class":6951,"line":7320},64,[48,7322,7323],{},"\u003Cedge source=\"client 1\" target=\"banker 0\">\n",[48,7325,7327],{"class":6951,"line":7326},65,[48,7328,7329],{},"\u003Cdata key=\"END1\">(client 1)\u003C/data>\n",[48,7331,7333],{"class":6951,"line":7332},66,[48,7334,7335],{},"\u003Cdata key=\"TIE-MODE\">none\u003C/data>\n",[48,7337,7339],{"class":6951,"line":7338},67,[48,7340,7341],{},"\u003Cdata key=\"END2\">(banker 0)\u003C/data>\n",[48,7343,7345],{"class":6951,"line":7344},68,[48,7346,7195],{},[48,7348,7350],{"class":6951,"line":7349},69,[48,7351,7352],{},"\u003Cdata key=\"THICKNESS\">0\u003C/data>\n",[48,7354,7356],{"class":6951,"line":7355},70,[48,7357,7165],{},[48,7359,7361],{"class":6951,"line":7360},71,[48,7362,7171],{},[48,7364,7366],{"class":6951,"line":7365},72,[48,7367,7368],{},"\u003Cdata key=\"BREED\">accounts\u003C/data>\n",[48,7370,7372],{"class":6951,"line":7371},73,[48,7373,7374],{},"\u003Cdata key=\"COLOR\">5\u003C/data>\n",[48,7376,7378],{"class":6951,"line":7377},74,[48,7379,7380],{},"\u003Cdata key=\"AMOUNT\">9999.99\u003C/data>\n",[48,7382,7384],{"class":6951,"line":7383},75,[48,7385,7189],{},[48,7387,7389],{"class":6951,"line":7388},76,[48,7390,7391],{},"\u003C/edge>\n",[48,7393,7395],{"class":6951,"line":7394},77,[48,7396,7397],{},"\u003Cedge source=\"banker 0\" target=\"client 1\">\n",[48,7399,7401],{"class":6951,"line":7400},78,[48,7402,7403],{},"\u003Cdata key=\"END1\">(banker 0)\u003C/data>\n",[48,7405,7407],{"class":6951,"line":7406},79,[48,7408,7335],{},[48,7410,7412],{"class":6951,"line":7411},80,[48,7413,7414],{},"\u003Cdata key=\"END2\">(client 1)\u003C/data>\n",[48,7416,7418],{"class":6951,"line":7417},81,[48,7419,7195],{},[48,7421,7423],{"class":6951,"line":7422},82,[48,7424,7352],{},[48,7426,7428],{"class":6951,"line":7427},83,[48,7429,7165],{},[48,7431,7433],{"class":6951,"line":7432},84,[48,7434,7171],{},[48,7436,7438],{"class":6951,"line":7437},85,[48,7439,7440],{},"\u003Cdata key=\"BREED\">friendships\u003C/data>\n",[48,7442,7444],{"class":6951,"line":7443},86,[48,7445,7374],{},[48,7447,7449],{"class":6951,"line":7448},87,[48,7450,7189],{},[48,7452,7454],{"class":6951,"line":7453},88,[48,7455,7391],{},[48,7457,7459],{"class":6951,"line":7458},89,[48,7460,7461],{},"\u003C/graph>\n",[48,7463,7465],{"class":6951,"line":7464},90,[48,7466,7467],{},"\u003C/graphml>\n",[33,7469,7470],{},"A few things to notice:",[160,7472,7473,7476,7489,7509],{},[163,7474,7475],{},"The breed is stored as data field, both for nodes and edges.  Note that the breed is stored in its plural form.",[163,7477,7478,7479,264,7482,264,7484,1717,7487,258],{},"The data includes both NetLogo’s internal variables and the variables that were defined as either ",[45,7480,7481],{},"breeds-own",[45,7483,5264],{},[45,7485,7486],{},"linkbreeds-own",[45,7488,3093],{},[163,7490,7491,7492,7495,7496,264,7499,136,7502,7505,7506,7508],{},"Each key gets an ",[45,7493,7494],{},"attr.type"," based on the actual types of the values contained in the agent variables. The three possible types are ",[45,7497,7498],{},"\"string\"",[45,7500,7501],{},"\"double\"",[45,7503,7504],{},"\"boolean\"",". To determine the attribute type of a particular agent variable, the extension will look at the first agent in the graph. To see which agent is first, you can look at the result of ",[45,7507,365],{},". Note that variables containing other types of values, such as turtles, patches, lists, etc., will be stored as strings.",[163,7510,7511,7512,7530,7531,7546,7547,7552,7553,136,7556,7559,7560,258],{},"This example only has a directed link, and you will notice the ",[45,7513,7514,60,7518,7522,7526],{},[48,7515,7517],{"className":7516},[51,58],"\u003Cgraph",[48,7519,7521],{"className":7520},[51,58],"edgedefault=",[48,7523,7525],{"className":7524},[51,6620],"\"directed\"",[48,7527,7529],{"className":7528},[51,173],">"," element. If we had only undirected links, we would have ",[45,7532,7533,60,7536,7539,7543],{},[48,7534,7517],{"className":7535},[51,58],[48,7537,7521],{"className":7538},[51,58],[48,7540,7542],{"className":7541},[51,6620],"\"undirected\"",[48,7544,7529],{"className":7545},[51,173],". What if we try to mix both kinds of link? At the moment, the extension will save such a “mixed” graph as if it were an undirected graph (see ",[16,7548,7551],{"href":7549,"rel":7550},"https://github.com/NetLogo/NW-Extension/issues/58",[256],"this issue"," for more details). The order of the ",[45,7554,7555],{},"source",[45,7557,7558],{},"target"," will be respected, however, so if you know which breeds represent directed links, you can figure it out ",[37,7561,7562],{},"a posteriori",[1173,7564,1176,7567,1176,7572,7588,7600,7616,7623,7632,7706,7713,7722,7726,7745,7748],{"className":7565,"id":7566},[1532],"load-graphml",[237,7568,1537,7570,1176],{"id":7569},"nwload-graphml",[16,7571,1423],{"href":1420},[1541,7573,7576],{"id":7574,"className":7575},"nwload-graphml-file-name-optional-command-block",[14],[16,7577,1537,7580,1176],{"className":7578,"href":7579},[19],"#----nwload-graphml-file-name-optional-command-block--",[48,7581,7583,7584,60,7586],{"className":7582},[1552],"nw:load-graphml ",[1555,7585,6357],{},[1555,7587,5520],{},[33,7589,7590,7591,7599],{},"Loading a GraphML file into NetLogo with the network extension should be as simple as calling ",[45,7592,7593,60,7596],{},[48,7594,1423],{"className":7595},[51,58],[48,7597,6932],{"className":7598},[51,6620],", but there is a bit of preparation involved.",[33,7601,7602,7603,7605,7606,7608,7609,7611,7612,7615],{},"The key idea is that ",[45,7604,1423],{}," will try to assign the attribute values defined in the GraphML file to NetLogo agent variables of the same names (this is ",[37,7607,143],{}," case sensitive). The first one it tries to set is ",[45,7610,53],{}," if it is there, so the turtle or link will get the right breed and, hence, the right breed variables.  The load expects the ",[37,7613,7614],{},"plural form"," of the breed for a turtle or link, it will not recognize the singular form.",[33,7617,7618,7619,7622],{},"One special case is the ",[45,7620,7621],{},"who"," number, which is ignored by the importer if it is present as a GraphML attribute: NetLogo does not allow you to modify this number once a turtle is created and, besides, there could already be an existing turtle with that number.",[33,7624,7625,7626,7628,7629,7631],{},"The simplest case to handle is when the original GraphML file has been saved from NetLogo by using ",[45,7627,1416],{},". In this case, all you should have to do is to make sure that you have the same breed and variables definition as when you saved the file and you should get back your original graph. For example, if you want to load the file from the ",[45,7630,1416],{}," example above, you should have the following definitions:",[42,7633,7634],{},[45,7635,7636,54,7639,60,7642,65,7645,54,7650,65,7653,54,7658,60,7661,65,7664,54,7669,65,7672,7674,54,7679,60,7682,65,7685,7687,54,7692,60,7695,65,7698,54,7703,65],{},[48,7637,53],{"className":7638},[51,52],[48,7640,59],{"className":7641},[51,58],[48,7643,64],{"className":7644},[51,58],[48,7646,7648,6752],{"className":7647},[51,52],[70,7649],{},[48,7651,6756],{"className":7652},[51,58],[48,7654,7656,53],{"className":7655},[51,52],[70,7657],{},[48,7659,75],{"className":7660},[51,58],[48,7662,79],{"className":7663},[51,58],[48,7665,7667,6773],{"className":7666},[51,52],[70,7668],{},[48,7670,6777],{"className":7671},[51,58],[70,7673],{},[48,7675,7677,87],{"className":7676},[51,52],[70,7678],{},[48,7680,91],{"className":7681},[51,58],[48,7683,95],{"className":7684},[51,58],[70,7686],{},[48,7688,7690,101],{"className":7689},[51,52],[70,7691],{},[48,7693,105],{"className":7694},[51,58],[48,7696,109],{"className":7697},[51,58],[48,7699,7701,6809],{"className":7700},[51,52],[70,7702],{},[48,7704,6813],{"className":7705},[51,58],[33,7707,7708,7709,258],{},"Loading a graph that was saved from a different program than NetLogo is quite possible as well, but it may take a bit of tinkering to get all the attribute-variable match up right. If you encounter major problems, please do not hesitate to ",[16,7710,7712],{"href":4761,"rel":7711},[256],"open an issue",[33,7714,7715,7716,7718,7719,7721],{},"The extension will try to assign the type defined by ",[45,7717,7494],{}," to each variable that it loads. If it’s unable to convert it to that type, it will load it as a string. If ",[45,7720,7494],{}," is not defined, or is set to an unknown value, the extension will first try to load the value as a double, then try it as a boolean, and finally fall back on a string.",[33,7723,5541,7724,5544],{},[37,7725,5520],{},[42,7727,7728],{},[45,7729,7730,60,7733,54,7736,60,7739,60,7742,65],{},[48,7731,1423],{"className":7732},[51,58],[48,7734,6932],{"className":7735},[51,6620],[48,7737,622],{"className":7738},[51,328],[48,7740,295],{"className":7741},[51,173],[48,7743,304],{"className":7744},[51,303],[33,7746,7747],{},"Note that this command block can be used to build a list or an agentset containing the newly created nodes:",[42,7749,7750],{},[45,7751,7752,60,7755,7759,7760,7762,60,7765,604,7768,607,7770,60,7773,60,7776,60,7780,60,7784,7787,631,7789,7791,60,7794,60,7798,60,7801],{},[48,7753,2180],{"className":7754},[51,328],[48,7756,7758],{"className":7757},[51,58],"node-list"," []",[70,7761],{},[48,7763,1423],{"className":7764},[51,58],[48,7766,6932],{"className":7767},[51,6620],[70,7769],{},[48,7771,622],{"className":7772},[51,328],[48,7774,7758],{"className":7775},[51,58],[48,7777,7779],{"className":7778},[51,173],"lput",[48,7781,7783],{"className":7782},[51,173],"self",[48,7785,7758],{"className":7786},[51,58],[70,7788],{},[70,7790],{},[48,7792,2180],{"className":7793},[51,328],[48,7795,7797],{"className":7796},[51,58],"node-set",[48,7799,308],{"className":7800},[51,173],[48,7802,7758],{"className":7803},[51,58],[1173,7805,1176,7808,1176,7813,7835,7838,7869,7878,7881,7889],{"className":7806,"id":7807},[1532],"load",[237,7809,1537,7811,1176],{"id":7810},"nwload",[16,7812,1430],{"href":1427},[1541,7814,7817],{"id":7815,"className":7816},"nwload-file-name-default-turtle-breed-default-link-breed-optional-command-block",[14],[16,7818,1537,7821,1176],{"className":7819,"href":7820},[19],"#----nwload-file-name-default-turtle-breed-default-link-breed-optional-command-block--",[48,7822,7824,7825,60,7827,60,7830,60,7833],{"className":7823},[1552],"nw:load ",[1555,7826,6357],{},[1555,7828,7829],{},"default-turtle-breed",[1555,7831,7832],{},"default-link-breed",[1555,7834,5520],{},[33,7836,7837],{},"Filetype specific variants:",[160,7839,7840,7844,7849,7854,7859,7864],{},[163,7841,7842],{},[45,7843,1430],{},[163,7845,7846],{},[45,7847,7848],{},"nw:load-dl",[163,7850,7851],{},[45,7852,7853],{},"nw:load-gdf",[163,7855,7856],{},[45,7857,7858],{},"nw:load-gexf",[163,7860,7861],{},[45,7862,7863],{},"nw:load-gml",[163,7865,7866],{},[45,7867,7868],{},"nw:load-vna",[33,7870,7871,7872,7874,7875,7877],{},"Import the given file into NetLogo. Like ",[45,7873,1423],{},", the importer will do its best to match node and edge attributes in the file with turtle and link variables in NetLogo. If ",[45,7876,53],{}," is specified for nodes and edges in the file and exists in NetLogo, it will be used. Otherwise, the default turtle and link breeds are used.",[33,7879,7880],{},"Limitations:",[160,7882,7883],{},[163,7884,7885,7886,7888],{},"Multigraphs are not supported in importing. Even if the file format supports it (and many don’t), only the first link will be used on import. This is due to a limitation in the parsing libraries NW uses. ",[45,7887,1423],{}," does support multigraphs with the normal NetLogo limitation that two turtles can share more than one link only if all the links are of different breeds.",[33,7890,7891,7893,7894,7897,7898,258],{},[45,7892,1430],{}," determines the file-type of given file based on the extension and calls the corresponding ",[45,7895,7896],{},"load-*"," primitive on it. Note that GraphML must be imported with ",[45,7899,1423],{},[1173,7901,1176,7904,1176,7909,7923,7925,7952,7955,7957,8022],{"className":7902,"id":7903},[1532],"save",[237,7905,1537,7907,1176],{"id":7906},"nwsave",[16,7908,1437],{"href":1434},[1541,7910,7913],{"id":7911,"className":7912},"nwsave-file-name",[14],[16,7914,1537,7917,1176],{"className":7915,"href":7916},[19],"#----nwsave-file-name--",[48,7918,7920,7921],{"className":7919},[1552],"nw:save ",[1555,7922,6357],{},[33,7924,7837],{},[160,7926,7927,7932,7937,7942,7947],{},[163,7928,7929],{},[45,7930,7931],{},"nw:save-dl",[163,7933,7934],{},[45,7935,7936],{},"nw:save-gdf",[163,7938,7939],{},[45,7940,7941],{},"nw:save-gexf",[163,7943,7944],{},[45,7945,7946],{},"nw:save-gml",[163,7948,7949],{},[45,7950,7951],{},"nw:save-vna",[33,7953,7954],{},"Export the network context in the given format to the given file. Turtle and link attributes will be exported to formats that support node and edge properties.",[33,7956,7880],{},[160,7958,7959,8000,8003,8006,8016],{},[163,7960,7961,136,7964,7967,7968,136,7971,7974,7975,136,7977,7979,7980,136,7982,7984,7985,136,7987,7989,7990,136,7992,7994,7995,136,7997,7999],{},[45,7962,7963],{},"x",[45,7965,7966],{},"y"," (not ",[45,7969,7970],{},"xcor",[45,7972,7973],{},"ycor",") can only be numbers. ",[45,7976,7963],{},[45,7978,7966],{}," are commonly used in formats pertaining to position and behind the scenes NW uses Gephi’s libraries for exporting. Furthermore, ",[45,7981,7963],{},[45,7983,7966],{}," will be added even if they didn’t exist in the model. Again, this is because NW uses Gephi’s libraries which assume that nodes have positions stored in ",[45,7986,7963],{},[45,7988,7966],{},". If you wish to export to Gephi specifically, we recommend creating ",[45,7991,7963],{},[45,7993,7966],{}," turtles variables and setting them to ",[45,7996,7970],{},[45,7998,7973],{}," before export.",[163,8001,8002],{},"Color will be exported in a standard RGB format. This should hopefully increase compatibility with other programs.",[163,8004,8005],{},"Turtle and link variables that contain values of different types will be stored as strings. Unfortunately, most network formats require that node and attributes have a single type.",[163,8007,8008,8009,8012,8013,8015],{},"Many programs use ",[45,8010,8011],{},"label"," to store the id of nodes. Thus, if you’re having trouble importing data exported from NetLogo into another program, you might try setting turtles’ labels to their ",[45,8014,7621],{}," number.",[163,8017,8018,8019,8021],{},"Multigraphs are not supported. Thus, two turtles can share at most one link. ",[45,8020,1416],{}," does support multigraphs, so use that if turtles can have more than one type of link connecting them.",[33,8023,8024,8026,8027,8030,8031,258],{},[45,8025,1437],{}," determines the file-type of the given file based on the extension and calls the corresponding ",[45,8028,8029],{},"save-*"," primitive on it. Note that GraphML must be exported with ",[45,8032,1416],{},[8034,8035,8036],"style",{},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":6946,"searchDepth":6976,"depth":6964,"links":8038},[8039,8042,8043,8044],{"id":25,"depth":6958,"text":31,"children":8040},[8041],{"id":239,"depth":6964,"text":245},{"id":967,"depth":6958,"text":973},{"id":1010,"depth":6958,"text":1016},{"id":1149,"depth":6958,"text":1155,"children":8045},[8046,8047,8048,8049,8050,8051,8052,8053,8054,8059,8063,8068,8073,8078,8083,8088,8093,8098,8103,8108,8112,8117,8121,8125,8129,8133,8138,8142,8146,8150,8154,8158,8162,8166,8171,8176,8181,8186,8191,8196,8201,8206,8211,8216,8221,8226,8231],{"id":1165,"depth":6964,"text":1171},{"id":1214,"depth":6964,"text":1220},{"id":1261,"depth":6964,"text":1267},{"id":1287,"depth":6964,"text":1293},{"id":1318,"depth":6964,"text":1324},{"id":1386,"depth":6964,"text":1392},{"id":1440,"depth":6964,"text":1446},{"id":1522,"depth":6964,"text":1528},{"id":1536,"depth":6964,"text":8055,"children":8056},"\n    nw:set-context\n  ",[8057],{"id":1543,"depth":6970,"text":8058},"\n    nw:set-context turtleset linkset\n  ",{"id":1591,"depth":6964,"text":8060,"children":8061},"\n    nw:get-context\n  ",[8062],{"id":1596,"depth":6970,"text":8060},{"id":2390,"depth":6964,"text":8064,"children":8065},"\n    nw:with-context\n  ",[8066],{"id":2395,"depth":6970,"text":8067},"\n    nw:with-context turtleset linkset command-block\n  ",{"id":2554,"depth":6964,"text":8069,"children":8070},"\n    nw:turtles-in-radius\n  ",[8071],{"id":2559,"depth":6970,"text":8072},"\n    nw:turtles-in-radius radius\n  ",{"id":2808,"depth":6964,"text":8074,"children":8075},"\n    nw:turtles-in-reverse-radius\n  ",[8076],{"id":2813,"depth":6970,"text":8077},"\n    nw:turtles-in-reverse-radius radius\n  ",{"id":2854,"depth":6964,"text":8079,"children":8080},"\n    nw:distance-to\n  ",[8081],{"id":2859,"depth":6970,"text":8082},"\n    nw:distance-to target-turtle\n  ",{"id":3053,"depth":6964,"text":8084,"children":8085},"\n    nw:weighted-distance-to\n  ",[8086],{"id":3058,"depth":6970,"text":8087},"\n    nw:weighted-distance-to target-turtle weight-variable\n  ",{"id":3323,"depth":6964,"text":8089,"children":8090},"\n    nw:path-to\n  ",[8091],{"id":3328,"depth":6970,"text":8092},"\n    nw:path-to target-turtle\n  ",{"id":3551,"depth":6964,"text":8094,"children":8095},"\n    nw:turtles-on-path-to\n  ",[8096],{"id":3556,"depth":6970,"text":8097},"\n    nw:turtles-on-path-to target-turtle\n  ",{"id":3768,"depth":6964,"text":8099,"children":8100},"\n    nw:weighted-path-to\n  ",[8101],{"id":3773,"depth":6970,"text":8102},"\n    nw:weighted-path-to target-turtle weight-variable\n  ",{"id":4051,"depth":6964,"text":8104,"children":8105},"\n    nw:turtles-on-weighted-path-to\n  ",[8106],{"id":4056,"depth":6970,"text":8107},"\n    nw:turtles-on-weighted-path-to target-turtle weight-variable\n  ",{"id":4331,"depth":6964,"text":8109,"children":8110},"\n    nw:mean-path-length\n  ",[8111],{"id":4336,"depth":6970,"text":8109},{"id":4504,"depth":6964,"text":8113,"children":8114},"\n    nw:mean-weighted-path-length\n  ",[8115],{"id":4509,"depth":6970,"text":8116},"\n    nw:mean-weighted-path-length weight-variable\n  ",{"id":4701,"depth":6964,"text":8118,"children":8119},"\n    nw:betweenness-centrality\n  ",[8120],{"id":4706,"depth":6970,"text":8118},{"id":4733,"depth":6964,"text":8122,"children":8123},"\n    nw:eigenvector-centrality\n  ",[8124],{"id":4738,"depth":6970,"text":8122},{"id":4775,"depth":6964,"text":8126,"children":8127},"\n    nw:page-rank\n  ",[8128],{"id":4780,"depth":6970,"text":8126},{"id":4811,"depth":6964,"text":8130,"children":8131},"\n    nw:closeness-centrality\n  ",[8132],{"id":4816,"depth":6970,"text":8130},{"id":4852,"depth":6964,"text":8134,"children":8135},"\n    nw:weighted-closeness-centrality\n  ",[8136],{"id":4857,"depth":6970,"text":8137},"\n    nw:weighted-closeness-centrality link-weight-variable\n  ",{"id":4885,"depth":6964,"text":8139,"children":8140},"\n    nw:clustering-coefficient\n  ",[8141],{"id":4890,"depth":6970,"text":8139},{"id":5078,"depth":6964,"text":8143,"children":8144},"\n    nw:modularity\n  ",[8145],{"id":5083,"depth":6970,"text":8143},{"id":5154,"depth":6964,"text":8147,"children":8148},"\n    nw:bicomponent-clusters\n  ",[8149],{"id":5159,"depth":6970,"text":8147},{"id":5183,"depth":6964,"text":8151,"children":8152},"\n    nw:weak-component-clusters\n  ",[8153],{"id":5188,"depth":6970,"text":8151},{"id":5222,"depth":6964,"text":8155,"children":8156},"\n    nw:louvain-communities\n  ",[8157],{"id":5227,"depth":6970,"text":8155},{"id":5409,"depth":6964,"text":8159,"children":8160},"\n    nw:maximal-cliques\n  ",[8161],{"id":5414,"depth":6970,"text":8159},{"id":5450,"depth":6964,"text":8163,"children":8164},"\n    nw:biggest-maximal-cliques\n  ",[8165],{"id":5455,"depth":6970,"text":8163},{"id":5491,"depth":6964,"text":8167,"children":8168},"\n    nw:generate-preferential-attachment\n  ",[8169],{"id":5496,"depth":6970,"text":8170},"\n    nw:generate-preferential-attachment turtle-breed link-breed num-nodes min-degree optional-command-block\n  ",{"id":5580,"depth":6964,"text":8172,"children":8173},"\n    nw:generate-random\n  ",[8174],{"id":5585,"depth":6970,"text":8175},"\n    nw:generate-random turtle-breed link-breed num-nodes connection-probability optional-command-block\n  ",{"id":5665,"depth":6964,"text":8177,"children":8178},"\n    nw:generate-watts-strogatz\n  ",[8179],{"id":5670,"depth":6970,"text":8180},"\n    nw:generate-watts-strogatz turtle-breed link-breed num-nodes neighborhood-size rewire-probability optional-command-block\n  ",{"id":5758,"depth":6964,"text":8182,"children":8183},"\n    nw:generate-small-world\n  ",[8184],{"id":5763,"depth":6970,"text":8185},"\n    nw:generate-small-world turtle-breed link-breed row-count column-count clustering-exponent is-toroidal optional-command-block\n  ",{"id":5943,"depth":6964,"text":8187,"children":8188},"\n    nw:generate-lattice-2d\n  ",[8189],{"id":5948,"depth":6970,"text":8190},"\n    nw:generate-lattice-2d turtle-breed link-breed row-count column-count is-toroidal optional-command-block\n  ",{"id":6093,"depth":6964,"text":8192,"children":8193},"\n    nw:generate-ring\n  ",[8194],{"id":6098,"depth":6970,"text":8195},"\n    nw:generate-ring turtle-breed link-breed num-nodes optional-command-block\n  ",{"id":6166,"depth":6964,"text":8197,"children":8198},"\n    nw:generate-star\n  ",[8199],{"id":6171,"depth":6970,"text":8200},"\n    nw:generate-star turtle-breed link-breed num-nodes optional-command-block\n  ",{"id":6232,"depth":6964,"text":8202,"children":8203},"\n    nw:generate-wheel\n  ",[8204],{"id":6237,"depth":6970,"text":8205},"\n    nw:generate-wheel turtle-breed link-breed num-nodes optional-command-block\n  ",{"id":6340,"depth":6964,"text":8207,"children":8208},"\n    nw:save-matrix\n  ",[8209],{"id":6345,"depth":6970,"text":8210},"\n    nw:save-matrix file-name\n  ",{"id":6503,"depth":6964,"text":8212,"children":8213},"\n    nw:load-matrix\n  ",[8214],{"id":6508,"depth":6970,"text":8215},"\n    nw:load-matrix file-name turtle-breed link-breed optional-command-block\n  ",{"id":6704,"depth":6964,"text":8217,"children":8218},"\n    nw:save-graphml\n  ",[8219],{"id":6709,"depth":6970,"text":8220},"\n    nw:save-graphml file-name\n  ",{"id":7569,"depth":6964,"text":8222,"children":8223},"\n    nw:load-graphml\n  ",[8224],{"id":7574,"depth":6970,"text":8225},"\n    nw:load-graphml file-name optional-command-block\n  ",{"id":7810,"depth":6964,"text":8227,"children":8228},"\n    nw:load\n  ",[8229],{"id":7815,"depth":6970,"text":8230},"\n    nw:load file-name default-turtle-breed default-link-breed optional-command-block\n  ",{"id":7906,"depth":6964,"text":8232,"children":8233},"\n    nw:save\n  ",[8234],{"id":7911,"depth":6970,"text":8235},"\n    nw:save file-name\n  ","Documentation for the Networks extension.","md",{"source":8239,"metadataOutputPath":8240,"projectConfig":8241,"language":8243,"output":8252,"inheritFrom":8253,"version":8248,"icon":8254,"extensionName":8255,"assetsRoot":8250},"../../external/extensions/nw/nw.md","content/nw.metadata.yaml",{"defaults":8242,"projectRoot":258,"outputRoot":8249,"scanRoot":8250,"engine":8251,"version":8248,"dedupeIdenticalDiskWrites":8252},{"language":8243,"output":8244,"inheritFrom":8245,"extension":8237,"title":8247,"version":8248},"en",false,[8246],0,"NetLogo User Manual","7.0.1","content","/Volumes/CCL/netlogo/Helio/external/extensions/nw","mustache",true,[8246],"i-lucide-network",{"shortName":1988,"fullName":21},"/nw",{"title":5,"description":8236},"KPrfdBIZI5mb6O_iDqUxVzniOGo-NfJ5kvW2WPOvAyM",[8260,8265],{"title":8261,"path":8262,"stem":8263,"description":8264},"NetLogo Preferences","/netlogopreferences","netlogopreferences","Guide to configuring NetLogo preferences and settings to customize the environment for your workflow and needs.",{"title":8266,"path":8267,"stem":8268,"description":8269},"Networks Extension Dictionary: betweenness-centrality","/nw/betweenness-centrality","nw/betweenness-centrality","Documentation for the betweenness-centrality primitive.",1761669089326]