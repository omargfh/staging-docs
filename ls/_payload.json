[{"data":1,"prerenderedAt":2106},["ShallowReactive",2],{"/ls":3,"/ls-surround":2095},{"id":4,"title":5,"body":6,"description":2072,"extension":2073,"meta":2074,"navigation":2088,"path":2092,"seo":2093,"stem":51,"__hash__":2094},"content/ls.md","LevelSpace Extension",{"type":7,"value":8,"toc":1959},"minimark",[9,22,32,54,57,60,70,73,76,89,92,103,106,115,122,128,148,157,160,163,247,250,305,314,317,328,441,450,456,506,509,543,546,549,558,567,574,583,627,636,693,702,731,740,846,896,925,960,1106,1171,1244,1299,1652,1717,1740,1765,1795,1821,1850,1876,1902,1928],[10,11,15],"h1",{"id":12,"className":13},"levelspace",[14],"section-heading",[16,17,21],"a",{"className":18,"href":20},[19],"section-anchor","#levelspace","LevelSpace",[23,24,27],"h2",{"id":25,"className":26},"levelspace-fundamentals",[14],[16,28,31],{"className":29,"href":30},[19],"#levelspace-fundamentals","LevelSpace fundamentals",[33,34,35,36,53],"p",{},"LevelSpace must be loaded in a model using ",[37,38,39,46,47,52],"code",{},[40,41,45],"span",{"className":42},[43,44],"token","keyword","extensions"," [",[40,48,51],{"className":49},[43,50],"variable","ls","]"," at the top of your model. Once this is done, a model will be able to load up other models using the LevelSpace primitives, run commands and reporters in them, and close them down when they are no longer needed.",[33,55,56],{},"Asking and reporting in LevelSpace is conceptually pretty straight forward: You pass blocks of code to child models, and the child models respond as if you had typed that code into their Command Center. LevelSpace allows you to report strings, numbers, and lists from a child to its parent. It is not possible to directly report turtles, patches, links, or any of their respective sets. Further, it is not possible to push data from a child to its parent - parents must ask their children to report. This mimicks the way in which turtles cannot “push” data to the observer, but rely on the observer to ask them for it.",[33,58,59],{},"In general, the LevelSpace syntax has been designed to align with existing NetLogo primitives whenever possible.",[61,62,65],"h3",{"id":63,"className":64},"headless-and-interactive-models",[14],[16,66,69],{"className":67,"href":68},[19],"#headless-and-interactive-models","Headless and Interactive Models",[33,71,72],{},"LevelSpace has two different child model types; headless models and interactive models. They each have their strengths and weaknesses:",[33,74,75],{},"Interactive models",[77,78,79,83,86],"ul",{},[80,81,82],"li",{},"are full-fledged models that give full access to their interface and widgets,",[80,84,85],{},"run a bit slower, and use more memory",[80,87,88],{},"are visible by default",[33,90,91],{},"Headless Models",[77,93,94,97,100],{},[80,95,96],{},"only give you access to their view and command center",[80,98,99],{},"are faster and use less memory than interactive models.",[80,101,102],{},"are hidden by default",[33,104,105],{},"Typically you will want to use headless models when you are running a large number of models, or if you simply want to run them faster. Interactive models are good if you run a small amount of models, if you are writing a LevelSpace model and need to be able to debug, or if you need access to widgets during runtime.",[61,107,110],{"id":108,"className":109},"keeping-track-of-models",[14],[16,111,114],{"className":112,"href":113},[19],"#keeping-track-of-models","Keeping Track of Models",[33,116,117,118,121],{},"Child models are kept track of in the extension with an id number, starting with 0, and all communication from parent to child is done by referencing this number, henceforth referred to as ",[37,119,120],{},"model-id",".",[33,123,124,125,127],{},"The easiest way to work with multiple models is to store their ",[37,126,120],{}," in a list, and use NetLogo’s list primitives to sort, filter, etc. them during runtime.",[33,129,130,131,133,134,144,145,147],{},"Keeping track of models is important: Most LevelSpace primitives will fail and cause a runtime interruption if provided a ",[37,132,120],{}," to a non-existing model. You can use ",[37,135,136,140,141],{},[40,137,139],{"className":138},[43,50],"ls:model-exists?"," ",[40,142,120],{"className":143},[43,50]," to check if ",[37,146,120],{}," refers to an existing model.",[61,149,152],{"id":150,"className":151},"a-general-use-case-asking-and-reporting",[14],[16,153,156],{"className":154,"href":155},[19],"#a-general-use-case-asking-and-reporting","A general use case: Asking and Reporting",[33,158,159],{},"This use case is based on the Model Visualizer and Plotter Example-model from the NetLogo Models Library.",[33,161,162],{},"A simple thing we can do is to open up some models, run them concurrently, and calculate the average of some reporter. Let’s say that we are interested in finding the mean number of sheep in a bunch of Wolf Sheep Predation models. First we would open up some of these models, and set them up:",[164,165,166],"pre",{},[37,167,168,140,172,176,179,180,184,179,186,191,179,193,140,197,140,202,207,179,209,140,213,217,218,140,222,140,226,140,231,234,235,179,237,241],{},[40,169,171],{"className":170},[43,44],"to",[40,173,175],{"className":174},[43,50],"setup",[177,178],"br",{},"  ",[40,181,183],{"className":182},[43,50],"ls:reset",[177,185],{},[40,187,190],{"className":188},[43,189],"command","ca",[177,192],{},[40,194,196],{"className":195},[43,50],"ls:create-models",[40,198,201],{"className":199},[43,200],"number","30",[40,203,206],{"className":204},[43,205],"string","\"Wolf Sheep Predation.nlogox\"",[177,208],{},[40,210,212],{"className":211},[43,50],"ls:ask",[40,214,216],{"className":215},[43,50],"ls:models"," [ ",[40,219,221],{"className":220},[43,189],"set",[40,223,225],{"className":224},[43,50],"grass?",[40,227,230],{"className":228},[43,229],"constant","true",[40,232,175],{"className":233},[43,50]," ]",[177,236],{},[40,238,240],{"className":239},[43,189],"reset-ticks",[40,242,244,246],{"className":243},[43,44],[177,245],{},"end",[33,248,249],{},"We then want to run all our child models, and then find out what the mean number of sheep is:",[164,251,252],{},[37,253,254,140,257,261,263,264,140,267,217,270,234,273,263,275,140,279,217,284,140,288,292,293,140,297,300],{},[40,255,171],{"className":256},[43,44],[40,258,260],{"className":259},[43,50],"go",[177,262],{},"    ",[40,265,212],{"className":266},[43,50],[40,268,216],{"className":269},[43,50],[40,271,260],{"className":272},[43,50],[177,274],{},[40,276,278],{"className":277},[43,189],"show",[40,280,283],{"className":281},[43,282],"reporter","mean",[40,285,287],{"className":286},[43,282],"count",[40,289,291],{"className":290},[43,50],"sheep"," ] ",[40,294,296],{"className":295},[43,50],"ls:of",[40,298,216],{"className":299},[43,50],[40,301,303,246],{"className":302},[43,44],[177,304],{},[61,306,309],{"id":307,"className":308},"a-general-use-case-inter-model-interactions",[14],[16,310,313],{"className":311,"href":312},[19],"#a-general-use-case-inter-model-interactions","A general use case: Inter-Model Interactions",[33,315,316],{},"This use case is based on the Model Interactions Example-model from the NetLogo Models Library.",[33,318,319,320,323,324,327],{},"Let’s imagine that we have two models: a Wolf Sheep Predation-model called ",[37,321,322],{},"WSP",", and a Climate Change model called ",[37,325,326],{},"CC",". Now let’s imagine that we want the regrowth time in the wSP model to depend on the temperature in the CC model. Using LevelSpace’s primitives, we could do something like this:",[164,329,330],{},[37,331,179,332,337,179,339,140,343,140,347,140,351,355,356,217,360,140,364,140,368,292,372,140,375,378,379,140,383,387,389,179,391,395,179,397,140,400,46,403,263,405,140,408,140,412,140,416,419,421,422,424,179,426,430,179,432,140,435,217,438,234],{},[40,333,336],{"className":334},[43,335],"comment","; save new regrowth time in a temporary LevelSpace let-variable",[177,338],{},[40,340,342],{"className":341},[43,50],"ls:let",[40,344,346],{"className":345},[43,50],"new-regrowth-time",[40,348,350],{"className":349},[43,200],"25",[40,352,354],{"className":353},[43,282],"+"," ( ",[40,357,359],{"className":358},[43,282],"abs",[40,361,363],{"className":362},[43,50],"temperature",[40,365,367],{"className":366},[43,282],"-",[40,369,371],{"className":370},[43,200],"55",[40,373,296],{"className":374},[43,50],[40,376,326],{"className":377},[43,50]," ) ",[40,380,382],{"className":381},[43,282],"/",[40,384,386],{"className":385},[43,200],"2",[177,388],{},[177,390],{},[40,392,394],{"className":393},[43,335],"; remove decimals, pass it to the wolf sheep predation model and change the time",[177,396],{},[40,398,212],{"className":399},[43,50],[40,401,322],{"className":402},[43,50],[177,404],{},[40,406,221],{"className":407},[43,189],[40,409,411],{"className":410},[43,50],"grass-regrowth-time",[40,413,415],{"className":414},[43,282],"round",[40,417,346],{"className":418},[43,50],[177,420],{},"  ]",[177,423],{},[177,425],{},[40,427,429],{"className":428},[43,335],"; finally ask both models to go",[177,431],{},[40,433,212],{"className":434},[43,50],[40,436,216],{"className":437},[43,50],[40,439,260],{"className":440},[43,50],[61,442,445],{"id":443,"className":444},"a-general-usecase-tidying-up-dead-child-models",[14],[16,446,449],{"className":447,"href":448},[19],"#a-general-usecase-tidying-up-dead-child-models","A general Usecase: Tidying up “Dead” Child Models",[33,451,452,453,455],{},"As previously mentioned, it is important to keep track of “living” and “dead” models when you dynamically create and dispose of models. Let us imagine we have some lists of models of different kinds, and we want to make sure that we only keep the models that are alive. After running code that kills child models we can use the ",[37,454,139],{}," primitive to clean up our list of models like this:",[164,457,458],{},[37,459,460,140,464,46,468,52,472,179,474,140,478,482,483,292,486,140,490,140,494,497,498,501],{},[40,461,463],{"className":462},[43,44],"to-report",[40,465,467],{"className":466},[43,50],"remove-dead-models",[40,469,471],{"className":470},[43,50],"list-of-models",[177,473],{},[40,475,477],{"className":476},[43,189],"report",[40,479,481],{"className":480},[43,282],"filter"," [ [ ",[40,484,120],{"className":485},[43,50],[40,487,489],{"className":488},[43,282],"->",[40,491,493],{"className":492},[43,50],"ls:model-exists",[40,495,120],{"className":496},[43,50],"] ",[40,499,471],{"className":500},[43,50],[40,502,504,246],{"className":503},[43,44],[177,505],{},[33,507,508],{},"We then reassign each list of models with this, e.g.",[164,510,511],{},[37,512,513,515,140,518,140,522,140,525,528,530,140,533,140,537,140,540],{},[177,514],{},[40,516,221],{"className":517},[43,189],[40,519,521],{"className":520},[43,50],"a-list-of-models",[40,523,467],{"className":524},[43,50],[40,526,521],{"className":527},[43,50],[177,529],{},[40,531,221],{"className":532},[43,189],[40,534,536],{"className":535},[43,50],"another-list-of-models",[40,538,467],{"className":539},[43,50],[40,541,521],{"className":542},[43,50],[33,544,545],{},",## Citing LevelSpace in Research",[33,547,548],{},"If you use LevelSpace in research, we ask that you cite us,",[33,550,551,552,557],{},"Hjorth, A.  Head, B. & Wilensky, U. (2015). “LevelSpace NetLogo extension”. ",[16,553,554],{"href":554,"rel":555},"http://ccl.northwestern.edu/rp/levelspace/index.shtml",[556],"nofollow"," Evanston, IL: Center for Connected Learning and Computer Based Modeling, Northwestern University.",[23,559,562],{"id":560,"className":561},"primitives",[14],[16,563,566],{"className":564,"href":565},[19],"#primitives","Primitives",[33,568,569,570,121],{},"Looking for the primitive reference for the LevelSpace extension? You can find ",[16,571,573],{"href":572},"/ls/dictionary","the full reference here",[61,575,578],{"id":576,"className":577},"commanding-and-reporting",[14],[16,579,582],{"className":580,"href":581},[19],"#commanding-and-reporting","Commanding and Reporting",[584,585,587,588,587,594,587,600,587,607,587,614,587,620],"div",{"id":586},"interaction","\n  ",[16,589,592],{"className":590,"href":591},[37],"#ask",[37,593,212],{},[16,595,598],{"className":596,"href":597},[37],"#of",[37,599,296],{},[16,601,604],{"className":602,"href":603},[37],"#report",[37,605,606],{},"ls:report",[16,608,611],{"className":609,"href":610},[37],"#with",[37,612,613],{},"ls:with",[16,615,618],{"className":616,"href":617},[37],"#let",[37,619,342],{},[16,621,624],{"className":622,"href":623},[37],"#assign",[37,625,626],{},"ls:assign",[61,628,631],{"id":629,"className":630},"logic-and-control",[14],[16,632,635],{"className":633,"href":634},[19],"#logic-and-control","Logic and Control",[584,637,587,639,587,645,587,652,587,659,587,666,587,673,587,680,587,687],{"id":638},"logic",[16,640,643],{"className":641,"href":642},[37],"#models",[37,644,216],{},[16,646,649],{"className":647,"href":648},[37],"#show",[37,650,651],{},"ls:show",[16,653,656],{"className":654,"href":655},[37],"#show-all",[37,657,658],{},"ls:show-all",[16,660,663],{"className":661,"href":662},[37],"#hide",[37,664,665],{},"ls:hide",[16,667,670],{"className":668,"href":669},[37],"#hide-all",[37,671,672],{},"ls:hide-all",[16,674,677],{"className":675,"href":676},[37],"#path-of",[37,678,679],{},"ls:path-of",[16,681,684],{"className":682,"href":683},[37],"#name-of",[37,685,686],{},"ls:name-of",[16,688,691],{"className":689,"href":690},[37],"#model-exists",[37,692,139],{},[61,694,697],{"id":695,"className":696},"opening-and-closing-models",[14],[16,698,701],{"className":699,"href":700},[19],"#opening-and-closing-models","Opening and Closing Models",[584,703,587,705,587,711,587,718,587,725],{"id":704},"opening-closing",[16,706,709],{"className":707,"href":708},[37],"#create-models",[37,710,196],{},[16,712,715],{"className":713,"href":714},[37],"#create-interactive-models",[37,716,717],{},"ls:create-interactive-models",[16,719,722],{"className":720,"href":721},[37],"#close",[37,723,724],{},"ls:close",[16,726,729],{"className":727,"href":728},[37],"#reset",[37,730,183],{},[61,732,735],{"id":733,"className":734},"all-primitives",[14],[16,736,739],{"className":737,"href":738},[19],"#all-primitives","All Primitives",[584,741,587,745,587,751,781,790,796,839],{"className":742,"id":744},[743],"dict_entry","create-models",[61,746,748,749,587],{"id":747},"lscreate-models","\n    ",[16,750,196],{"href":708},[752,753,756],"h4",{"id":754,"className":755},"lscreate-models-netlogonumber-path-lscreate-models-netlogonumber-path-command",[14],[16,757,748,760,748,772,587],{"className":758,"href":759},[19],"#----lscreate-models-netlogonumber-path----lscreate-models-netlogonumber-path-command--",[40,761,764,765,140,769],{"className":762},[763],"prim_example","ls:create-models ",[766,767,768],"i",{},"netlogonumber",[766,770,771],{},"path",[40,773,764,775,140,777,140,779],{"className":774},[763],[766,776,768],{},[766,778,771],{},[766,780,189],{},[33,782,783,784,786,787,789],{},"Create the specified number of instances of the given model.  The path can be absolute, or relative to the main model. Compared with ",[37,785,717],{},", this primitive creates lightweight models that are hidden by default. You should use this primitive if you plan on having many instances of the given model. The models may be shown using ",[37,788,651],{},"; when visible, they will have a view and command center, but no other widgets, e.g. plots or monitors.",[33,791,792,793,795],{},"If given a command, LevelSpace will call the command after loading each instance of the model with the ",[37,794,120],{}," as the argument. This allows you to easily store model ids in a variable or list when loading models, or do other initialization. For example, to store a model id in a variable, you can do:",[164,797,798],{},[37,799,800,140,804,140,807,811,813,814,140,817,821,822,497,826,140,829,140,832,140,835,838],{},[40,801,803],{"className":802},[43,189],"let",[40,805,120],{"className":806},[43,50],[40,808,810],{"className":809},[43,200],"0",[177,812],{},"(",[40,815,196],{"className":816},[43,50],[40,818,820],{"className":819},[43,205],"\"My-Model.nlogox\""," [ [",[40,823,825],{"className":824},[43,50],"id",[40,827,489],{"className":828},[43,282],[40,830,221],{"className":831},[43,189],[40,833,120],{"className":834},[43,50],[40,836,825],{"className":837},[43,50]," ])",[33,840,841,842,845],{},"Child model RNGs are seeded from the parent models RNG when they are created.\nThus, if you seed the parent’s model RNG before child model before child models are created, the simulation as a whole will be reproducible.\nUse the ",[37,843,844],{},"ls:random-seed"," primitive to seed the model system’s RNGs after child models have been created.",[584,847,587,850,587,855,880,892],{"className":848,"id":849},[743],"create-interactive-models",[61,851,748,853,587],{"id":852},"lscreate-interactive-models",[16,854,717],{"href":714},[752,856,859],{"id":857,"className":858},"lscreate-interactive-models-netlogonumber-path-lscreate-interactive-models-netlogonumber-path-command",[14],[16,860,748,863,748,871,587],{"className":861,"href":862},[19],"#----lscreate-interactive-models-netlogonumber-path----lscreate-interactive-models-netlogonumber-path-command--",[40,864,866,867,140,869],{"className":865},[763],"ls:create-interactive-models ",[766,868,768],{},[766,870,771],{},[40,872,866,874,140,876,140,878],{"className":873},[763],[766,875,768],{},[766,877,771],{},[766,879,189],{},[33,881,882,883,885,886,888,889,891],{},"Like ",[37,884,196],{},", creates the specified number of instances of the given model. Unlike ",[37,887,196],{},", ",[37,890,717],{}," creates models that are visible by default, and have all widgets. You should use this primitive if you plan on having only a handful of instances of the given model, and would like to be able to interact with the instances through their interfaces during runtime.",[33,893,841,894,845],{},[37,895,844],{},[584,897,587,900,587,905,920],{"className":898,"id":899},[743],"close",[61,901,748,903,587],{"id":902},"lsclose",[16,904,724],{"href":721},[752,906,909],{"id":907,"className":908},"lsclose-model-or-list-of-models",[14],[16,910,748,913,587],{"className":911,"href":912},[19],"#----lsclose-model-or-list-of-models--",[40,914,916,917],{"className":915},[763],"ls:close ",[766,918,919],{},"model-or-list-of-models",[33,921,922,923,121],{},"Close the model or models with the given ",[37,924,120],{},[584,926,587,929,587,934,945,948],{"className":927,"id":928},[743],"reset",[61,930,748,932,587],{"id":931},"lsreset",[16,933,183],{"href":728},[752,935,938],{"id":936,"className":937},"lsreset-1",[14],[16,939,748,942,587],{"className":940,"href":941},[19],"#----lsreset---1",[40,943,183],{"className":944},[763],[33,946,947],{},"Close down all child models (and, recursively, their child models). You’ll often want to call this in your setup procedure.",[33,949,950,951,954,955,959],{},"Note that ",[37,952,953],{},"clear-all"," does ",[956,957,958],"em",{},"not"," close LevelSpace models.",[584,961,587,964,587,969,988,991,1009,1012,1028,1031,1101],{"className":962,"id":963},[743],"ask",[61,965,748,967,587],{"id":966},"lsask",[16,968,212],{"href":591},[752,970,973],{"id":971,"className":972},"lsask-model-or-list-of-models-command-argument",[14],[16,974,748,977,587],{"className":975,"href":976},[19],"#----lsask-model-or-list-of-models-command-argument--",[40,978,980,981,140,983,140,985],{"className":979},[763],"ls:ask ",[766,982,919],{},[766,984,189],{},[766,986,987],{},"argument",[33,989,990],{},"Ask the given child model or list of child models to run the given command. This is the primary of doing things with child models. For example:",[164,992,993],{},[37,994,995,140,998,217,1001,140,1005,234],{},[40,996,212],{"className":997},[43,50],[40,999,120],{"className":1000},[43,50],[40,1002,1004],{"className":1003},[43,189],"create-turtles",[40,1006,1008],{"className":1007},[43,200],"5",[33,1010,1011],{},"You can also ask a list of models to all do the same thing:",[164,1013,1014],{},[37,1015,1016,140,1019,217,1022,140,1025,234],{},[40,1017,212],{"className":1018},[43,50],[40,1020,216],{"className":1021},[43,50],[40,1023,1004],{"className":1024},[43,189],[40,1026,1008],{"className":1027},[43,200],[33,1029,1030],{},"You may supply the command with arguments, just like you would with anonymous commands:",[164,1032,1033],{},[37,1034,1035,140,1038,140,1042,1045,1047,140,1050,140,1054,1057,813,1059,140,1062,821,1065,140,1069,497,1073,140,1076,140,1079,140,1083,217,1086,140,1090,1093,1094,140,1097,1100],{},[40,1036,803],{"className":1037},[43,189],[40,1039,1041],{"className":1040},[43,50],"turtle-id",[40,1043,810],{"className":1044},[43,200],[177,1046],{},[40,1048,803],{"className":1049},[43,189],[40,1051,1053],{"className":1052},[43,50],"speed",[40,1055,1008],{"className":1056},[43,200],[177,1058],{},[40,1060,212],{"className":1061},[43,50],[40,1063,120],{"className":1064},[43,50],[40,1066,1068],{"className":1067},[43,50],"t",[40,1070,1072],{"className":1071},[43,50],"s",[40,1074,489],{"className":1075},[43,282],[40,1077,963],{"className":1078},[43,189],[40,1080,1082],{"className":1081},[43,282],"turtle",[40,1084,1068],{"className":1085},[43,50],[40,1087,1089],{"className":1088},[43,189],"fd",[40,1091,1072],{"className":1092},[43,50]," ] ] ",[40,1095,1041],{"className":1096},[43,50],[40,1098,1053],{"className":1099},[43,50],")",[33,1102,1103,1104,121],{},"Note that the commands cannot access variables in the parent model directly. You must either pass information in through arguments or using ",[37,1105,342],{},[584,1107,587,1110,587,1115,1131,1134,1153],{"className":1108,"id":1109},[743],"of",[61,1111,748,1113,587],{"id":1112},"lsof",[16,1114,296],{"href":597},[752,1116,1119],{"id":1117,"className":1118},"reporter-lsof-model-or-list-of-models",[14],[16,1120,748,1123,587],{"className":1121,"href":1122},[19],"#----reporter-lsof-model-or-list-of-models--",[40,1124,1126,1128,1129],{"className":1125},[763],[766,1127,282],{}," ls:of ",[766,1130,919],{},[33,1132,1133],{},"Run the given reporter in the given model and report the result.",[33,1135,1136,1138,1139,1141,1142,1144,1145,1147,1148,1150,1151,121],{},[37,1137,296],{}," is designed to work like NetLogo’s inbuilt ",[37,1140,1109],{},": If you send ",[37,1143,296],{}," a ",[37,1146,120],{},", it will report the value of the reporter from that model. If you send it a list of model-ids, it will report a list of values of the reporter string from all models. You cannot pass arguments to ",[37,1149,296],{},", but you can use ",[37,1152,342],{},[164,1154,1155],{},[37,1156,1157,1158,140,1161,292,1165,140,1168],{},"[ ",[40,1159,287],{"className":1160},[43,282],[40,1162,1164],{"className":1163},[43,282],"turtles",[40,1166,296],{"className":1167},[43,50],[40,1169,120],{"className":1170},[43,50],[584,1172,587,1174,587,1179,1197,1200],{"className":1173,"id":477},[743],[61,1175,748,1177,587],{"id":1176},"lsreport",[16,1178,606],{"href":603},[752,1180,1183],{"id":1181,"className":1182},"lsreport-model-or-list-of-models-reporter-argument",[14],[16,1184,748,1187,587],{"className":1185,"href":1186},[19],"#----lsreport-model-or-list-of-models-reporter-argument--",[40,1188,1190,1191,140,1193,140,1195],{"className":1189},[763],"ls:report ",[766,1192,919],{},[766,1194,282],{},[766,1196,987],{},[33,1198,1199],{},"Run the given reporter in the given model and report the result. This form exists to allow you to pass arguments to the reporter.",[164,1201,1202],{},[37,1203,1204,140,1207,140,1210,1213,813,1215,140,1218,821,1221,497,1225,217,1228,292,1232,140,1235,140,1238,292,1241,1100],{},[40,1205,803],{"className":1206},[43,189],[40,1208,1041],{"className":1209},[43,50],[40,1211,810],{"className":1212},[43,200],[177,1214],{},[40,1216,606],{"className":1217},[43,50],[40,1219,120],{"className":1220},[43,50],[40,1222,1224],{"className":1223},[43,50],"a-turtle",[40,1226,489],{"className":1227},[43,282],[40,1229,1231],{"className":1230},[43,282],"color",[40,1233,1109],{"className":1234},[43,282],[40,1236,1082],{"className":1237},[43,282],[40,1239,1224],{"className":1240},[43,50],[40,1242,1041],{"className":1243},[43,50],[584,1245,587,1248,587,1253,1269,1275],{"className":1246,"id":1247},[743],"with",[61,1249,748,1251,587],{"id":1250},"lswith",[16,1252,613],{"href":610},[752,1254,1257],{"id":1255,"className":1256},"list-of-models-lswith-reporter",[14],[16,1258,748,1261,587],{"className":1259,"href":1260},[19],"#----list-of-models-lswith-reporter--",[40,1262,1264,1266,1267],{"className":1263},[763],[766,1265,471],{}," ls:with ",[766,1268,282],{},[33,1270,1271,1272,1274],{},"Reports a new list of models containing only those models that report ",[37,1273,230],{}," when they run the reporter block.",[164,1276,1277],{},[37,1278,1279,140,1282,217,1285,140,1288,140,1291,140,1295,234],{},[40,1280,216],{"className":1281},[43,50],[40,1283,613],{"className":1284},[43,50],[40,1286,287],{"className":1287},[43,282],[40,1289,1164],{"className":1290},[43,282],[40,1292,1294],{"className":1293},[43,282],">",[40,1296,1298],{"className":1297},[43,200],"100",[584,1300,587,1302,587,1307,1325,1328,1380,1388,1417,1425,1432,1435,1461,1472,1479,1481,1544,1560,1565,1571,1592,1595,1598,1647],{"className":1301,"id":803},[743],[61,1303,748,1305,587],{"id":1304},"lslet",[16,1306,342],{"href":617},[752,1308,1311],{"id":1309,"className":1310},"lslet-variable-name-value",[14],[16,1312,748,1315,587],{"className":1313,"href":1314},[19],"#----lslet-variable-name-value--",[40,1316,1318,1319,140,1322],{"className":1317},[763],"ls:let ",[766,1320,1321],{},"variable-name",[766,1323,1324],{},"value",[33,1326,1327],{},"Creates a variable containing the given data that can be accessed by the child models.",[164,1329,1330],{},[37,1331,1332,140,1335,46,1338,179,1340,140,1343,140,1347,1350,179,1352,140,1355,46,1359,263,1361,140,1364,217,1367,140,1370,140,1373,234,1376,421,1378,52],{},[40,1333,963],{"className":1334},[43,189],[40,1336,1164],{"className":1337},[43,282],[177,1339],{},[40,1341,342],{"className":1342},[43,50],[40,1344,1346],{"className":1345},[43,50],"my-color",[40,1348,1231],{"className":1349},[43,282],[177,1351],{},[40,1353,212],{"className":1354},[43,50],[40,1356,1358],{"className":1357},[43,50],"my-model",[177,1360],{},[40,1362,963],{"className":1363},[43,189],[40,1365,1164],{"className":1366},[43,282],[40,1368,221],{"className":1369},[43,189],[40,1371,1231],{"className":1372},[43,282],[40,1374,1346],{"className":1375},[43,50],[177,1377],{},[177,1379],{},[33,1381,1382,1384,1385,1387],{},[37,1383,342],{}," works quite similar to ",[37,1386,803],{}," in that the variable is only locally accessible:",[164,1389,1390],{},[37,1391,1392,140,1395,46,1398,179,1400,140,1403,140,1406,1409,52,1411,1413],{},[40,1393,963],{"className":1394},[43,189],[40,1396,1164],{"className":1397},[43,282],[177,1399],{},[40,1401,342],{"className":1402},[43,50],[40,1404,1346],{"className":1405},[43,50],[40,1407,1231],{"className":1408},[43,282],[177,1410],{},[177,1412],{},[40,1414,1416],{"className":1415},[43,335],";; my-color is innaccessible here",[33,1418,1419,1421,1422,1424],{},[37,1420,342],{}," is very similar to ",[37,1423,803],{},", except in a few cases.",[77,1426,1427],{},[80,1428,1429,1431],{},[37,1430,342],{}," will overwrite previous values in the variable",[33,1433,1434],{},"If you do",[164,1436,1437],{},[37,1438,1439,140,1442,140,1446,1449,1451,140,1454,140,1457],{},[40,1440,342],{"className":1441},[43,50],[40,1443,1445],{"className":1444},[43,50],"my-var",[40,1447,1008],{"className":1448},[43,200],[177,1450],{},[40,1452,342],{"className":1453},[43,50],[40,1455,1445],{"className":1456},[43,50],[40,1458,1460],{"className":1459},[43,200],"6",[33,1462,1463,1465,1466,1468,1469,121],{},[37,1464,1445],{}," will be set equal to ",[37,1467,1460],{},". There is no ",[37,1470,1471],{},"ls:set",[77,1473,1474],{},[80,1475,1476,1478],{},[37,1477,342],{}," supports variable shadowing",[33,1480,1434],{},[164,1482,1483],{},[37,1484,1485,140,1488,140,1491,1494,1496,140,1499,46,1502,179,1504,140,1507,140,1510,1513,179,1515,140,1518,217,1522,140,1525,234,1528,52,1530,1532,140,1535,217,1538,140,1541,234],{},[40,1486,342],{"className":1487},[43,50],[40,1489,1445],{"className":1490},[43,50],[40,1492,1008],{"className":1493},[43,200],[177,1495],{},[40,1497,963],{"className":1498},[43,189],[40,1500,1164],{"className":1501},[43,282],[177,1503],{},[40,1505,342],{"className":1506},[43,50],[40,1508,1445],{"className":1509},[43,50],[40,1511,1460],{"className":1512},[43,200],[177,1514],{},[40,1516,212],{"className":1517},[43,50],[40,1519,1521],{"className":1520},[43,50],"child-model",[40,1523,278],{"className":1524},[43,189],[40,1526,1445],{"className":1527},[43,50],[177,1529],{},[177,1531],{},[40,1533,212],{"className":1534},[43,50],[40,1536,1521],{"className":1537},[43,50],[40,1539,278],{"className":1540},[43,189],[40,1542,1445],{"className":1543},[43,50],[33,1545,1546,1548,1549,1551,1552,1554,1555,121],{},[37,1547,1521],{}," will show ",[37,1550,1460],{}," and then ",[37,1553,1008],{},". This is known as ",[16,1556,1559],{"href":1557,"rel":1558},"https://en.wikipedia.org/wiki/Variable_shadowing",[556],"variable shadowing",[77,1561,1562],{},[80,1563,1564],{},"The parent model cannot directly read the value of an ls variable",[33,1566,1567,1568,1570],{},"For example, this does ",[956,1569,958],{}," work.",[164,1572,1573],{},[37,1574,1575,140,1578,140,1581,1584,1586,140,1589],{},[40,1576,342],{"className":1577},[43,50],[40,1579,1445],{"className":1580},[43,50],[40,1582,1008],{"className":1583},[43,200],[177,1585],{},[40,1587,278],{"className":1588},[43,189],[40,1590,1445],{"className":1591},[43,50],[33,1593,1594],{},"This is intentional. ls variables are meant to be used for sharing data with child models. The parent model already has access to the data.",[33,1596,1597],{},"Furthermore, changing the value of an ls let variable in a child model will not affect it in any other model. For example:",[164,1599,1600],{},[37,1601,1602,140,1605,140,1608,1611,1613,140,1616,46,1619,179,1621,140,1624,140,1627,140,1630,140,1633,1637,179,1639,140,1642,1645,52],{},[40,1603,342],{"className":1604},[43,50],[40,1606,1445],{"className":1607},[43,50],[40,1609,810],{"className":1610},[43,200],[177,1612],{},[40,1614,212],{"className":1615},[43,50],[40,1617,216],{"className":1618},[43,50],[177,1620],{},[40,1622,221],{"className":1623},[43,189],[40,1625,1445],{"className":1626},[43,50],[40,1628,1445],{"className":1629},[43,50],[40,1631,354],{"className":1632},[43,282],[40,1634,1636],{"className":1635},[43,200],"1",[177,1638],{},[40,1640,278],{"className":1641},[43,189],[40,1643,1445],{"className":1644},[43,50],[177,1646],{},[33,1648,1649,1650,121],{},"All models will print ",[37,1651,1636],{},[584,1653,587,1656,587,1661,1680,1683,1703],{"className":1654,"id":1655},[743],"assign",[61,1657,748,1659,587],{"id":1658},"lsassign",[16,1660,626],{"href":623},[752,1662,1665],{"id":1663,"className":1664},"lsassign-model-or-list-of-models-global-variable-value",[14],[16,1666,748,1669,587],{"className":1667,"href":1668},[19],"#----lsassign-model-or-list-of-models-global-variable-value--",[40,1670,1672,1673,140,1675,140,1678],{"className":1671},[763],"ls:assign ",[766,1674,919],{},[766,1676,1677],{},"global-variable",[766,1679,1324],{},[33,1681,1682],{},"Sets the given global variable in child model to given value. For instance",[164,1684,1685],{},[37,1686,1687,140,1690,140,1693,140,1697,140,1700],{},[40,1688,626],{"className":1689},[43,50],[40,1691,216],{"className":1692},[43,50],[40,1694,1696],{"className":1695},[43,50],"glob1",[40,1698,287],{"className":1699},[43,282],[40,1701,1164],{"className":1702},[43,282],[33,1704,1705,1706,1708,1709,121],{},"sets the global variable ",[37,1707,1696],{}," in all models to the parent’s model ",[37,1710,1711,140,1714],{},[40,1712,287],{"className":1713},[43,282],[40,1715,1164],{"className":1716},[43,282],[584,1718,587,1721,587,1726,1737],{"className":1719,"id":1720},[743],"models",[61,1722,748,1724,587],{"id":1723},"lsmodels",[16,1725,216],{"href":642},[752,1727,1730],{"id":1728,"className":1729},"lsmodels-1",[14],[16,1731,748,1734,587],{"className":1732,"href":1733},[19],"#----lsmodels---1",[40,1735,216],{"className":1736},[763],[33,1738,1739],{},"Report a list of model-ids for all existing models.",[584,1741,587,1743,587,1748,1762],{"className":1742,"id":278},[743],[61,1744,748,1746,587],{"id":1745},"lsshow",[16,1747,651],{"href":648},[752,1749,1752],{"id":1750,"className":1751},"lsshow-model-or-list-of-models",[14],[16,1753,748,1756,587],{"className":1754,"href":1755},[19],"#----lsshow-model-or-list-of-models--",[40,1757,1759,1760],{"className":1758},[763],"ls:show ",[766,1761,919],{},[33,1763,1764],{},"Makes all of the given models visible.",[584,1766,587,1769,587,1774,1788],{"className":1767,"id":1768},[743],"show-all",[61,1770,748,1772,587],{"id":1771},"lsshow-all",[16,1773,658],{"href":655},[752,1775,1778],{"id":1776,"className":1777},"lsshow-all-model-or-list-of-models",[14],[16,1779,748,1782,587],{"className":1780,"href":1781},[19],"#----lsshow-all-model-or-list-of-models--",[40,1783,1785,1786],{"className":1784},[763],"ls:show-all ",[766,1787,919],{},[33,1789,1790,1791,1794],{},"Makes all of the given models ",[956,1792,1793],{},"and their descendents"," visible.",[584,1796,587,1799,587,1804,1818],{"className":1797,"id":1798},[743],"hide",[61,1800,748,1802,587],{"id":1801},"lshide",[16,1803,665],{"href":662},[752,1805,1808],{"id":1806,"className":1807},"lshide-model-or-list-of-models",[14],[16,1809,748,1812,587],{"className":1810,"href":1811},[19],"#----lshide-model-or-list-of-models--",[40,1813,1815,1816],{"className":1814},[763],"ls:hide ",[766,1817,919],{},[33,1819,1820],{},"Hide all of the given models. Hiding models is a good way of making your simulation run faster.",[584,1822,587,1825,587,1830,1844],{"className":1823,"id":1824},[743],"hide-all",[61,1826,748,1828,587],{"id":1827},"lshide-all",[16,1829,672],{"href":669},[752,1831,1834],{"id":1832,"className":1833},"lshide-all-model-or-list-of-models",[14],[16,1835,748,1838,587],{"className":1836,"href":1837},[19],"#----lshide-all-model-or-list-of-models--",[40,1839,1841,1842],{"className":1840},[763],"ls:hide-all ",[766,1843,919],{},[33,1845,1846,1847,1849],{},"Hide all of the given models ",[956,1848,1793],{},". Hiding models is a good way of making your simulation run faster.",[584,1851,587,1854,587,1859,1873],{"className":1852,"id":1853},[743],"path-of",[61,1855,748,1857,587],{"id":1856},"lspath-of",[16,1858,679],{"href":676},[752,1860,1863],{"id":1861,"className":1862},"lspath-of-model-or-list-of-models",[14],[16,1864,748,1867,587],{"className":1865,"href":1866},[19],"#----lspath-of-model-or-list-of-models--",[40,1868,1870,1871],{"className":1869},[763],"ls:path-of ",[766,1872,919],{},[33,1874,1875],{},"Report the full path, including the file name of the model. If a list of models is given, a list of paths is reported.",[584,1877,587,1880,587,1885,1899],{"className":1878,"id":1879},[743],"name-of",[61,1881,748,1883,587],{"id":1882},"lsname-of",[16,1884,686],{"href":683},[752,1886,1889],{"id":1887,"className":1888},"lsname-of-model-or-list-of-models",[14],[16,1890,748,1893,587],{"className":1891,"href":1892},[19],"#----lsname-of-model-or-list-of-models--",[40,1894,1896,1897],{"className":1895},[763],"ls:name-of ",[766,1898,919],{},[33,1900,1901],{},"Reports the name of the model file. This is the name of the window in which the model appears when visible. If a list of models is given, a list of names is reported.",[584,1903,587,1906,587,1911,1925],{"className":1904,"id":1905},[743],"model-exists",[61,1907,748,1909,587],{"id":1908},"lsmodel-exists",[16,1910,139],{"href":690},[752,1912,1915],{"id":1913,"className":1914},"lsmodel-exists-model-or-list-of-models",[14],[16,1916,748,1919,587],{"className":1917,"href":1918},[19],"#----lsmodel-exists-model-or-list-of-models--",[40,1920,1922,1923],{"className":1921},[763],"ls:model-exists? ",[766,1924,919],{},[33,1926,1927],{},"Report a boolean value for whether there is a model with that model-id. This is often useful when you are dynamically generating models, and want to ensure that you are not asking models that no longer exist to do stuff.",[584,1929,587,1932,587,1938,1953],{"className":1930,"id":1931},[743],"random-seed",[61,1933,748,1935,587],{"id":1934},"lsrandom-seed",[16,1936,844],{"href":1937},"#random-seed",[752,1939,1942],{"id":1940,"className":1941},"lsrandom-seed-seed",[14],[16,1943,748,1946,587],{"className":1944,"href":1945},[19],"#----lsrandom-seed-seed--",[40,1947,1949,1950],{"className":1948},[763],"ls:random-seed ",[766,1951,1952],{},"seed",[33,1954,1955,1956,1958],{},"Behaves exactly like NetLogo’s built-in primitive ",[37,1957,1931],{},", except that child models have their RNGs seeded based on the given seed as well (as well their child models, and their child models’ child models, and so forth).\nThis primitive should almost always be used instead of NetLogo’s built-in one for seeding RNG when using LevelSpace.",{"title":1960,"searchDepth":1961,"depth":1962,"links":1963},"",5,3,[1964,1972],{"id":25,"depth":1965,"text":31,"children":1966},2,[1967,1968,1969,1970,1971],{"id":63,"depth":1962,"text":69},{"id":108,"depth":1962,"text":114},{"id":150,"depth":1962,"text":156},{"id":307,"depth":1962,"text":313},{"id":443,"depth":1962,"text":449},{"id":560,"depth":1965,"text":566,"children":1973},[1974,1975,1976,1977,1978,1984,1989,1994,1998,2003,2008,2013,2018,2023,2028,2032,2037,2042,2047,2052,2057,2062,2067],{"id":576,"depth":1962,"text":582},{"id":629,"depth":1962,"text":635},{"id":695,"depth":1962,"text":701},{"id":733,"depth":1962,"text":739},{"id":747,"depth":1962,"text":1979,"children":1980},"\n    ls:create-models\n  ",[1981],{"id":754,"depth":1982,"text":1983},4,"\n    ls:create-models netlogonumber path\n    ls:create-models netlogonumber path command\n  ",{"id":852,"depth":1962,"text":1985,"children":1986},"\n    ls:create-interactive-models\n  ",[1987],{"id":857,"depth":1982,"text":1988},"\n    ls:create-interactive-models netlogonumber path\n    ls:create-interactive-models netlogonumber path command\n  ",{"id":902,"depth":1962,"text":1990,"children":1991},"\n    ls:close\n  ",[1992],{"id":907,"depth":1982,"text":1993},"\n    ls:close model-or-list-of-models\n  ",{"id":931,"depth":1962,"text":1995,"children":1996},"\n    ls:reset\n  ",[1997],{"id":936,"depth":1982,"text":1995},{"id":966,"depth":1962,"text":1999,"children":2000},"\n    ls:ask\n  ",[2001],{"id":971,"depth":1982,"text":2002},"\n    ls:ask model-or-list-of-models command argument\n  ",{"id":1112,"depth":1962,"text":2004,"children":2005},"\n    ls:of\n  ",[2006],{"id":1117,"depth":1982,"text":2007},"\n    reporter ls:of model-or-list-of-models\n  ",{"id":1176,"depth":1962,"text":2009,"children":2010},"\n    ls:report\n  ",[2011],{"id":1181,"depth":1982,"text":2012},"\n    ls:report model-or-list-of-models reporter argument\n  ",{"id":1250,"depth":1962,"text":2014,"children":2015},"\n    ls:with\n  ",[2016],{"id":1255,"depth":1982,"text":2017},"\n    list-of-models ls:with reporter\n  ",{"id":1304,"depth":1962,"text":2019,"children":2020},"\n    ls:let\n  ",[2021],{"id":1309,"depth":1982,"text":2022},"\n    ls:let variable-name value\n  ",{"id":1658,"depth":1962,"text":2024,"children":2025},"\n    ls:assign\n  ",[2026],{"id":1663,"depth":1982,"text":2027},"\n    ls:assign model-or-list-of-models global-variable value\n  ",{"id":1723,"depth":1962,"text":2029,"children":2030},"\n    ls:models\n  ",[2031],{"id":1728,"depth":1982,"text":2029},{"id":1745,"depth":1962,"text":2033,"children":2034},"\n    ls:show\n  ",[2035],{"id":1750,"depth":1982,"text":2036},"\n    ls:show model-or-list-of-models\n  ",{"id":1771,"depth":1962,"text":2038,"children":2039},"\n    ls:show-all\n  ",[2040],{"id":1776,"depth":1982,"text":2041},"\n    ls:show-all model-or-list-of-models\n  ",{"id":1801,"depth":1962,"text":2043,"children":2044},"\n    ls:hide\n  ",[2045],{"id":1806,"depth":1982,"text":2046},"\n    ls:hide model-or-list-of-models\n  ",{"id":1827,"depth":1962,"text":2048,"children":2049},"\n    ls:hide-all\n  ",[2050],{"id":1832,"depth":1982,"text":2051},"\n    ls:hide-all model-or-list-of-models\n  ",{"id":1856,"depth":1962,"text":2053,"children":2054},"\n    ls:path-of\n  ",[2055],{"id":1861,"depth":1982,"text":2056},"\n    ls:path-of model-or-list-of-models\n  ",{"id":1882,"depth":1962,"text":2058,"children":2059},"\n    ls:name-of\n  ",[2060],{"id":1887,"depth":1982,"text":2061},"\n    ls:name-of model-or-list-of-models\n  ",{"id":1908,"depth":1962,"text":2063,"children":2064},"\n    ls:model-exists?\n  ",[2065],{"id":1913,"depth":1982,"text":2066},"\n    ls:model-exists? model-or-list-of-models\n  ",{"id":1934,"depth":1962,"text":2068,"children":2069},"\n    ls:random-seed\n  ",[2070],{"id":1940,"depth":1982,"text":2071},"\n    ls:random-seed seed\n  ","Documentation for the LevelSpace extension.","md",{"source":2075,"metadataOutputPath":2076,"projectConfig":2077,"language":2079,"output":2088,"inheritFrom":2089,"version":2084,"icon":2090,"extensionName":2091,"assetsRoot":2086},"../../external/extensions/ls/ls.md","content/ls.metadata.yaml",{"defaults":2078,"projectRoot":121,"outputRoot":2085,"scanRoot":2086,"engine":2087,"version":2084,"dedupeIdenticalDiskWrites":2088},{"language":2079,"output":2080,"inheritFrom":2081,"extension":2073,"title":2083,"version":2084},"en",false,[2082],0,"NetLogo User Manual","7.0.1","content","/Volumes/CCL/netlogo/Helio/external/extensions/ls","mustache",true,[2082],"i-si-flow-parallel-duotone",{"shortName":51,"fullName":21},"/ls",{"title":5,"description":2072},"6JC3A14_6LYuPA5Ury3V0p6c8n1nqBGANXuOz36xzqI",[2096,2101],{"title":2097,"path":2098,"stem":2099,"description":2100,"children":-1},"Logging","/logging","logging","Guide to logging and data collection features in NetLogo for recording simulation data and model outputs.",{"title":2102,"path":2103,"stem":2104,"description":2105,"children":-1},"LevelSpace Extension Dictionary: ask","/ls/ask","ls/ask","Documentation for the ask primitive.",1761668957552]