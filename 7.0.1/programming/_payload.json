[{"data":1,"prerenderedAt":13665},["ShallowReactive",2],{"/programming":3,"/programming-surround":13654},{"id":4,"title":5,"body":6,"description":13626,"extension":13627,"meta":13628,"navigation":13642,"path":13651,"seo":13652,"stem":3526,"__hash__":13653},"content/programming.md","Programming Guide",{"type":7,"value":8,"toc":13526},"minimark",[9,21,25,28,261,269,277,284,302,309,312,315,358,442,464,467,474,477,485,515,538,571,574,863,875,878,927,930,1187,1190,1193,1202,1217,1232,1409,1428,1436,1445,1448,1457,1464,1481,1494,1520,1532,1553,1556,1565,1627,1640,1652,1674,1677,1699,1713,1745,1748,1870,1877,1886,1889,1911,1938,1941,1953,2061,2115,2122,2135,2147,2194,2204,2211,2218,2223,2226,2229,2236,2257,2309,2321,2332,2361,2394,2406,2409,2428,2431,2442,2467,2478,2516,2521,2537,2619,2625,2628,2631,2652,2705,2708,2734,2744,2813,2816,2821,2844,2886,2905,2917,2925,2932,2935,3040,3043,3062,3104,3111,3118,3121,3124,3127,3156,3169,3189,3208,3230,3252,3257,3270,3299,3304,3307,3310,3353,3356,3373,3380,3383,3404,3415,3427,3449,3456,3469,3476,3483,3511,3524,3531,3538,3548,3551,3563,3596,3603,3606,3718,3721,3724,3819,3826,3834,3845,3887,3890,3895,3898,3967,3970,3991,3996,4025,4081,4087,4102,4125,4144,4159,4170,4289,4292,4346,4623,4626,4703,4709,4712,4742,4745,4748,4781,4784,4791,4800,4819,4839,4849,4852,4955,4965,4983,5013,5024,5034,5056,5078,5097,5116,5127,5232,5268,5279,5288,5295,5304,5307,5327,5336,5339,5348,5421,5430,5441,5449,5452,5461,5464,5473,5476,5485,5540,5566,5575,5586,5589,5637,5640,5643,5790,5884,5893,5896,5906,6052,6055,6090,6099,6188,6191,6198,6208,6211,6223,6231,6288,6295,6298,6301,6304,6307,6310,6313,6324,6327,6332,6335,6338,6341,6344,6347,6350,6355,6391,6394,6401,6404,6411,6414,6417,6420,6423,6432,6444,6480,6544,6549,6554,6591,6600,6630,6639,6647,6656,6672,6780,6783,6900,6909,6912,6921,6929,6938,6941,6950,6953,7116,7124,7127,7300,7310,7319,7326,7332,7339,7342,7345,7372,7383,7397,7406,7416,7426,7493,7502,7505,7518,7521,7528,7531,7534,7537,7540,7543,7546,7549,7552,7561,7564,7567,7570,7593,7602,7609,7620,7631,7634,7661,7670,7673,7688,7691,7694,7697,7700,7709,7712,7715,7718,7725,7728,7735,7738,7741,7744,7747,7750,7753,7760,7763,7774,7783,7790,7793,7807,7814,7826,7850,7906,7983,7986,7989,8008,8020,8106,8109,8121,8128,8215,8222,8229,8235,8250,8288,8291,8330,8367,8406,8453,8462,8465,8496,8510,8513,8622,8631,8662,8682,8685,8694,8700,8707,8713,8716,8729,8735,8773,8780,8830,8837,8866,8940,8952,8970,9050,9057,9062,9089,9096,9099,9102,9108,9113,9153,9159,9164,9183,9186,9212,9218,9229,9266,9273,9285,9303,9334,9337,9365,9370,9381,9447,9458,9481,9507,9523,9544,9547,9570,9598,9646,9651,9672,9682,9818,9824,9835,9924,9950,9982,9995,10005,10094,10126,10145,10160,10164,10167,10245,10298,10303,10306,10325,10343,10362,10372,10398,10430,10448,10451,10492,10503,10529,10543,10548,10566,10603,10606,10625,10630,10650,10656,10659,10669,10676,10679,10682,10688,10691,10996,11023,11094,11097,11100,11126,11133,11140,11143,11146,11149,11175,11188,11191,11234,11237,11441,11444,11449,11452,11490,11493,11525,11528,11635,11638,11663,11666,11686,11691,11694,11747,11750,11753,11801,11814,11821,11824,11827,11840,11884,11887,11890,11911,11918,11921,11959,12012,12021,12024,12027,12036,12049,12058,12061,12095,12171,12177,12184,12187,12195,12204,12213,12218,12223,12236,12246,12260,12269,12277,12290,12303,12306,12339,12347,12402,12419,12441,12446,12455,12458,12474,12477,12484,12493,12496,12499,12516,12519,12522,12528,12539,12544,12553,12573,12579,12591,12600,12603,12612,12615,12618,12621,12630,12633,12642,12652,12659,12669,12678,12686,12692,12703,12709,12715,12726,12741,12748,12828,12831,12840,12843,12846,12851,12857,12869,12872,12892,12899,12927,12930,12935,12938,12948,12960,12986,12993,13000,13005,13024,13044,13051,13074,13077,13119,13141,13144,13186,13189,13192,13195,13227,13230,13237,13242,13245,13248,13277,13280,13286,13293,13298,13305,13312,13315,13325,13341,13381,13384,13398,13471,13474,13484,13493,13500,13514,13523],[10,11,15],"h1",{"id":12,"className":13},"programming-guide",[14],"section-heading",[16,17,5],"a",{"className":18,"href":20},[19],"section-anchor","#programming-guide",[22,23,24],"p",{},"This section describes the NetLogo programming language in detail.",[22,26,27],{},"The Code Example models mentioned throughout can be found in the Code Examples\nsection of the Models Library.",[29,30,33,43],"div",{"className":31},[32],"toc",[34,35,38],"h4",{"id":36,"className":37},"table-of-contents",[14],[16,39,42],{"className":40,"href":41},[19],"#table-of-contents","Table of Contents",[44,45,46,109,159,185,191,211,217,223,243,249,255],"ul",{},[47,48,49,53],"li",{},[16,50,52],{"href":51},"#agents-and-agentsets","Agents and Agentsets",[44,54,55,61,67,73,79,85,91,97,103],{},[47,56,57],{},[16,58,60],{"href":59},"#agents","Agents",[47,62,63],{},[16,64,66],{"href":65},"#agentsets","Agentsets",[47,68,69],{},[16,70,72],{"href":71},"#breeds","Breeds",[47,74,75],{},[16,76,78],{"href":77},"#variables","Variables",[47,80,81],{},[16,82,84],{"href":83},"#links","Links",[47,86,87],{},[16,88,90],{"href":89},"#tie","Tie",[47,92,93],{},[16,94,96],{"href":95},"#drawing","Drawing",[47,98,99],{},[16,100,102],{"href":101},"#turtle-shapes","Turtle shapes",[47,104,105],{},[16,106,108],{"href":107},"#link-shapes","Link shapes",[47,110,111,115],{},[16,112,114],{"href":113},"#programming","Programming",[44,116,117,123,129,135,141,147,153],{},[47,118,119],{},[16,120,122],{"href":121},"#procedures","Procedures",[47,124,125],{},[16,126,128],{"href":127},"#ask","Ask",[47,130,131],{},[16,132,134],{"href":133},"#ask-concurrent","Ask-Concurrent",[47,136,137],{},[16,138,140],{"href":139},"#syntax","Syntax",[47,142,143],{},[16,144,146],{"href":145},"#multiple-source-files","Multiple source files",[47,148,149],{},[16,150,152],{"href":151},"#buttons","Buttons",[47,154,155],{},[16,156,158],{"href":157},"#anonymous-procedures","Anonymous procedures",[47,160,161,165],{},[16,162,164],{"href":163},"#world","World",[44,166,167,173,179],{},[47,168,169],{},[16,170,172],{"href":171},"#tick-counter","Tick counter",[47,174,175],{},[16,176,178],{"href":177},"#view-updates","View updates",[47,180,181],{},[16,182,184],{"href":183},"#topology","Topology",[47,186,187],{},[16,188,190],{"href":189},"#observer-perspective","Observer Perspective",[47,192,193,197],{},[16,194,196],{"href":195},"#inputoutput","Input/Output",[44,198,199,205],{},[47,200,201],{},[16,202,204],{"href":203},"#output","Output",[47,206,207],{},[16,208,210],{"href":209},"#file-io","File I/O",[47,212,213],{},[16,214,216],{"href":215},"#lists","Lists",[47,218,219],{},[16,220,222],{"href":221},"#strings","Strings",[47,224,225,229],{},[16,226,228],{"href":227},"#mathematics","Mathematics",[44,230,231,237],{},[47,232,233],{},[16,234,236],{"href":235},"#math","Math",[47,238,239],{},[16,240,242],{"href":241},"#random-numbers","Random numbers",[47,244,245],{},[16,246,248],{"href":247},"#plotting","Plotting",[47,250,251],{},[16,252,254],{"href":253},"#color","Color",[47,256,257],{},[16,258,260],{"href":259},"#movies","Movies",[262,263,266],"h2",{"id":264,"className":265},"agents-and-agentsets",[14],[16,267,52],{"className":268,"href":51},[19],[270,271,274],"h3",{"id":272,"className":273},"agents",[14],[16,275,60],{"className":276,"href":59},[19],[22,278,279,280,283],{},"The NetLogo world is made up of ",[281,282,272],"strong",{},". Agents are beings that can follow\ninstructions.",[22,285,286,287,290,291,290,294,297,298,301],{},"In NetLogo, there are four types of agents: ",[281,288,289],{},"turtles",", ",[281,292,293],{},"patches",[281,295,296],{},"links",",\nand the ",[281,299,300],{},"observer",".",[22,303,304,305,308],{},"Turtles are agents that move around in the ",[281,306,307],{},"world",". The world is two\ndimensional and is divided up into a grid of patches. Each patch is a square\npiece of “ground” over which turtles can move. Links are agents that connect two\nturtles. The observer doesn’t have a location — you can imagine it as looking\nout over the world of turtles and patches.",[22,310,311],{},"The observer doesn’t observe passively — it gives instructions to the other\nagents.",[22,313,314],{},"When NetLogo starts up, there are no turtles. The observer can make new turtles.\nPatches can make new turtles too. (Patches can’t move, but otherwise they’re\njust as “alive” as turtles.)",[22,316,317,318,332,333,341,342,349,350,357],{},"Patches have coordinates. The patch at coordinates (0, 0) is called the origin\nand the coordinates of the other patches are the horizontal and vertical\ndistances from this one. We call the patch’s coordinates ",[319,320,323],"code",{"className":321},[322],"netlogo-command",[16,324,330],{"href":325,"rel":326,"className":328,"dataDisplayText":330,"target":331,"title":330},"/dictionary#pcor",[327],"noopener",[329],"netlogo-wiki-link","pxcor","_self"," and\n",[319,334,336],{"className":335},[322],[16,337,340],{"href":325,"rel":338,"className":339,"dataDisplayText":340,"target":331,"title":340},[327],[329],"pycor",". Just like in the standard mathematical coordinate plane,\n",[319,343,345],{"className":344},[322],[16,346,330],{"href":325,"rel":347,"className":348,"dataDisplayText":330,"target":331,"title":330},[327],[329]," increases as you move to the right and ",[319,351,353],{"className":352},[322],[16,354,340],{"href":325,"rel":355,"className":356,"dataDisplayText":340,"target":331,"title":340},[327],[329]," increases\nas you move up.",[22,359,360,361,290,370,290,379,332,387,395,396,403,404,290,411,418,419,426,427,332,434,441],{},"The total number of patches is determined by the settings\n",[319,362,364],{"className":363},[322],[16,365,369],{"href":366,"rel":367,"className":368,"dataDisplayText":369,"target":331,"title":369},"/dictionary#min-pcor",[327],[329],"min-pxcor",[319,371,373],{"className":372},[322],[16,374,378],{"href":375,"rel":376,"className":377,"dataDisplayText":378,"target":331,"title":378},"/dictionary#max-pcor",[327],[329],"max-pxcor",[319,380,382],{"className":381},[322],[16,383,386],{"href":366,"rel":384,"className":385,"dataDisplayText":386,"target":331,"title":386},[327],[329],"min-pycor",[319,388,390],{"className":389},[322],[16,391,394],{"href":375,"rel":392,"className":393,"dataDisplayText":394,"target":331,"title":394},[327],[329],"max-pycor",". When NetLogo starts up, ",[319,397,399],{"className":398},[322],[16,400,369],{"href":366,"rel":401,"className":402,"dataDisplayText":369,"target":331,"title":369},[327],[329],",\n",[319,405,407],{"className":406},[322],[16,408,378],{"href":375,"rel":409,"className":410,"dataDisplayText":378,"target":331,"title":378},[327],[329],[319,412,414],{"className":413},[322],[16,415,386],{"href":366,"rel":416,"className":417,"dataDisplayText":386,"target":331,"title":386},[327],[329]," and ",[319,420,422],{"className":421},[322],[16,423,394],{"href":375,"rel":424,"className":425,"dataDisplayText":394,"target":331,"title":394},[327],[329]," are\n-16, 16, -16, and 16 respectively. This means that ",[319,428,430],{"className":429},[322],[16,431,330],{"href":325,"rel":432,"className":433,"dataDisplayText":330,"target":331,"title":330},[327],[329],[319,435,437],{"className":436},[322],[16,438,340],{"href":325,"rel":439,"className":440,"dataDisplayText":340,"target":331,"title":340},[327],[329]," both range from -16 to 16, so there are 33 times 33, or 1089\npatches total. (You can change the number of patches with the Settings button.)",[22,443,444,445,418,454,463],{},"Turtles have coordinates too: ",[319,446,448],{"className":447},[322],[16,449,453],{"href":450,"rel":451,"className":452,"dataDisplayText":453,"target":331,"title":453},"/dictionary#xcor",[327],[329],"xcor",[319,455,457],{"className":456},[322],[16,458,462],{"href":459,"rel":460,"className":461,"dataDisplayText":462,"target":331,"title":462},"/dictionary#ycor",[327],[329],"ycor",". A patch’s coordinates are\nalways integers, but a turtle’s coordinates can have decimals. This means that a\nturtle can be positioned at any point within its patch; it doesn’t have to be in\nthe center of the patch.",[22,465,466],{},"Links do not have coordinates. Every link has two ends, and each end is a\nturtle. If either turtle dies, the link dies too. A link is represented visually\nas a line connecting the two turtles.",[270,468,471],{"id":469,"className":470},"agentsets",[14],[16,472,66],{"className":473,"href":65},[19],[22,475,476],{},"An agentset is exactly what its name implies, a set of agents. An agentset can\ncontain either turtles, patches or links, but not more than one type at once.",[22,478,479,480,484],{},"An agentset is not in any particular order. In fact, it’s always in a random\norder. And every time you use it, the agentset is in a ",[481,482,483],"em",{},"different"," random order.\nThis helps you keep your model from treating any particular turtles, patches or\nlinks differently from any others (unless you want them to be). Since the order\nis random every time, no one agent always gets to go first.",[22,486,487,488,496,497,505,506,514],{},"You’ve seen the ",[319,489,491],{"className":490},[322],[16,492,289],{"href":493,"rel":494,"className":495,"dataDisplayText":289,"target":331,"title":289},"/dictionary#turtles",[327],[329]," primitive, which reports the agentset of all\nturtles, the ",[319,498,500],{"className":499},[322],[16,501,293],{"href":502,"rel":503,"className":504,"dataDisplayText":293,"target":331,"title":293},"/dictionary#patches",[327],[329]," primitive, which reports the agentset of all patches\nand the ",[319,507,509],{"className":508},[322],[16,510,296],{"href":511,"rel":512,"className":513,"dataDisplayText":296,"target":331,"title":296},"/dictionary#links",[327],[329]," primitive which reports the agentset of all links.",[22,516,517,518,521,522,524,525,527,528,537],{},"But what’s powerful about the agentset concept is that you can construct\nagentsets that contain only ",[481,519,520],{},"some"," turtles, ",[481,523,520],{}," patches or ",[481,526,520],{}," links. For\nexample, all the red turtles, or the patches with pxcor evenly divisible by\nfive, or the turtles in the first quadrant that are on a green patch or the\nlinks connected to turtle 0. These agentsets can then be used by ",[319,529,531],{"className":530},[322],[16,532,536],{"href":533,"rel":534,"className":535,"dataDisplayText":536,"target":331,"title":536},"/dictionary#ask",[327],[329],"ask"," or by\nvarious reporters that take agentsets as inputs.",[22,539,540,541,550,551,560,561,570],{},"One way is to use ",[319,542,544],{"className":543},[322],[16,545,549],{"href":546,"rel":547,"className":548,"dataDisplayText":549,"target":331,"title":549},"/dictionary#turtles-here",[327],[329],"turtles-here"," or ",[319,552,554],{"className":553},[322],[16,555,559],{"href":556,"rel":557,"className":558,"dataDisplayText":559,"target":331,"title":559},"/dictionary#turtles-at",[327],[329],"turtles-at",", to make an agentset\ncontaining only the turtles on my patch, or only the turtles on some other patch\nat some x and y offsets. There’s also ",[319,562,564],{"className":563},[322],[16,565,569],{"href":566,"rel":567,"className":568,"dataDisplayText":569,"target":331,"title":569},"/dictionary#turtles-on",[327],[329],"turtles-on"," so you can get the set of\nturtles standing on a given patch or set of patches, or the set of turtles\nstanding on the same patch as a given turtle or set of turtles.",[22,572,573],{},"Here are some more examples of how to make agentsets:",[575,576,577],"pre",{},[319,578,579,586,589,594,595,598,600,604,606,594,609,612,614,618,620,594,623,627,628,594,632,594,636,641,642,644,648,650,594,653,627,656,594,659,594,662,641,665,667,671,673,594,676,627,679,594,682,594,686,641,691,693,697,699,594,702,594,706,710,712,716,718,594,721,725,726,594,730,733,734,594,737,733,740,594,744,733,747,594,750,753,754,756,760,762,766,768,772,774,594,777,780,781,594,784,594,787,790,791,795,796,594,799,594,802,805,806,808,809,795,812,594,816,594,819,823,824,826,830,832,594,835,838,840,844,846,847,851,852,594,856,594,860],{},[580,581,585],"span",{"className":582},[583,584],"token","comment",";; all other turtles:",[587,588],"br",{},[580,590,593],{"className":591},[583,592],"reporter","other"," ",[580,596,289],{"className":597},[583,592],[587,599],{},[580,601,603],{"className":602},[583,584],";; all other turtles on this patch:",[587,605],{},[580,607,593],{"className":608},[583,592],[580,610,549],{"className":611},[583,592],[587,613],{},[580,615,617],{"className":616},[583,584],";; all red turtles:",[587,619],{},[580,621,289],{"className":622},[583,592],[580,624,626],{"className":625},[583,592],"with"," [",[580,629,631],{"className":630},[583,592],"color",[580,633,635],{"className":634},[583,592],"=",[580,637,640],{"className":638},[583,639],"constant","red","]",[587,643],{},[580,645,647],{"className":646},[583,584],";; all red turtles on my patch",[587,649],{},[580,651,549],{"className":652},[583,592],[580,654,626],{"className":655},[583,592],[580,657,631],{"className":658},[583,592],[580,660,635],{"className":661},[583,592],[580,663,640],{"className":664},[583,639],[587,666],{},[580,668,670],{"className":669},[583,584],";; patches on right side of view",[587,672],{},[580,674,293],{"className":675},[583,592],[580,677,626],{"className":678},[583,592],[580,680,330],{"className":681},[583,592],[580,683,685],{"className":684},[583,592],">",[580,687,690],{"className":688},[583,689],"number","0",[587,692],{},[580,694,696],{"className":695},[583,584],";; all turtles less than 3 patches away",[587,698],{},[580,700,289],{"className":701},[583,592],[580,703,705],{"className":704},[583,592],"in-radius",[580,707,709],{"className":708},[583,689],"3",[587,711],{},[580,713,715],{"className":714},[583,584],";; the four patches to the east, north, west, and south",[587,717],{},[580,719,293],{"className":720},[583,592],[580,722,724],{"className":723},[583,592],"at-points"," [[",[580,727,729],{"className":728},[583,689],"1",[580,731,690],{"className":732},[583,689],"] [",[580,735,690],{"className":736},[583,689],[580,738,729],{"className":739},[583,689],[580,741,743],{"className":742},[583,689],"-1",[580,745,690],{"className":746},[583,689],[580,748,690],{"className":749},[583,689],[580,751,743],{"className":752},[583,689],"]]",[587,755],{},[580,757,759],{"className":758},[583,584],";; shorthand for those four patches",[587,761],{},[580,763,765],{"className":764},[583,592],"neighbors4",[587,767],{},[580,769,771],{"className":770},[583,584],";; turtles in the first quadrant that are on a green patch",[587,773],{},[580,775,289],{"className":776},[583,592],[580,778,626],{"className":779},[583,592]," [(",[580,782,453],{"className":783},[583,592],[580,785,685],{"className":786},[583,592],[580,788,690],{"className":789},[583,689],") ",[580,792,794],{"className":793},[583,592],"and"," (",[580,797,462],{"className":798},[583,592],[580,800,685],{"className":801},[583,592],[580,803,690],{"className":804},[583,689],")",[587,807],{},"              ",[580,810,794],{"className":811},[583,592],[580,813,815],{"className":814},[583,592],"pcolor",[580,817,635],{"className":818},[583,592],[580,820,822],{"className":821},[583,639],"green",")]",[587,825],{},[580,827,829],{"className":828},[583,584],";; turtles standing on my neighboring four patches",[587,831],{},[580,833,569],{"className":834},[583,592],[580,836,765],{"className":837},[583,592],[587,839],{},[580,841,843],{"className":842},[583,584],";; all the links connected to turtle 0",[587,845],{},"[",[580,848,850],{"className":849},[583,592],"my-links","] ",[580,853,855],{"className":854},[583,592],"of",[580,857,859],{"className":858},[583,592],"turtle",[580,861,690],{"className":862},[583,689],[22,864,865,866,874],{},"Note the use of ",[319,867,869],{"className":868},[322],[16,870,593],{"href":871,"rel":872,"className":873,"dataDisplayText":593,"target":331,"title":593},"/dictionary#other",[327],[329]," to exclude this agent. This is common.",[22,876,877],{},"Once you have created an agentset, here are some simple things you can do:",[44,879,880,891,903,915],{},[47,881,882,883,890],{},"Use ",[319,884,886],{"className":885},[322],[16,887,536],{"href":533,"rel":888,"className":889,"dataDisplayText":536,"target":331,"title":536},[327],[329]," to make the agents in the agentset do something",[47,892,882,893,902],{},[319,894,896],{"className":895},[322],[16,897,901],{"href":898,"rel":899,"className":900,"dataDisplayText":901,"target":331,"title":901},"/dictionary#any",[327],[329],"any?"," to see if the agentset is empty",[47,904,882,905,914],{},[319,906,908],{"className":907},[322],[16,909,913],{"href":910,"rel":911,"className":912,"dataDisplayText":913,"target":331,"title":913},"/dictionary#all",[327],[329],"all?"," to see if every agent in an agentset satisfies a condition.",[47,916,882,917,926],{},[319,918,920],{"className":919},[322],[16,921,925],{"href":922,"rel":923,"className":924,"dataDisplayText":925,"target":331,"title":925},"/dictionary#count",[327],[329],"count"," to find out exactly how many agents are in the set",[22,928,929],{},"And here are some more complex things you can do:",[44,931,932,987,1036,1058,1096,1126,1156,1175],{},[47,933,934,935,944,945,947,948,951,953,954,963,964],{},"Pick a random agent from the set using ",[319,936,938],{"className":937},[322],[16,939,943],{"href":940,"rel":941,"className":942,"dataDisplayText":943,"target":331,"title":943},"/dictionary#one-of",[327],[329],"one-of",". For example, we can make a\nrandomly chosen turtle turn green:",[587,946],{},"ask one-of turtles ",[580,949,950],{}," set color green",[587,952],{},"Or tell a randomly chosen patch to ",[319,955,957],{"className":956},[322],[16,958,962],{"href":959,"rel":960,"className":961,"dataDisplayText":962,"target":331,"title":962},"/dictionary#sprout",[327],[329],"sprout"," a new turtle:",[575,965,966],{},[319,967,968,969,594,973,594,976,979,980,594,983,986],{},"  ",[580,970,536],{"className":971},[583,972],"command",[580,974,943],{"className":975},[583,592],[580,977,293],{"className":978},[583,592]," [ ",[580,981,962],{"className":982},[583,972],[580,984,729],{"className":985},[583,689]," ]",[47,988,989,990,550,999,1008,1009],{},"Use the ",[319,991,993],{"className":992},[322],[16,994,998],{"href":995,"rel":996,"className":997,"dataDisplayText":998,"target":331,"title":998},"/dictionary#max-one-of",[327],[329],"max-one-of",[319,1000,1002],{"className":1001},[322],[16,1003,1007],{"href":1004,"rel":1005,"className":1006,"dataDisplayText":1007,"target":331,"title":1007},"/dictionary#min-one-of",[327],[329],"min-one-of"," reporters to find out which agent is\nthe most or least along some scale. For example, to remove the richest turtle,\nyou could say",[575,1010,1011],{},[319,1012,968,1013,594,1016,594,1019,627,1022,594,1026,1031,1032,986],{},[580,1014,536],{"className":1015},[583,972],[580,1017,998],{"className":1018},[583,592],[580,1020,289],{"className":1021},[583,592],[580,1023,1025],{"className":1024},[583,592],"sum",[580,1027,1030],{"className":1028},[583,1029],"variable","assets","] [ ",[580,1033,1035],{"className":1034},[583,972],"die",[47,1037,1038,1039,1048,1049,1057],{},"Make a histogram of the agentset using the ",[319,1040,1042],{"className":1041},[322],[16,1043,1047],{"href":1044,"rel":1045,"className":1046,"dataDisplayText":1047,"target":331,"title":1047},"/dictionary#histogram",[327],[329],"histogram"," command (in\ncombination with ",[319,1050,1052],{"className":1051},[322],[16,1053,855],{"href":1054,"rel":1055,"className":1056,"dataDisplayText":855,"target":331,"title":855},"/dictionary#of",[327],[329],").",[47,1059,882,1060,1067,1068,1071,1072],{},[319,1061,1063],{"className":1062},[322],[16,1064,855],{"href":1054,"rel":1065,"className":1066,"dataDisplayText":855,"target":331,"title":855},[327],[329]," to make a list of values, one for each agent in the agentset. Then\nuse one of NetLogo’s list primitives to do something with the list. (See the\n“Lists” section ",[16,1069,1070],{"href":215},"below",".) For example, to find out how rich turtles\nare on the average, you could say",[575,1073,1074],{},[319,1075,968,1076,594,1080,627,1084,594,1087,851,1090,594,1093],{},[580,1077,1079],{"className":1078},[583,972],"show",[580,1081,1083],{"className":1082},[583,592],"mean",[580,1085,1025],{"className":1086},[583,592],[580,1088,1030],{"className":1089},[583,1029],[580,1091,855],{"className":1092},[583,592],[580,1094,289],{"className":1095},[583,592],[47,1097,882,1098,290,1107,418,1116,1125],{},[319,1099,1101],{"className":1100},[322],[16,1102,1106],{"href":1103,"rel":1104,"className":1105,"dataDisplayText":1106,"target":331,"title":1106},"/dictionary#turtle-set",[327],[329],"turtle-set",[319,1108,1110],{"className":1109},[322],[16,1111,1115],{"href":1112,"rel":1113,"className":1114,"dataDisplayText":1115,"target":331,"title":1115},"/dictionary#patch-set",[327],[329],"patch-set",[319,1117,1119],{"className":1118},[322],[16,1120,1124],{"href":1121,"rel":1122,"className":1123,"dataDisplayText":1124,"target":331,"title":1124},"/dictionary#link-set",[327],[329],"link-set"," reporters to make new\nagentsets by gathering together agents from a variety of possible sources.",[47,1127,882,1128,290,1137,418,1146,1155],{},[319,1129,1131],{"className":1130},[322],[16,1132,1136],{"href":1133,"rel":1134,"className":1135,"dataDisplayText":1136,"target":331,"title":1136},"/dictionary#no-turtles",[327],[329],"no-turtles",[319,1138,1140],{"className":1139},[322],[16,1141,1145],{"href":1142,"rel":1143,"className":1144,"dataDisplayText":1145,"target":331,"title":1145},"/dictionary#no-patches",[327],[329],"no-patches",[319,1147,1149],{"className":1148},[322],[16,1150,1154],{"href":1151,"rel":1152,"className":1153,"dataDisplayText":1154,"target":331,"title":1154},"/dictionary#no-links",[327],[329],"no-links"," reporters to make empty\nagentsets.",[47,1157,1158,1159,550,1167,301],{},"Check whether two agentsets are equal using ",[319,1160,1162],{"className":1161},[322],[16,1163,635],{"href":1164,"rel":1165,"className":1166,"dataDisplayText":635,"target":331,"title":635},"/dictionary#symbols",[327],[329],[319,1168,1170],{"className":1169},[322],[16,1171,1174],{"href":1164,"rel":1172,"className":1173,"dataDisplayText":1174,"target":331,"title":1174},[327],[329],"!=",[47,1176,882,1177,1186],{},[319,1178,1180],{"className":1179},[322],[16,1181,1185],{"href":1182,"rel":1183,"className":1184,"dataDisplayText":1185,"target":331,"title":1185},"/dictionary#member",[327],[329],"member?"," to see whether a particular agent is a member of an agentset.",[22,1188,1189],{},"This only scratches the surface. See the Models Library for many more examples,\nand consult the NetLogo Dictionary for more information about all of the\nagentset primitives.",[22,1191,1192],{},"More examples of using agentsets are provided in the individual entries for\nthese primitives in the NetLogo Dictionary.",[34,1194,1197],{"id":1195,"className":1196},"special-agentsets",[14],[16,1198,1201],{"className":1199,"href":1200},[19],"#special-agentsets","Special agentsets",[22,1203,1204,1205,418,1207,1209,1210,1213,1214,1216],{},"The agentsets ",[319,1206,289],{},[319,1208,296],{}," have special behavior because they always\nhold the sets of ",[481,1211,1212],{},"all"," turtles and ",[481,1215,1212],{}," links. Therefore, these agentsets can\ngrow.",[22,1218,1219,1220,1231],{},"The following interaction shows the special behavior. Assume the Code tab has\n",[319,1221,1222,627,1227,641],{},[580,1223,1226],{"className":1224},[583,1225],"keyword","globals",[580,1228,1230],{"className":1229},[583,1029],"g",". Then:",[575,1233,1234],{},[319,1235,1236,594,1240,1244,1246,594,1249,594,1253,1257,1259,594,1262,594,1266,594,1269,1272,1274,594,1277,594,1281,594,1284,1287,1289,1292,1294,594,1297,594,1300,1303,1305,594,1308,594,1311,594,1314,1317,1319,1323,1325,594,1328,594,1331,594,1334,594,1337,1340,1342,594,1345,594,1348,594,1351,1354,1356,1359,1361,594,1364,594,1367,1370,1372,594,1375,594,1378,594,1381,1384,1386,1389,1391,594,1394,594,1397,594,1400,1403,1405],{},[580,1237,1239],{"className":1238},[583,1029],"observer>",[580,1241,1243],{"className":1242},[583,972],"clear-all",[587,1245],{},[580,1247,1239],{"className":1248},[583,1029],[580,1250,1252],{"className":1251},[583,972],"create-turtles",[580,1254,1256],{"className":1255},[583,689],"5",[587,1258],{},[580,1260,1239],{"className":1261},[583,1029],[580,1263,1265],{"className":1264},[583,972],"set",[580,1267,1230],{"className":1268},[583,1029],[580,1270,289],{"className":1271},[583,592],[587,1273],{},[580,1275,1239],{"className":1276},[583,1029],[580,1278,1280],{"className":1279},[583,972],"print",[580,1282,925],{"className":1283},[583,592],[580,1285,1230],{"className":1286},[583,1029],[587,1288],{},[580,1290,1256],{"className":1291},[583,689],[587,1293],{},[580,1295,1239],{"className":1296},[583,1029],[580,1298,1252],{"className":1299},[583,972],[580,1301,1256],{"className":1302},[583,689],[587,1304],{},[580,1306,1239],{"className":1307},[583,1029],[580,1309,1280],{"className":1310},[583,972],[580,1312,925],{"className":1313},[583,592],[580,1315,1230],{"className":1316},[583,1029],[587,1318],{},[580,1320,1322],{"className":1321},[583,689],"10",[587,1324],{},[580,1326,1239],{"className":1327},[583,1029],[580,1329,1265],{"className":1330},[583,972],[580,1332,1230],{"className":1333},[583,1029],[580,1335,1106],{"className":1336},[583,592],[580,1338,289],{"className":1339},[583,592],[587,1341],{},[580,1343,1239],{"className":1344},[583,1029],[580,1346,1280],{"className":1347},[583,972],[580,1349,925],{"className":1350},[583,592],[580,1352,1230],{"className":1353},[583,1029],[587,1355],{},[580,1357,1322],{"className":1358},[583,689],[587,1360],{},[580,1362,1239],{"className":1363},[583,1029],[580,1365,1252],{"className":1366},[583,972],[580,1368,1256],{"className":1369},[583,689],[587,1371],{},[580,1373,1239],{"className":1374},[583,1029],[580,1376,1280],{"className":1377},[583,972],[580,1379,925],{"className":1380},[583,592],[580,1382,1230],{"className":1383},[583,1029],[587,1385],{},[580,1387,1322],{"className":1388},[583,689],[587,1390],{},[580,1392,1239],{"className":1393},[583,1029],[580,1395,1280],{"className":1396},[583,972],[580,1398,925],{"className":1399},[583,592],[580,1401,289],{"className":1402},[583,592],[587,1404],{},[580,1406,1408],{"className":1407},[583,689],"15",[22,1410,1411,1412,1414,1415,1423,1424,1427],{},"The ",[319,1413,289],{}," agentset grows when new turtles are born, but other agentsets\ndon’t grow. If I write ",[319,1416,1417,594,1420],{},[580,1418,1106],{"className":1419},[583,592],[580,1421,289],{"className":1422},[583,592],", I get a new, normal agentset\ncontaining just the turtles that ",[481,1425,1426],{},"currently"," exist. New turtles don’t join when\nthey’re born.",[22,1429,1430,1431,418,1433,1435],{},"Breed agentsets are special in the same way as ",[319,1432,289],{},[319,1434,296],{},". Breeds are\nintroduced and explained below.",[34,1437,1440],{"id":1438,"className":1439},"agentsets-and-lists",[14],[16,1441,1444],{"className":1442,"href":1443},[19],"#agentsets-and-lists","Agentsets and lists",[22,1446,1447],{},"Earlier, we said that agentsets are always in random order, a different random\norder every time. If you need your agents to do something in a fixed order, you\nneed to make a list of the agents instead. See the Lists section below.",[1449,1450,1451],"blockquote",{},[22,1452,1453,1456],{},[281,1454,1455],{},"Code Example:"," Ask Ordering Example",[270,1458,1461],{"id":1459,"className":1460},"breeds",[14],[16,1462,72],{"className":1463,"href":71},[19],[22,1465,1466,1467,418,1470,1473,1474,418,1477,1480],{},"NetLogo allows you to define different “breeds” of turtles and breeds of links.\nOnce you have defined breeds, you can go on and make the different breeds behave\ndifferently. For example, you could have breeds called ",[319,1468,1469],{},"sheep",[319,1471,1472],{},"wolves",", and\nhave the wolves try to eat the sheep or you could have link breeds called\n",[319,1475,1476],{},"streets",[319,1478,1479],{},"sidewalks"," where foot traffic is routed on sidewalks and car\ntraffic is routed on streets.",[22,1482,1483,1484,1493],{},"You define turtle breeds using the ",[319,1485,1487],{"className":1486},[322],[16,1488,1492],{"href":1489,"rel":1490,"className":1491,"dataDisplayText":1492,"target":331,"title":1492},"/dictionary#breed",[327],[329],"breed"," keyword, at the top of the Code\ntab, before any procedures:",[575,1495,1496],{},[319,1497,1498,627,1501,594,1504,641,1508,627,1513,594,1516,641],{},[580,1499,1492],{"className":1500},[583,1225],[580,1502,1472],{"className":1503},[583,1029],[580,1505,1507],{"className":1506},[583,1029],"wolf",[580,1509,1511,1492],{"className":1510},[583,1225],[587,1512],{},[580,1514,1469],{"className":1515},[583,1029],[580,1517,1519],{"className":1518},[583,1029],"a-sheep",[22,1521,1522,1523,1531],{},"You can refer to a member of the breed using the singular form, just like the\n",[319,1524,1526],{"className":1525},[322],[16,1527,859],{"href":1528,"rel":1529,"className":1530,"dataDisplayText":859,"target":331,"title":859},"/dictionary#turtle",[327],[329]," reporter. When printed, members of the breed will be labeled with the\nsingular name.",[22,1533,1534,1535,1544,1545,301],{},"Some commands and reporters have the plural name of the breed in them, such as\n",[319,1536,1538],{"className":1537},[322],[16,1539,1543],{"href":1540,"rel":1541,"className":1542,"dataDisplayText":1543,"target":331,"title":1543},"/dictionary#create-turtles",[327],[329],"create-\u003Cbreeds>",". Others have the singular name of the breed\nin them, such as ",[319,1546,1548],{"className":1547},[322],[16,1549,1552],{"href":1528,"rel":1550,"className":1551,"dataDisplayText":1552,"target":331,"title":1552},[327],[329],"\u003Cbreed>",[22,1554,1555],{},"The order in which breeds are declared is also the order in which they are\nlayered in the view. So breeds defined later will appear on top of breeds\ndefined earlier; in this example, sheep will be drawn over wolves.",[22,1557,1558,1559,1561,1562,1564],{},"When you define a breed such as ",[319,1560,1469],{},", an agentset for that breed is\nautomatically created, so that all of the agentset capabilities described above\nare immediately available with the ",[319,1563,1469],{}," agentset.",[22,1566,1567,1568,290,1576,403,1585,290,1593,290,1601,403,1609,1617,1618,301],{},"The following new primitives are also automatically available once you define a\nbreed: ",[319,1569,1571],{"className":1570},[322],[16,1572,1575],{"href":1540,"rel":1573,"className":1574,"dataDisplayText":1575,"target":331,"title":1575},[327],[329],"create-sheep",[319,1577,1579],{"className":1578},[322],[16,1580,1584],{"href":1581,"rel":1582,"className":1583,"dataDisplayText":1584,"target":331,"title":1584},"/dictionary#hatch",[327],[329],"hatch-sheep",[319,1586,1588],{"className":1587},[322],[16,1589,1592],{"href":959,"rel":1590,"className":1591,"dataDisplayText":1592,"target":331,"title":1592},[327],[329],"sprout-sheep",[319,1594,1596],{"className":1595},[322],[16,1597,1600],{"href":546,"rel":1598,"className":1599,"dataDisplayText":1600,"target":331,"title":1600},[327],[329],"sheep-here",[319,1602,1604],{"className":1603},[322],[16,1605,1608],{"href":556,"rel":1606,"className":1607,"dataDisplayText":1608,"target":331,"title":1608},[327],[329],"sheep-at",[319,1610,1612],{"className":1611},[322],[16,1613,1616],{"href":566,"rel":1614,"className":1615,"dataDisplayText":1616,"target":331,"title":1616},[327],[329],"sheep-on",", and ",[319,1619,1621],{"className":1620},[322],[16,1622,1626],{"href":1623,"rel":1624,"className":1625,"dataDisplayText":1626,"target":331,"title":1626},"/dictionary#is-of-type",[327],[329],"is-a-sheep?",[22,1628,1629,1630,1639],{},"Also, you can use ",[319,1631,1633],{"className":1632},[322],[16,1634,1638],{"href":1635,"rel":1636,"className":1637,"dataDisplayText":1638,"target":331,"title":1638},"/dictionary#turtles-own",[327],[329],"sheep-own"," to define new turtle variables that\nonly turtles of the given breed have. (It’s allowed for more than one breed to\nown the same variable.)",[22,1641,1642,1643,1651],{},"A turtle’s breed agentset is stored in the ",[319,1644,1646],{"className":1645},[322],[16,1647,1492],{"href":1648,"rel":1649,"className":1650,"dataDisplayText":1492,"target":331,"title":1492},"/dictionary#breedvar",[327],[329]," turtle variable.\nSo you can test a turtle’s breed, like this:",[575,1653,1654],{},[319,1655,1656,1660,594,1664,594,1667,979,1670,986],{},[580,1657,1659],{"className":1658},[583,972],"if",[580,1661,1663],{"className":1662},[583,1225]," breed",[580,1665,635],{"className":1666},[583,592],[580,1668,1472],{"className":1669},[583,1029],[580,1671,1673],{"className":1672},[583,1029],"...",[22,1675,1676],{},"Note also that turtles can change breeds. A wolf doesn’t have to remain a wolf\nits whole life. Let’s change a random wolf into a sheep:",[575,1678,1679],{},[319,1680,1681,594,1684,594,1687,979,1690,1693,594,1696,986],{},[580,1682,536],{"className":1683},[583,972],[580,1685,943],{"className":1686},[583,592],[580,1688,1472],{"className":1689},[583,1029],[580,1691,1265],{"className":1692},[583,972],[580,1694,1663],{"className":1695},[583,1225],[580,1697,1469],{"className":1698},[583,1029],[22,1700,1411,1701,1710,1711,301],{},[319,1702,1704],{"className":1703},[322],[16,1705,1709],{"href":1706,"rel":1707,"className":1708,"dataDisplayText":1709,"target":331,"title":1709},"/dictionary#set-default-shape",[327],[329],"set-default-shape"," primitive is useful for associating certain turtle\nshapes with certain breeds. See the section on shapes ",[16,1712,1070],{"href":101},[22,1714,1715,1716,1725,1726,1735,1736,1744],{},"Who numbers are assigned irrespective of breeds. If you already have a ",[319,1717,1718,594,1722],{},[580,1719,1721],{"className":1720},[583,1029],"frog",[580,1723,690],{"className":1724},[583,689],",\nthen the first mouse will be ",[319,1727,1728,594,1732],{},[580,1729,1731],{"className":1730},[583,1029],"mouse",[580,1733,729],{"className":1734},[583,689],", not ",[319,1737,1738,594,1741],{},[580,1739,1731],{"className":1740},[583,1029],[580,1742,690],{"className":1743},[583,689],", since the who number 0 is\nalready taken.",[22,1746,1747],{},"Here is a quick example of using breeds:",[575,1749,1750],{},[319,1751,1752,627,1755,594,1759,641,1762,627,1767,594,1771,641,1774,627,1780,641,1784,594,1790,1794,968,1796,1799,968,1801,594,1805,1809,1811,1812,594,1815,594,1818,1822,1824,1825,594,1828,594,1831,594,1835,986,1838,968,1840,594,1844,1847,1811,1849,594,1852,594,1855,986,1858,968,1860,1864],{},[580,1753,1492],{"className":1754},[583,1225],[580,1756,1758],{"className":1757},[583,1029],"mice",[580,1760,1731],{"className":1761},[583,1029],[580,1763,1765,1492],{"className":1764},[583,1225],[587,1766],{},[580,1768,1770],{"className":1769},[583,1029],"frogs",[580,1772,1721],{"className":1773},[583,1029],[580,1775,1777,1779],{"className":1776},[583,1225],[587,1778],{},"mice-own",[580,1781,1783],{"className":1782},[583,1029],"cheese",[580,1785,1787,1789],{"className":1786},[583,1225],[587,1788],{},"to",[580,1791,1793],{"className":1792},[583,1029],"setup",[587,1795],{},[580,1797,1243],{"className":1798},[583,972],[587,1800],{},[580,1802,1804],{"className":1803},[583,1029],"create-mice",[580,1806,1808],{"className":1807},[583,689],"50",[587,1810],{},"    [ ",[580,1813,1265],{"className":1814},[583,972],[580,1816,631],{"className":1817},[583,592],[580,1819,1821],{"className":1820},[583,639],"white",[587,1823],{},"      ",[580,1826,1265],{"className":1827},[583,972],[580,1829,1783],{"className":1830},[583,1029],[580,1832,1834],{"className":1833},[583,592],"random",[580,1836,1322],{"className":1837},[583,689],[587,1839],{},[580,1841,1843],{"className":1842},[583,1029],"create-frogs",[580,1845,1808],{"className":1846},[583,689],[587,1848],{},[580,1850,1265],{"className":1851},[583,972],[580,1853,631],{"className":1854},[583,592],[580,1856,822],{"className":1857},[583,639],[587,1859],{},[580,1861,1863],{"className":1862},[583,972],"reset-ticks",[580,1865,1867,1869],{"className":1866},[583,1225],[587,1868],{},"end",[1449,1871,1872],{},[22,1873,1874,1876],{},[281,1875,1455],{}," Breeds and Shapes Example",[34,1878,1881],{"id":1879,"className":1880},"link-breeds",[14],[16,1882,1885],{"className":1883,"href":1884},[19],"#link-breeds","Link breeds",[22,1887,1888],{},"Link breeds are very similar to turtle breeds, however, there are a few\ndifferences.",[22,1890,1891,1892,332,1901,1910],{},"When you declare a link breed you must declare whether it is a breed of directed\nor undirected links by using the ",[319,1893,1895],{"className":1894},[322],[16,1896,1900],{"href":1897,"rel":1898,"className":1899,"dataDisplayText":1900,"target":331,"title":1900},"/dictionary#directed-link-breed",[327],[329],"directed-link-breed",[319,1902,1904],{"className":1903},[322],[16,1905,1909],{"href":1906,"rel":1907,"className":1908,"dataDisplayText":1909,"target":331,"title":1909},"/dictionary#undirected-link-breed",[327],[329],"undirected-link-breed"," keywords.",[575,1912,1913],{},[319,1914,1915,627,1918,594,1921,641,1925,627,1930,594,1934,641],{},[580,1916,1900],{"className":1917},[583,1225],[580,1919,1476],{"className":1920},[583,1029],[580,1922,1924],{"className":1923},[583,1029],"street",[580,1926,1928,1909],{"className":1927},[583,1225],[587,1929],{},[580,1931,1933],{"className":1932},[583,1029],"friendships",[580,1935,1937],{"className":1936},[583,1029],"friendship",[22,1939,1940],{},"Once you have created a breeded link you cannot create unbreeded links and vice\nversa. (You can, however, have directed and undirected links in the same world,\njust not in the same breed)",[22,1942,1943,1944,301],{},"Unlike with turtle breeds the singular breed name is required for link breeds,\nas many of the link commands and reports use the singular name, such as\n",[319,1945,1947],{"className":1946},[322],[16,1948,1952],{"href":1949,"rel":1950,"className":1951,"dataDisplayText":1952,"target":331,"title":1952},"/dictionary#link-neighbor",[327],[329],"\u003Clink-breed>-neighbor?",[22,1954,1955,1956,1965,594,1973,1981,594,1989,1998,594,2007,2016,594,2025,2034,2043,594,2052],{},"The following primitives are also automatically available once you define a\ndirected link breed: ",[319,1957,1959],{"className":1958},[322],[16,1960,1964],{"href":1961,"rel":1962,"className":1963,"dataDisplayText":1964,"target":331,"title":1964},"/dictionary#create-link",[327],[329],"create-street-from",[319,1966,1968],{"className":1967},[322],[16,1969,1972],{"href":1961,"rel":1970,"className":1971,"dataDisplayText":1972,"target":331,"title":1972},[327],[329],"create-streets-from",[319,1974,1976],{"className":1975},[322],[16,1977,1980],{"href":1961,"rel":1978,"className":1979,"dataDisplayText":1980,"target":331,"title":1980},[327],[329],"create-street-to",[319,1982,1984],{"className":1983},[322],[16,1985,1988],{"href":1961,"rel":1986,"className":1987,"dataDisplayText":1988,"target":331,"title":1988},[327],[329],"create-streets-to",[319,1990,1992],{"className":1991},[322],[16,1993,1997],{"href":1994,"rel":1995,"className":1996,"dataDisplayText":1997,"target":331,"title":1997},"/dictionary#in-link-neighbor",[327],[329],"in-street-neighbor?",[319,1999,2001],{"className":2000},[322],[16,2002,2006],{"href":2003,"rel":2004,"className":2005,"dataDisplayText":2006,"target":331,"title":2006},"/dictionary#in-link-neighbors",[327],[329],"in-street-neighbors",[319,2008,2010],{"className":2009},[322],[16,2011,2015],{"href":2012,"rel":2013,"className":2014,"dataDisplayText":2015,"target":331,"title":2015},"/dictionary#in-link-from",[327],[329],"in-street-from",[319,2017,2019],{"className":2018},[322],[16,2020,2024],{"href":2021,"rel":2022,"className":2023,"dataDisplayText":2024,"target":331,"title":2024},"/dictionary#my-in-links",[327],[329],"my-in-streets",[319,2026,2028],{"className":2027},[322],[16,2029,2033],{"href":2030,"rel":2031,"className":2032,"dataDisplayText":2033,"target":331,"title":2033},"/dictionary#my-out-links",[327],[329],"my-out-streets",[319,2035,2037],{"className":2036},[322],[16,2038,2042],{"href":2039,"rel":2040,"className":2041,"dataDisplayText":2042,"target":331,"title":2042},"/dictionary#out-link-neighbor",[327],[329],"out-street-neighbor?",[319,2044,2046],{"className":2045},[322],[16,2047,2051],{"href":2048,"rel":2049,"className":2050,"dataDisplayText":2051,"target":331,"title":2051},"/dictionary#out-link-neighbors",[327],[329],"out-street-neighbors",[319,2053,2055],{"className":2054},[322],[16,2056,2060],{"href":2057,"rel":2058,"className":2059,"dataDisplayText":2060,"target":331,"title":2060},"/dictionary#out-link-to",[327],[329],"out-street-to",[22,2062,2063,2064,2072,594,2080,2088,594,2097,2106],{},"And the following are automatically available when you define an undirected link\nbreed: ",[319,2065,2067],{"className":2066},[322],[16,2068,2071],{"href":1961,"rel":2069,"className":2070,"dataDisplayText":2071,"target":331,"title":2071},[327],[329],"create-friendship-with",[319,2073,2075],{"className":2074},[322],[16,2076,2079],{"href":1961,"rel":2077,"className":2078,"dataDisplayText":2079,"target":331,"title":2079},[327],[329],"create-friendships-with",[319,2081,2083],{"className":2082},[322],[16,2084,2087],{"href":1949,"rel":2085,"className":2086,"dataDisplayText":2087,"target":331,"title":2087},[327],[329],"friendship-neighbor?",[319,2089,2091],{"className":2090},[322],[16,2092,2096],{"href":2093,"rel":2094,"className":2095,"dataDisplayText":2096,"target":331,"title":2096},"/dictionary#link-neighbors",[327],[329],"friendship-neighbors",[319,2098,2100],{"className":2099},[322],[16,2101,2105],{"href":2102,"rel":2103,"className":2104,"dataDisplayText":2105,"target":331,"title":2105},"/dictionary#link-with",[327],[329],"friendship-with",[319,2107,2109],{"className":2108},[322],[16,2110,2114],{"href":2111,"rel":2112,"className":2113,"dataDisplayText":2114,"target":331,"title":2114},"/dictionary#my-links",[327],[329],"my-friendships",[22,2116,2117,2118,2121],{},"Multiple link breeds may declare the same ",[319,2119,2120],{},"-own"," variable, but a variable may\nnot be shared between a turtle breed and a link breed.",[22,2123,2124,2125,2134],{},"Just as with turtle breeds the order in which link breeds are declared defines\nthe order in which the links are drawn, so the friendships will always be on top\nof streets (if for some reason these breeds were in the same model). You can\nalso use ",[319,2126,2128],{"className":2127},[322],[16,2129,2133],{"href":2130,"rel":2131,"className":2132,"dataDisplayText":2133,"target":331,"title":2133},"/dictionary#links-own",[327],[329],"\u003Clink-breeds>-own"," to declare variables of each link breed\nseparately.",[22,2136,2137,2138,2146],{},"You can change the breed of a link with ",[319,2139,2140,2143],{},[580,2141,1265],{"className":2142},[583,972],[580,2144,1663],{"className":2145},[583,1225],". (However, you cannot change\na breeded link to an unbreeded one, to prevent having breeded and unbreeded\nlinks in the same world.)",[575,2148,2149],{},[319,2150,2151,594,2154,594,2157,979,2160,2163,594,2166,986,2169,2171,594,2174,594,2177,979,2180,2183,594,2186,2189,2190],{},[580,2152,536],{"className":2153},[583,972],[580,2155,943],{"className":2156},[583,592],[580,2158,1933],{"className":2159},[583,1029],[580,2161,1265],{"className":2162},[583,972],[580,2164,1663],{"className":2165},[583,1225],[580,2167,1476],{"className":2168},[583,1029],[587,2170],{},[580,2172,536],{"className":2173},[583,972],[580,2175,943],{"className":2176},[583,592],[580,2178,1933],{"className":2179},[583,1029],[580,2181,1265],{"className":2182},[583,972],[580,2184,1663],{"className":2185},[583,1225],[580,2187,296],{"className":2188},[583,592]," ] ",[580,2191,2193],{"className":2192},[583,584],";; produces a runtime error",[22,2195,2196,2203],{},[319,2197,2199],{"className":2198},[322],[16,2200,1709],{"href":1706,"rel":2201,"className":2202,"dataDisplayText":1709,"target":331,"title":1709},[327],[329]," may also be used with link breeds to associate it with a\nparticular link shape.",[1449,2205,2206],{},[22,2207,2208,2210],{},[281,2209,1455],{}," Link Breeds Example",[270,2212,2215],{"id":2213,"className":2214},"variables",[14],[16,2216,78],{"className":2217,"href":77},[19],[22,2219,2220],{},[281,2221,2222],{},"Agent variables",[22,2224,2225],{},"Agent variables are places to store values (such as numbers) in an agent. An\nagent variable can be a global variable, a turtle variable, a patch variable, or\na link variable.",[22,2227,2228],{},"If a variable is a global variable, there is only one value for the variable,\nand every agent can access it. You can think of global variables as belonging to\nthe observer.",[22,2230,2231,2232,2235],{},"Turtle, patch, and link variables are different. Each turtle has its ",[481,2233,2234],{},"own"," value\nfor every turtle variable. The same goes for patches and links.",[22,2237,2238,2239,2247,2248,2256],{},"Some variables are built into NetLogo. For example, all turtles and links have a\n",[319,2240,2242],{"className":2241},[322],[16,2243,631],{"href":2244,"rel":2245,"className":2246,"dataDisplayText":631,"target":331,"title":631},"/dictionary#color",[327],[329]," variable, and all patches have a ",[319,2249,2251],{"className":2250},[322],[16,2252,815],{"href":2253,"rel":2254,"className":2255,"dataDisplayText":815,"target":331,"title":815},"/dictionary#pcolor",[327],[329]," variable. (The patch\nvariable begins with “p” so it doesn’t get confused with the turtle variable,\nsince turtles have direct access to patch variables.) If you set the variable,\nthe turtle or patch changes color. (See next section for details.)",[22,2258,2259,2260,290,2267,1617,2274,2283,2284,418,2291,2298,2299,2308],{},"Other built-in turtle variables including ",[319,2261,2263],{"className":2262},[322],[16,2264,453],{"href":450,"rel":2265,"className":2266,"dataDisplayText":453,"target":331,"title":453},[327],[329],[319,2268,2270],{"className":2269},[322],[16,2271,462],{"href":459,"rel":2272,"className":2273,"dataDisplayText":462,"target":331,"title":462},[327],[329],[319,2275,2277],{"className":2276},[322],[16,2278,2282],{"href":2279,"rel":2280,"className":2281,"dataDisplayText":2282,"target":331,"title":2282},"/dictionary#heading",[327],[329],"heading",".\nOther built-in patch variables include ",[319,2285,2287],{"className":2286},[322],[16,2288,330],{"href":325,"rel":2289,"className":2290,"dataDisplayText":330,"target":331,"title":330},[327],[329],[319,2292,2294],{"className":2293},[322],[16,2295,340],{"href":325,"rel":2296,"className":2297,"dataDisplayText":340,"target":331,"title":340},[327],[329],". (There\nis ",[319,2300,2302],{"className":2301},[322],[16,2303,2307],{"href":2304,"rel":2305,"className":2306,"dataDisplayText":2307,"target":331,"title":2307},"/dictionary#builtinvariables",[327],[329],"a complete list here of built in variables",".)",[22,2310,2311,2312,2320],{},"You can also define your own variables. You can make a global variable by adding\na switch, slider, chooser, or input box to your model, or by using the\n",[319,2313,2315],{"className":2314},[322],[16,2316,1226],{"href":2317,"rel":2318,"className":2319,"dataDisplayText":1226,"target":331,"title":1226},"/dictionary#globals",[327],[329]," keyword at the beginning of your code, like this:",[575,2322,2323],{},[319,2324,2325,627,2328,641],{},[580,2326,1226],{"className":2327},[583,1225],[580,2329,2331],{"className":2330},[583,1029],"score",[22,2333,2334,2335,290,2343,418,2352,2360],{},"You can also define new turtle, patch and link variables using the\n",[319,2336,2338],{"className":2337},[322],[16,2339,2342],{"href":1635,"rel":2340,"className":2341,"dataDisplayText":2342,"target":331,"title":2342},[327],[329],"turtles-own",[319,2344,2346],{"className":2345},[322],[16,2347,2351],{"href":2348,"rel":2349,"className":2350,"dataDisplayText":2351,"target":331,"title":2351},"/dictionary#patches-own",[327],[329],"patches-own",[319,2353,2355],{"className":2354},[322],[16,2356,2359],{"href":2130,"rel":2357,"className":2358,"dataDisplayText":2359,"target":331,"title":2359},[327],[329],"links-own"," keywords, like this:",[575,2362,2363],{},[319,2364,2365,627,2368,594,2372,641,2376,627,2381,641,2385,627,2390,641],{},[580,2366,2342],{"className":2367},[583,1225],[580,2369,2371],{"className":2370},[583,1029],"energy",[580,2373,2375],{"className":2374},[583,1029],"speed",[580,2377,2379,2351],{"className":2378},[583,1225],[587,2380],{},[580,2382,2384],{"className":2383},[583,1029],"friction",[580,2386,2388,2359],{"className":2387},[583,1225],[587,2389],{},[580,2391,2393],{"className":2392},[583,1029],"strength",[22,2395,2396,2397,2405],{},"These variables can then be used freely in your model. Use the ",[319,2398,2400],{"className":2399},[322],[16,2401,1265],{"href":2402,"rel":2403,"className":2404,"dataDisplayText":1265,"target":331,"title":1265},"/dictionary#set",[327],[329]," command\nto set them. (Any variable you don’t set has a starting value of zero.)",[22,2407,2408],{},"Global variables can be read and set at any time by any agent. As well, a turtle\ncan read and set patch variables of the patch it is standing on. For example,\nthis code:",[575,2410,2411],{},[319,2412,2413,594,2416,979,2419,594,2422,594,2425,986],{},[580,2414,536],{"className":2415},[583,972],[580,2417,289],{"className":2418},[583,592],[580,2420,1265],{"className":2421},[583,972],[580,2423,815],{"className":2424},[583,592],[580,2426,640],{"className":2427},[583,639],[22,2429,2430],{},"causes every turtle to make the patch it is standing on red. (Because patch\nvariables are shared by turtles in this way, you can’t have a turtle variable\nand a patch variable with the same name.)",[22,2432,2433,2434,2441],{},"In other situations where you want an agent to read a different agent’s\nvariable, you can use ",[319,2435,2437],{"className":2436},[322],[16,2438,855],{"href":1054,"rel":2439,"className":2440,"dataDisplayText":855,"target":331,"title":855},[327],[329],". Example:",[575,2443,2444],{},[319,2445,2446,627,2449,851,2452,594,2455,594,2458,2461,2463],{},[580,2447,1079],{"className":2448},[583,972],[580,2450,631],{"className":2451},[583,592],[580,2453,855],{"className":2454},[583,592],[580,2456,859],{"className":2457},[583,592],[580,2459,1256],{"className":2460},[583,689],[587,2462],{},[580,2464,2466],{"className":2465},[583,584],";; prints current color of turtle with who number 5",[22,2468,2469,2470,2477],{},"You can also use ",[319,2471,2473],{"className":2472},[322],[16,2474,855],{"href":1054,"rel":2475,"className":2476,"dataDisplayText":855,"target":331,"title":855},[327],[329]," with a more complicated expression than just a variable\nname, for example:",[575,2479,2480],{},[319,2481,2482,627,2485,594,2488,594,2492,851,2495,594,2498,594,2501,2504,2506,2510,2512],{},[580,2483,1079],{"className":2484},[583,972],[580,2486,453],{"className":2487},[583,592],[580,2489,2491],{"className":2490},[583,592],"+",[580,2493,462],{"className":2494},[583,592],[580,2496,855],{"className":2497},[583,592],[580,2499,859],{"className":2500},[583,592],[580,2502,1256],{"className":2503},[583,689],[587,2505],{},[580,2507,2509],{"className":2508},[583,584],";; prints the sum of the x and y coordinates of",[587,2511],{},[580,2513,2515],{"className":2514},[583,584],";; turtle with who number 5",[22,2517,2518],{},[281,2519,2520],{},"Local variables",[22,2522,2523,2524,2533,2534,2536],{},"A local variable is defined and used only in the context of a particular\nprocedure or part of a procedure. To create a local variable, use the ",[319,2525,2527],{"className":2526},[322],[16,2528,2532],{"href":2529,"rel":2530,"className":2531,"dataDisplayText":2532,"target":331,"title":2532},"/dictionary#let",[327],[329],"let","\ncommand. If you use ",[319,2535,2532],{}," at the top of a procedure, the variable will exist\nthroughout the procedure. If you use it inside a set of square brackets, for\nexample inside an “ask”, then it will exist only inside those brackets.",[575,2538,2539],{},[319,2540,2541,594,2544,627,2548,594,2552,641,2556,968,2558,594,2561,627,2565,851,2568,594,2571,2574,968,2576,594,2579,979,2582,594,2585,627,2588,851,2591,594,2594,986,2597,968,2599,594,2602,979,2605,594,2608,594,2611,986,2614],{},[580,2542,1789],{"className":2543},[583,1225],[580,2545,2547],{"className":2546},[583,1029],"swap-colors",[580,2549,2551],{"className":2550},[583,1029],"turtle1",[580,2553,2555],{"className":2554},[583,1029],"turtle2",[587,2557],{},[580,2559,2532],{"className":2560},[583,972],[580,2562,2564],{"className":2563},[583,1029],"temp",[580,2566,631],{"className":2567},[583,592],[580,2569,855],{"className":2570},[583,592],[580,2572,2551],{"className":2573},[583,1029],[587,2575],{},[580,2577,536],{"className":2578},[583,972],[580,2580,2551],{"className":2581},[583,1029],[580,2583,1265],{"className":2584},[583,972],[580,2586,631],{"className":2587},[583,592],[580,2589,631],{"className":2590},[583,592],[580,2592,855],{"className":2593},[583,592],[580,2595,2555],{"className":2596},[583,1029],[587,2598],{},[580,2600,536],{"className":2601},[583,972],[580,2603,2555],{"className":2604},[583,1029],[580,2606,1265],{"className":2607},[583,972],[580,2609,631],{"className":2610},[583,592],[580,2612,2564],{"className":2613},[583,1029],[580,2615,2617,1869],{"className":2616},[583,1225],[587,2618],{},[270,2620,2622],{"id":296,"className":2621},[14],[16,2623,84],{"className":2624,"href":83},[19],[22,2626,2627],{},"A link is an agent that connects two turtles. These turtles are sometimes also\ncalled nodes.",[22,2629,2630],{},"The link is always drawn as a line between the two turtles. Links do not have a\nlocation as turtles do, they are not considered to be on any patch and you\ncannot find the distance from a link to another point.",[22,2632,2633,2634,2637,2638,2641,2642,2645,2646,2648,2649,2651],{},"There are two link designations: undirected and directed. A directed link is\n",[481,2635,2636],{},"out"," of, or ",[481,2639,2640],{},"from",", one node and ",[481,2643,2644],{},"into",", or ",[481,2647,1789],{},", another node. The\nrelationship of a parent to a child could be modeled as a directed link. An\nundirected link appears the same to both nodes, each node has a link ",[481,2650,626],{},"\nanother node. The relationship between spouses, or siblings, could be modeled as\nan undirected link.",[22,2653,2654,2655,332,2663,2671,2672,290,2680,403,2688,1617,2696,2704],{},"There is a global agentset of all links, just as with turtles and patches. You\ncan create undirected links using the ",[319,2656,2658],{"className":2657},[322],[16,2659,2662],{"href":1961,"rel":2660,"className":2661,"dataDisplayText":2662,"target":331,"title":2662},[327],[329],"create-link-with",[319,2664,2666],{"className":2665},[322],[16,2667,2670],{"href":1961,"rel":2668,"className":2669,"dataDisplayText":2670,"target":331,"title":2670},[327],[329],"create-links-with"," commands; and directed links using the\n",[319,2673,2675],{"className":2674},[322],[16,2676,2679],{"href":1961,"rel":2677,"className":2678,"dataDisplayText":2679,"target":331,"title":2679},[327],[329],"create-link-to",[319,2681,2683],{"className":2682},[322],[16,2684,2687],{"href":1961,"rel":2685,"className":2686,"dataDisplayText":2687,"target":331,"title":2687},[327],[329],"create-links-to",[319,2689,2691],{"className":2690},[322],[16,2692,2695],{"href":1961,"rel":2693,"className":2694,"dataDisplayText":2695,"target":331,"title":2695},[327],[329],"create-link-from",[319,2697,2699],{"className":2698},[322],[16,2700,2703],{"href":1961,"rel":2701,"className":2702,"dataDisplayText":2703,"target":331,"title":2703},[327],[329],"create-links-from","\ncommands. Once the first link has been created directed or undirected, all\nunbreeded links must match (links also support breeds, much like turtles, which\nwill be discussed shortly); it’s impossible to have two unbreeded links where\none is directed and the other is undirected. A runtime error occurs if you try\nto do it. (If all unbreeded links die, then you can create links of that breed\nthat are different in designation from the previous links.)",[22,2706,2707],{},"In general, link primitive names indicate what kind of links they deal with:",[44,2709,2710,2719,2728],{},[47,2711,2712,2713,2715,2716,2718],{},"Primitives that have “out” in their name utilize outgoing and undirected\nlinks. You can think of these as “the links I can use to get ",[481,2714,2640],{}," the\ncurrent node ",[481,2717,1789],{}," other nodes.” In general, these are probably the primitives\nyou want to use.",[47,2720,2721,2722,2724,2725,2727],{},"Primitives that have “in” in their name utilize incoming and undirected links.\nYou can think of these as “the links I can use to get ",[481,2723,1789],{}," the current node\n",[481,2726,2640],{}," other nodes.”",[47,2729,2730,2731,2733],{},"Primtives that do not specify “in” or “out”, or have “with” in their name\nutilize ",[481,2732,1212],{}," links, both undirected and directed, incoming and outgoing.",[22,2735,2736,2737,418,2740,2743],{},"A link’s ",[319,2738,2739],{},"end1",[319,2741,2742],{},"end2"," variables contain the two turtles the link connects.\nIf the link is directed, it goes from end1 to end2. If the link is undirected,\nend1 is always the older of the two turtles, that is, the turtle with the\nsmaller who number.",[22,2745,2746,2747,418,2754,2761,2762,418,2770,2778,2779,403,2787,290,2795,2803,2804,2812],{},"Link breeds, like turtle breeds, allow you to define different types of links in\nyour model. Link breeds must either be directed or undirected, unlike unbreeded\nlinks this is defined at compile time rather than run time. You declare link\nbreeds using the keywords ",[319,2748,2750],{"className":2749},[322],[16,2751,1909],{"href":1906,"rel":2752,"className":2753,"dataDisplayText":1909,"target":331,"title":1909},[327],[329],[319,2755,2757],{"className":2756},[322],[16,2758,1900],{"href":1897,"rel":2759,"className":2760,"dataDisplayText":1900,"target":331,"title":1900},[327],[329],".\nBreeded links can be created using the commands\n",[319,2763,2765],{"className":2764},[322],[16,2766,2769],{"href":1961,"rel":2767,"className":2768,"dataDisplayText":2769,"target":331,"title":2769},[327],[329],"create-\u003Cbreed>-with",[319,2771,2773],{"className":2772},[322],[16,2774,2777],{"href":1961,"rel":2775,"className":2776,"dataDisplayText":2777,"target":331,"title":2777},[327],[329],"create-\u003Cbreeds>-with"," for\nundirected breeds and the commands ",[319,2780,2782],{"className":2781},[322],[16,2783,2786],{"href":1961,"rel":2784,"className":2785,"dataDisplayText":2786,"target":331,"title":2786},[327],[329],"create-\u003Cbreed>-to",[319,2788,2790],{"className":2789},[322],[16,2791,2794],{"href":1961,"rel":2792,"className":2793,"dataDisplayText":2794,"target":331,"title":2794},[327],[329],"create-\u003Cbreeds>-to",[319,2796,2798],{"className":2797},[322],[16,2799,2802],{"href":1961,"rel":2800,"className":2801,"dataDisplayText":2802,"target":331,"title":2802},[327],[329],"create-\u003Cbreed>-from",", and\n",[319,2805,2807],{"className":2806},[322],[16,2808,2811],{"href":1961,"rel":2809,"className":2810,"dataDisplayText":2811,"target":331,"title":2811},[327],[329],"create-\u003Cbreeds>-from"," for directed links.",[22,2814,2815],{},"There cannot be more than one undirected link of the same breed (or more than\none unbreeded undirected link) between a pair of agents, nor more than one\ndirected link of the same breed in the same direction between a pair of agents.\nYou can have two directed links of the same breed (or two unbreeded directed\nlinks) between a pair if they are in opposite directions.",[22,2817,2818],{},[281,2819,2820],{},"Layouts",[22,2822,2823,2824,2833,2834],{},"As part of our network support we have also added several different primitives\nthat will help you to visualize the networks. The simplest is ",[319,2825,2827],{"className":2826},[322],[16,2828,2832],{"href":2829,"rel":2830,"className":2831,"dataDisplayText":2832,"target":331,"title":2832},"/dictionary#layout-circle",[327],[329],"layout-circle","\nwhich evenly spaces the agents around the center of the world given a radius.\n",[2835,2836],"img",{"alt":2837,"className":2838,"src":2840,"width":2841,"height":2841,"style":2842},"programming/circle-layout.png",[2839],"netlogo-image","/_content/images/programming/circle-layout.png",245,{"aspectRatio":2843},"245/245",[22,2845,2846,2855,2856,2863,2864,2871,2872,2879,2880],{},[319,2847,2849],{"className":2848},[322],[16,2850,2854],{"href":2851,"rel":2852,"className":2853,"dataDisplayText":2854,"target":331,"title":2854},"/dictionary#layout-radial",[327],[329],"layout-radial"," is a good layout if you have something like a tree structure,\nthough even if there are some cycles in the tree it will still work, though as\nthere are more and more cycles it will probably not look as good.\n",[319,2857,2859],{"className":2858},[322],[16,2860,2854],{"href":2851,"rel":2861,"className":2862,"dataDisplayText":2854,"target":331,"title":2854},[327],[329]," takes a root agent to be the central node places it at (0,0)\nand arranges the nodes connected to it in a concentric pattern. Nodes one degree\naway from the root will be arranged in a circular pattern around the central\nnode and the next level around those nodes and so on. ",[319,2865,2867],{"className":2866},[322],[16,2868,2854],{"href":2851,"rel":2869,"className":2870,"dataDisplayText":2854,"target":331,"title":2854},[327],[329]," will\nattempt to account for asymmetrical graphs and give more space to branches that\nare wider. ",[319,2873,2875],{"className":2874},[322],[16,2876,2854],{"href":2851,"rel":2877,"className":2878,"dataDisplayText":2854,"target":331,"title":2854},[327],[329]," also takes a breed as an input so you use one breed\nof links to layout the network and not another. ",[2835,2881],{"alt":2882,"className":2883,"src":2884,"width":2841,"height":2841,"style":2885},"programming/radial-layout.png",[2839],"/_content/images/programming/radial-layout.png",{"aspectRatio":2843},[22,2887,2888,2889,2898,2899],{},"Given a set of anchor nodes ",[319,2890,2892],{"className":2891},[322],[16,2893,2897],{"href":2894,"rel":2895,"className":2896,"dataDisplayText":2897,"target":331,"title":2897},"/dictionary#layout-tutte",[327],[329],"layout-tutte"," places all the other nodes at the\ncenter of mass of the nodes it is linked to. The anchor set is automatically\narranged in a circle layout with a user defined radius and the other nodes will\nconverge into place (this of course means that you may have to run it several\ntimes before the layout is stable.) ",[2835,2900],{"alt":2901,"className":2902,"src":2903,"width":2841,"height":2841,"style":2904},"programming/tutte-layout.png",[2839],"/_content/images/programming/tutte-layout.png",{"aspectRatio":2843},[22,2906,2907,2916],{},[319,2908,2910],{"className":2909},[322],[16,2911,2915],{"href":2912,"rel":2913,"className":2914,"dataDisplayText":2915,"target":331,"title":2915},"/dictionary#layout-spring",[327],[329],"layout-spring"," is useful for many kinds of networks. The drawback is that is\nrelatively slow since it takes many iterations to converge. In this layout the\nlinks act as springs that pull the nodes they connect toward each other and the\nnodes repel each other. The strength of the forces is controlled by inputs to\nthe primitives. These inputs will always have a value between 0 and 1; keep in\nmind that very small changes can still affect the appearance of the network. The\nsprings also have a length (in patch units), however, because of all the forces\ninvolved the nodes will not end up exactly that distance from each other.",[1449,2918,2919],{},[22,2920,2921,2924],{},[281,2922,2923],{},"Code Examples:"," Network Example, Network Import Example, Giant Component,\nSmall Worlds, Preferential Attachment",[270,2926,2929],{"id":2927,"className":2928},"tie",[14],[16,2930,90],{"className":2931,"href":89},[19],[22,2933,2934],{},"Tie connects two turtles so that the movement of one turtles affects the\nlocation and heading of another. Tie is a property of links so there must be a\nlink between two turtles to create a tie relationship.",[22,2936,2937,2938,2947,2948,418,2956,2964,2965,2972,2973,2980,2981,2988,2989,403,2998,290,3007,3016,3017,3024,3025,3032,3033,301],{},"When a link’s ",[319,2939,2941],{"className":2940},[322],[16,2942,2946],{"href":2943,"rel":2944,"className":2945,"dataDisplayText":2946,"target":331,"title":2946},"/dictionary#tie-mode",[327],[329],"tie-mode"," is set to “fixed” or “free” ",[319,2949,2951],{"className":2950},[322],[16,2952,2739],{"href":2953,"rel":2954,"className":2955,"dataDisplayText":2739,"target":331,"title":2739},"/dictionary#end1",[327],[329],[319,2957,2959],{"className":2958},[322],[16,2960,2742],{"href":2961,"rel":2962,"className":2963,"dataDisplayText":2742,"target":331,"title":2742},"/dictionary#end2",[327],[329]," are\ntied together. If the link is directed ",[319,2966,2968],{"className":2967},[322],[16,2969,2739],{"href":2953,"rel":2970,"className":2971,"dataDisplayText":2739,"target":331,"title":2739},[327],[329]," is the “root agent” and ",[319,2974,2976],{"className":2975},[322],[16,2977,2742],{"href":2961,"rel":2978,"className":2979,"dataDisplayText":2742,"target":331,"title":2742},[327],[329],"\nis the “leaf agent”. That is when ",[319,2982,2984],{"className":2983},[322],[16,2985,2739],{"href":2953,"rel":2986,"className":2987,"dataDisplayText":2739,"target":331,"title":2739},[327],[329]," moves (using ",[319,2990,2992],{"className":2991},[322],[16,2993,2997],{"href":2994,"rel":2995,"className":2996,"dataDisplayText":2997,"target":331,"title":2997},"/dictionary#forward",[327],[329],"fd",[319,2999,3001],{"className":3000},[322],[16,3002,3006],{"href":3003,"rel":3004,"className":3005,"dataDisplayText":3006,"target":331,"title":3006},"/dictionary#jump",[327],[329],"jump",[319,3008,3010],{"className":3009},[322],[16,3011,3015],{"href":3012,"rel":3013,"className":3014,"dataDisplayText":3015,"target":331,"title":3015},"/dictionary#setxy",[327],[329],"setxy",", etc.) ",[319,3018,3020],{"className":3019},[322],[16,3021,2742],{"href":2961,"rel":3022,"className":3023,"dataDisplayText":2742,"target":331,"title":2742},[327],[329]," also moves the same distance and direction.\nHowever when ",[319,3026,3028],{"className":3027},[322],[16,3029,2742],{"href":2961,"rel":3030,"className":3031,"dataDisplayText":2742,"target":331,"title":2742},[327],[329]," moves it does not affect ",[319,3034,3036],{"className":3035},[322],[16,3037,2739],{"href":2953,"rel":3038,"className":3039,"dataDisplayText":2739,"target":331,"title":2739},[327],[329],[22,3041,3042],{},"If the link is undirected it is a reciprocal tie relationship, meaning, if\neither turtle moves the other turtle will also move. So depending on which\nturtle is moving either turtle can be considered the root or the leaf. The root\nturtle is always the turtle that initiates the movement.",[22,3044,3045,3046,3053,3054,3061],{},"When the root turtle turns right or left, the leaf turtle rotates around the\nroot turtle the same amount as if a stiff were attaching the turtles. When\n",[319,3047,3049],{"className":3048},[322],[16,3050,2946],{"href":2943,"rel":3051,"className":3052,"dataDisplayText":2946,"target":331,"title":2946},[327],[329]," is set to “fixed” the heading of the leaf turtle changes by the\nsame amount. If the ",[319,3055,3057],{"className":3056},[322],[16,3058,2946],{"href":2943,"rel":3059,"className":3060,"dataDisplayText":2946,"target":331,"title":2946},[327],[329]," is set to “free” the heading of the leaf turtle\nis unchanged.",[22,3063,1411,3064,3071,3072,3080,3081,3090,3091,301],{},[319,3065,3067],{"className":3066},[322],[16,3068,2946],{"href":2943,"rel":3069,"className":3070,"dataDisplayText":2946,"target":331,"title":2946},[327],[329]," of a link can be set to “fixed” using the ",[319,3073,3075],{"className":3074},[322],[16,3076,2927],{"href":3077,"rel":3078,"className":3079,"dataDisplayText":2927,"target":331,"title":2927},"/dictionary#tie",[327],[329]," command and\nset to “none” (meaning the turtles are no longer tied) using ",[319,3082,3084],{"className":3083},[322],[16,3085,3089],{"href":3086,"rel":3087,"className":3088,"dataDisplayText":3089,"target":331,"title":3089},"/dictionary#untie",[327],[329],"untie"," to set\nthe mode to “free” you need to: ",[319,3092,3093,594,3096,594,3099],{},[580,3094,1265],{"className":3095},[583,972],[580,3097,2946],{"className":3098},[583,592],[580,3100,3103],{"className":3101},[583,3102],"string","\"free\"",[1449,3105,3106],{},[22,3107,3108,3110],{},[281,3109,1455],{}," Tie System Example",[270,3112,3115],{"id":3113,"className":3114},"drawing",[14],[16,3116,96],{"className":3117,"href":95},[19],[22,3119,3120],{},"The drawing is a layer where turtles can make visible marks.",[22,3122,3123],{},"In the view, the drawing appears on top of the patches but underneath the\nturtles. Initially, the drawing is empty and transparent.",[22,3125,3126],{},"You can see the drawing, but the turtles (and patches) can’t. They can’t sense\nthe drawing or react to it. The drawing is just for people to look at.",[22,3128,3129,3130,418,3139,3147,3148,301],{},"Turtles can draw and erase lines in the drawing using the\n",[319,3131,3133],{"className":3132},[322],[16,3134,3138],{"href":3135,"rel":3136,"className":3137,"dataDisplayText":3138,"target":331,"title":3138},"/dictionary#pen-switch-status",[327],[329],"pen-down",[319,3140,3142],{"className":3141},[322],[16,3143,3146],{"href":3135,"rel":3144,"className":3145,"dataDisplayText":3146,"target":331,"title":3146},[327],[329],"pen-erase"," commands.\nWhen a turtle’s pen is down (or erasing), the turtle draws (or erases) a line\nbehind it whenever it moves. The lines are the same color as the turtle. To stop\ndrawing (or erasing), use ",[319,3149,3151],{"className":3150},[322],[16,3152,3155],{"href":3135,"rel":3153,"className":3154,"dataDisplayText":3155,"target":331,"title":3155},[327],[329],"pen-up",[22,3157,3158,3159,3168],{},"Lines drawn by turtles are normally one pixel thick. If you want a different\nthickness, set the ",[319,3160,3162],{"className":3161},[322],[16,3163,3167],{"href":3164,"rel":3165,"className":3166,"dataDisplayText":3167,"target":331,"title":3167},"/dictionary#pen-size",[327],[329],"pen-size"," turtle variable to a different number before\ndrawing (or erasing). In new turtles, the variable is set to 1.",[22,3170,3171,3172,550,3179,3188],{},"Lines made when a turtle moves in a way that doesn’t fix a direction, such as\nwith ",[319,3173,3175],{"className":3174},[322],[16,3176,3015],{"href":3012,"rel":3177,"className":3178,"dataDisplayText":3015,"target":331,"title":3015},[327],[329],[319,3180,3182],{"className":3181},[322],[16,3183,3187],{"href":3184,"rel":3185,"className":3186,"dataDisplayText":3187,"target":331,"title":3187},"/dictionary#move-to",[327],[329],"move-to",", the shortest path line that obeys the topology\nwill be drawn.",[22,3190,3191,3192,3199,3200],{},"Here’s some turtles which have made a drawing over a grid of randomly shaded\npatches. Notice how the turtles cover the lines and the lines cover the patch\ncolors. The ",[319,3193,3195],{"className":3194},[322],[16,3196,3167],{"href":3164,"rel":3197,"className":3198,"dataDisplayText":3167,"target":331,"title":3167},[327],[329]," used here was 2: ",[2835,3201],{"alt":3202,"className":3203,"src":3204,"width":3205,"height":3205,"style":3206},"color chart",[2839],"/_content/images/programming/drawing.png",252,{"aspectRatio":3207},"252/252",[22,3209,1411,3210,3219,3220,3229],{},[319,3211,3213],{"className":3212},[322],[16,3214,3218],{"href":3215,"rel":3216,"className":3217,"dataDisplayText":3218,"target":331,"title":3218},"/dictionary#stamp",[327],[329],"stamp"," command lets a turtle leave an image of itself behind in the\ndrawing and ",[319,3221,3223],{"className":3222},[322],[16,3224,3228],{"href":3225,"rel":3226,"className":3227,"dataDisplayText":3228,"target":331,"title":3228},"/dictionary#stamp-erase",[327],[329],"stamp-erase"," lets it remove the pixels below it in the drawing.",[22,3231,3232,3233,3242,3243,3251],{},"To erase the whole drawing, use the observer commmand ",[319,3234,3236],{"className":3235},[322],[16,3237,3241],{"href":3238,"rel":3239,"className":3240,"dataDisplayText":3241,"target":331,"title":3241},"/dictionary#clear-drawing",[327],[329],"clear-drawing",". (You\ncan also use ",[319,3244,3246],{"className":3245},[322],[16,3247,1243],{"href":3248,"rel":3249,"className":3250,"dataDisplayText":1243,"target":331,"title":1243},"/dictionary#clear-all",[327],[329],", which clears everything else too.)",[22,3253,3254],{},[281,3255,3256],{},"Importing an image",[22,3258,3259,3260,3269],{},"The observer command ",[319,3261,3263],{"className":3262},[322],[16,3264,3268],{"href":3265,"rel":3266,"className":3267,"dataDisplayText":3268,"target":331,"title":3268},"/dictionary#import-drawing",[327],[329],"import-drawing"," command allows you to import an image\nfile from disk into the drawing.",[22,3271,3272,3279,3280,550,3289,3298],{},[319,3273,3275],{"className":3274},[322],[16,3276,3268],{"href":3265,"rel":3277,"className":3278,"dataDisplayText":3268,"target":331,"title":3268},[327],[329]," is useful only for providing a backdrop for people to look\nat. If you want turtles and patches to react to the image, you should use\n",[319,3281,3283],{"className":3282},[322],[16,3284,3288],{"href":3285,"rel":3286,"className":3287,"dataDisplayText":3288,"target":331,"title":3288},"/dictionary#import-pcolors",[327],[329],"import-pcolors",[319,3290,3292],{"className":3291},[322],[16,3293,3297],{"href":3294,"rel":3295,"className":3296,"dataDisplayText":3297,"target":331,"title":3297},"/dictionary#import-pcolors-rgb",[327],[329],"import-pcolors-rgb"," instead.",[22,3300,3301],{},[281,3302,3303],{},"Comparison to other Logos",[22,3305,3306],{},"Drawing works somewhat differently in NetLogo than some other Logos.",[22,3308,3309],{},"Notable differences include:",[44,3311,3312,3315,3322],{},[47,3313,3314],{},"New turtles’ pens are up, not down.",[47,3316,3317,3318,3321],{},"Instead of using a ",[319,3319,3320],{},"fence"," command to confine the turtle inside boundaries, in\nNetLogo you edit the world and turn wrapping off.",[47,3323,3324,3325,290,3328,2645,3331,3334,3335,301],{},"There is no ",[319,3326,3327],{},"screen-color",[319,3329,3330],{},"bgcolor",[319,3332,3333],{},"setbg",". You can make a solid\nbackground by coloring the patches, e.g. ",[319,3336,3337,594,3340,979,3343,594,3346,594,3349,986],{},[580,3338,536],{"className":3339},[583,972],[580,3341,293],{"className":3342},[583,592],[580,3344,1265],{"className":3345},[583,972],[580,3347,815],{"className":3348},[583,592],[580,3350,3352],{"className":3351},[583,639],"blue",[22,3354,3355],{},"Drawing features not supported by NetLogo:",[44,3357,3358,3364],{},[47,3359,3324,3360,3363],{},[319,3361,3362],{},"window"," command. This is used in some other Logos to let the\nturtle roam over an infinite plane.",[47,3365,3324,3366,550,3369,3372],{},[319,3367,3368],{},"flood",[319,3370,3371],{},"fill"," command to fill an enclosed area with color.",[270,3374,3377],{"id":3375,"className":3376},"turtle-shapes",[14],[16,3378,102],{"className":3379,"href":101},[19],[22,3381,3382],{},"In NetLogo, turtle shapes are vector shapes. They are built up from basic\ngeometric shapes; squares, circles, and lines, rather than a grid of pixels.\nVector shapes are fully scalable and rotatable. NetLogo caches bitmap images of\nvector shapes size 1, 1.5, and 2 in order to speed up execution.",[22,3384,3385,3386,3395,3396,3403],{},"A turtle’s shape is stored in its ",[319,3387,3389],{"className":3388},[322],[16,3390,3394],{"href":3391,"rel":3392,"className":3393,"dataDisplayText":3394,"target":331,"title":3394},"/dictionary#shape",[327],[329],"shape"," variable and can be set using the\n",[319,3397,3399],{"className":3398},[322],[16,3400,1265],{"href":2402,"rel":3401,"className":3402,"dataDisplayText":1265,"target":331,"title":1265},[327],[329]," command.",[22,3405,3406,3407,3414],{},"New turtles have a shape of “default”. The ",[319,3408,3410],{"className":3409},[322],[16,3411,1709],{"href":1706,"rel":3412,"className":3413,"dataDisplayText":1709,"target":331,"title":1709},[327],[329]," primitive is\nuseful for changing the default turtle shape to a different shape, or having a\ndifferent default turtle shape for each breed of turtle.",[22,3416,1411,3417,3426],{},[319,3418,3420],{"className":3419},[322],[16,3421,3425],{"href":3422,"rel":3423,"className":3424,"dataDisplayText":3425,"target":331,"title":3425},"/dictionary#shapes",[327],[329],"shapes"," primitive reports a list of currently available turtle shapes in\nthe model. This is useful if, for example, you want to assign a random shape to\na turtle:",[575,3428,3429],{},[319,3430,3431,594,3434,979,3437,594,3440,594,3443,594,3446,986],{},[580,3432,536],{"className":3433},[583,972],[580,3435,289],{"className":3436},[583,592],[580,3438,1265],{"className":3439},[583,972],[580,3441,3394],{"className":3442},[583,592],[580,3444,943],{"className":3445},[583,592],[580,3447,3425],{"className":3448},[583,592],[22,3450,3451,3452,3455],{},"Use the Turtle Shapes Editor to create your own turtle shapes, or to add shapes\nto your model from our shapes library, or to transfer shapes between models. For\nmore information, see the Shapes Editor ",[16,3453,3454],{"href":3425},"section"," of this manual.",[22,3457,3458,3459,3468],{},"The thickness of the lines used to draw the vector shapes can be controlled by\nthe ",[319,3460,3462],{"className":3461},[322],[16,3463,3467],{"href":3464,"rel":3465,"className":3466,"dataDisplayText":3467,"target":331,"title":3467},"/dictionary#__set-line-thickness",[327],[329],"__set-line-thickness"," primitive.",[1449,3470,3471],{},[22,3472,3473,3475],{},[281,3474,2923],{}," Breeds and Shapes Example, Shape Animation Example",[270,3477,3480],{"id":3478,"className":3479},"link-shapes",[14],[16,3481,108],{"className":3482,"href":107},[19],[22,3484,3485,3486,3493,3494,3501,3502,3510],{},"Link Shapes are similar to turtle shapes, only you use the Link Shape Editor to\ncreate and edit them. Link shapes consist of between 0 and 3 lines which can\nhave different patterns and a direction indicator that is composed of the same\nelements as turtle shapes. Links also have a ",[319,3487,3489],{"className":3488},[322],[16,3490,3394],{"href":3391,"rel":3491,"className":3492,"dataDisplayText":3394,"target":331,"title":3394},[327],[329]," variable that can be set\nto any link shape that is in the model. By default links have the “default”\nshape, though you can change that using ",[319,3495,3497],{"className":3496},[322],[16,3498,1709],{"href":1706,"rel":3499,"className":3500,"dataDisplayText":1709,"target":331,"title":1709},[327],[329],". The\n",[319,3503,3505],{"className":3504},[322],[16,3506,3478],{"href":3507,"rel":3508,"className":3509,"dataDisplayText":3478,"target":331,"title":3478},"/dictionary#link-shapes",[327],[329]," reporter reports all the link shapes included in the current\nmodel.",[22,3512,3513,3514,3523],{},"The thickness of the lines in the link shape is controlled by the ",[319,3515,3517],{"className":3516},[322],[16,3518,3522],{"href":3519,"rel":3520,"className":3521,"dataDisplayText":3522,"target":331,"title":3522},"/dictionary#thickness",[327],[329],"thickness","\nlink variable.",[262,3525,3528],{"id":3526,"className":3527},"programming",[14],[16,3529,114],{"className":3530,"href":113},[19],[270,3532,3535],{"id":3533,"className":3534},"procedures",[14],[16,3536,122],{"className":3537,"href":121},[19],[22,3539,3540,3541,418,3544,3547],{},"In NetLogo, ",[281,3542,3543],{},"commands",[281,3545,3546],{},"reporters"," tell agents what to do. A command is\nan action for an agent to carry out, resulting in some effect. A reporter is\ninstructions for computing a value, which the agent then “reports” to whoever\nasked it.",[22,3549,3550],{},"Typically, a command name begins with a verb, such as “create”, “die”, “jump”,\n“inspect”, or “clear”. Most reporter names are nouns or noun phrases.",[22,3552,3553,3554,3557,3558,3562],{},"Commands and reporters built into NetLogo are called ",[281,3555,3556],{},"primitives",".\n",[16,3559,3561],{"href":3560},"dictionary","The NetLogo Dictionary"," has a complete list of built-in\ncommands and reporters.",[22,3564,3565,3566,3568,3569,550,3577,3586,3587,3595],{},"Commands and reporters you define yourself are called ",[281,3567,3533],{},". Each\nprocedure has a name, preceded by the keyword ",[319,3570,3572],{"className":3571},[322],[16,3573,1789],{"href":3574,"rel":3575,"className":3576,"dataDisplayText":1789,"target":331,"title":1789},"/dictionary#to",[327],[329],[319,3578,3580],{"className":3579},[322],[16,3581,3585],{"href":3582,"rel":3583,"className":3584,"dataDisplayText":3585,"target":331,"title":3585},"/dictionary#to-report",[327],[329],"to-report",", depending\non whether it is a command procedure or a reporter procedure. The keyword\n",[319,3588,3590],{"className":3589},[322],[16,3591,1869],{"href":3592,"rel":3593,"className":3594,"dataDisplayText":1869,"target":331,"title":1869},"/dictionary#end",[327],[329]," marks the end of the commands in the procedure. Once you define a\nprocedure, you can use it elsewhere in your program.",[22,3597,3598,3599,3602],{},"Many commands and reporters take ",[281,3600,3601],{},"inputs"," — values that the command or\nreporter uses in carrying out its actions or computing its result.",[22,3604,3605],{},"Here are two command procedures:",[575,3607,3608],{},[319,3609,3610,594,3613,3616,968,3618,3621,968,3623,594,3626,3629,968,3631,3634,3639,3641,594,3646,3650,968,3652,594,3655,627,3658,3660,3661,594,3664,3667,3668,3672,3660,3674,594,3678,594,3681,3660,3684,3688,3660,3690,594,3694,594,3697,3660,3700,3704,3706,3707,968,3709,3713],{},[580,3611,1789],{"className":3612},[583,1225],[580,3614,1793],{"className":3615},[583,1029],[587,3617],{},[580,3619,1243],{"className":3620},[583,972],[587,3622],{},[580,3624,1252],{"className":3625},[583,972],[580,3627,1322],{"className":3628},[583,689],[587,3630],{},[580,3632,1863],{"className":3633},[583,972],[580,3635,3637,1869],{"className":3636},[583,1225],[587,3638],{},[587,3640],{},[580,3642,3644,1789],{"className":3643},[583,1225],[587,3645],{},[580,3647,3649],{"className":3648},[583,1029],"go",[587,3651],{},[580,3653,536],{"className":3654},[583,972],[580,3656,289],{"className":3657},[583,592],[587,3659],{},"    ",[580,3662,2997],{"className":3663},[583,972],[580,3665,729],{"className":3666},[583,689],"            ",[580,3669,3671],{"className":3670},[583,584],";; forward 1 step",[587,3673],{},[580,3675,3677],{"className":3676},[583,972],"rt",[580,3679,1834],{"className":3680},[583,592],[580,3682,1322],{"className":3683},[583,689],[580,3685,3687],{"className":3686},[583,584],";; turn right",[587,3689],{},[580,3691,3693],{"className":3692},[583,972],"lt",[580,3695,1834],{"className":3696},[583,592],[580,3698,1322],{"className":3699},[583,689],[580,3701,3703],{"className":3702},[583,584],";; turn left",[587,3705],{},"  ]",[587,3708],{},[580,3710,3712],{"className":3711},[583,972],"tick",[580,3714,3716,1869],{"className":3715},[583,1225],[587,3717],{},[22,3719,3720],{},"Note the use of semicolons to add “comments” to the program. Comments can make\nyour code easier to read and understand, but they don’t affect its behavior.",[22,3722,3723],{},"In this program,",[44,3725,3726,3733,3788],{},[47,3727,3728,418,3730,3732],{},[319,3729,1793],{},[319,3731,3649],{}," are user-defined commands.",[47,3734,3735,290,3739,290,3746,290,3754,290,3761,3769,3770,3778,3779,3787],{},[580,3736,3737],{},[580,3738,1243],{},[319,3740,3742],{"className":3741},[322],[16,3743,1252],{"href":1540,"rel":3744,"className":3745,"dataDisplayText":1252,"target":331,"title":1252},[327],[329],[319,3747,3749],{"className":3748},[322],[16,3750,1863],{"href":3751,"rel":3752,"className":3753,"dataDisplayText":1863,"target":331,"title":1863},"/dictionary#reset-ticks",[327],[329],[319,3755,3757],{"className":3756},[322],[16,3758,536],{"href":533,"rel":3759,"className":3760,"dataDisplayText":536,"target":331,"title":536},[327],[329],[319,3762,3764],{"className":3763},[322],[16,3765,3693],{"href":3766,"rel":3767,"className":3768,"dataDisplayText":3693,"target":331,"title":3693},"/dictionary#left",[327],[329],"\n(“left turn”), ",[319,3771,3773],{"className":3772},[322],[16,3774,3677],{"href":3775,"rel":3776,"className":3777,"dataDisplayText":3677,"target":331,"title":3677},"/dictionary#right",[327],[329]," (“right turn”) and ",[319,3780,3782],{"className":3781},[322],[16,3783,3712],{"href":3784,"rel":3785,"className":3786,"dataDisplayText":3712,"target":331,"title":3712},"/dictionary#tick",[327],[329],", are all primitive\ncommands.",[47,3789,3790,418,3794,3801,3802,3810,3811,3818],{},[580,3791,3792],{},[580,3793,1834],{},[319,3795,3797],{"className":3796},[322],[16,3798,289],{"href":493,"rel":3799,"className":3800,"dataDisplayText":289,"target":331,"title":289},[327],[329]," are primitive reporters. ",[319,3803,3805],{"className":3804},[322],[16,3806,1834],{"href":3807,"rel":3808,"className":3809,"dataDisplayText":1834,"target":331,"title":1834},"/dictionary#random",[327],[329]," takes a single\nnumber as an input and reports a random integer that is less than the input\n(in this case, between 0 and 9). ",[319,3812,3814],{"className":3813},[322],[16,3815,289],{"href":493,"rel":3816,"className":3817,"dataDisplayText":289,"target":331,"title":289},[327],[329]," reports the agentset consisting\nof all the turtles. (We’ll explain about agentsets later.)",[22,3820,3821,418,3823,3825],{},[319,3822,1793],{},[319,3824,3649],{}," can be called by other procedures, or by buttons, or from the\nCommand Center.",[22,3827,3828,3829,3831,3832,301],{},"Many NetLogo models have a once button that calls a procedure called ",[319,3830,1793],{}," and\na forever button that calls a procedure called ",[319,3833,3649],{},[22,3835,3836,3837,3844],{},"In NetLogo, you may specify which agents — turtles, patches, or links — are to\nrun each command. If you don’t specify, the code is run by the observer. In the\ncode above, the observer uses ",[319,3838,3840],{"className":3839},[322],[16,3841,536],{"href":533,"rel":3842,"className":3843,"dataDisplayText":536,"target":331,"title":536},[327],[329]," to make the set of all turtles run the\ncommands between the square brackets.",[22,3846,3847,418,3854,3861,3862,3869,3870,418,3877,3886],{},[319,3848,3850],{"className":3849},[322],[16,3851,1243],{"href":3248,"rel":3852,"className":3853,"dataDisplayText":1243,"target":331,"title":1243},[327],[329],[319,3855,3857],{"className":3856},[322],[16,3858,1252],{"href":1540,"rel":3859,"className":3860,"dataDisplayText":1252,"target":331,"title":1252},[327],[329]," can only be run by the observer.\n",[319,3863,3865],{"className":3864},[322],[16,3866,2997],{"href":2994,"rel":3867,"className":3868,"dataDisplayText":2997,"target":331,"title":2997},[327],[329],", on the other hand, can only be run by turtles. Some other\ncommands and reporters, such as ",[319,3871,3873],{"className":3872},[322],[16,3874,1265],{"href":2402,"rel":3875,"className":3876,"dataDisplayText":1265,"target":331,"title":1265},[327],[329],[319,3878,3880],{"className":3879},[322],[16,3881,3885],{"href":3882,"rel":3883,"className":3884,"dataDisplayText":3885,"target":331,"title":3885},"/dictionary#ticks",[327],[329],"ticks",", can be run by different\nagent types.",[22,3888,3889],{},"Here are some more advanced features you can take advantage of when defining\nyour own procedures.",[22,3891,3892],{},[281,3893,3894],{},"Procedures with inputs",[22,3896,3897],{},"Procedures can take inputs, just like many primitives do. To create a procedure\nthat accepts inputs, put their names in square brackets after the procedure\nname. For example:",[575,3899,3900],{},[319,3901,3902,594,3905,627,3909,594,3913,3917,3918,3922,968,3924,3927,968,3929,594,3933,627,3936,3660,3938,594,3941,3944,3660,3946,594,3949,594,3953,594,3957,3960,3706,3962],{},[580,3903,1789],{"className":3904},[583,1225],[580,3906,3908],{"className":3907},[583,1029],"draw-polygon",[580,3910,3912],{"className":3911},[583,1029],"num-sides",[580,3914,3916],{"className":3915},[583,1029],"len","]  ",[580,3919,3921],{"className":3920},[583,584],";; turtle procedure",[587,3923],{},[580,3925,3138],{"className":3926},[583,972],[587,3928],{},[580,3930,3932],{"className":3931},[583,972],"repeat",[580,3934,3912],{"className":3935},[583,1029],[587,3937],{},[580,3939,2997],{"className":3940},[583,972],[580,3942,3916],{"className":3943},[583,1029],[587,3945],{},[580,3947,3677],{"className":3948},[583,972],[580,3950,3952],{"className":3951},[583,689],"360",[580,3954,3956],{"className":3955},[583,592],"/",[580,3958,3912],{"className":3959},[583,1029],[587,3961],{},[580,3963,3965,1869],{"className":3964},[583,1225],[587,3966],{},[22,3968,3969],{},"Elsewhere in the program, you might use the procedure by asking the turtles to\neach draw an octagon with a side length equal to its who number:",[575,3971,3972],{},[319,3973,3974,594,3977,979,3980,594,3983,594,3987,986],{},[580,3975,536],{"className":3976},[583,972],[580,3978,289],{"className":3979},[583,592],[580,3981,3908],{"className":3982},[583,1029],[580,3984,3986],{"className":3985},[583,689],"8",[580,3988,3990],{"className":3989},[583,592],"who",[22,3992,3993],{},[281,3994,3995],{},"Reporter procedures",[22,3997,3998,3999,4006,4007,4014,4015,4024],{},"Just like you can define your own commands, you can define your own reporters.\nYou must do two special things. First, use ",[319,4000,4002],{"className":4001},[322],[16,4003,3585],{"href":3582,"rel":4004,"className":4005,"dataDisplayText":3585,"target":331,"title":3585},[327],[329]," instead of ",[319,4008,4010],{"className":4009},[322],[16,4011,1789],{"href":3574,"rel":4012,"className":4013,"dataDisplayText":1789,"target":331,"title":1789},[327],[329]," to\nbegin your procedure. Then, in the body of the procedure, use ",[319,4016,4018],{"className":4017},[322],[16,4019,4023],{"href":4020,"rel":4021,"className":4022,"dataDisplayText":4023,"target":331,"title":4023},"/dictionary#report",[327],[329],"report"," to\nreport the value you want to report.",[575,4026,4027],{},[319,4028,4029,594,4032,627,4036,641,4039,968,4041,594,4045,594,4048,594,4052,4055,1811,4057,594,4060,986,4063,1811,4065,795,4068,594,4072,4075,4076],{},[580,4030,3585],{"className":4031},[583,1225],[580,4033,4035],{"className":4034},[583,1029],"absolute-value",[580,4037,689],{"className":4038},[583,1029],[587,4040],{},[580,4042,4044],{"className":4043},[583,972],"ifelse",[580,4046,689],{"className":4047},[583,1029],[580,4049,4051],{"className":4050},[583,592],">=",[580,4053,690],{"className":4054},[583,689],[587,4056],{},[580,4058,4023],{"className":4059},[583,972],[580,4061,689],{"className":4062},[583,1029],[587,4064],{},[580,4066,4023],{"className":4067},[583,972],[580,4069,4071],{"className":4070},[583,592],"-",[580,4073,689],{"className":4074},[583,1029],") ]",[580,4077,4079,1869],{"className":4078},[583,1225],[587,4080],{},[270,4082,4084],{"id":536,"className":4083},[14],[16,4085,128],{"className":4086,"href":127},[19],[22,4088,4089,4090,4097,4098,4101],{},"NetLogo uses the ",[319,4091,4093],{"className":4092},[322],[16,4094,536],{"href":533,"rel":4095,"className":4096,"dataDisplayText":536,"target":331,"title":536},[327],[329]," command to give commands to turtles, patches, and\nlinks. All code to be run by turtles ",[481,4099,4100],{},"must"," be located in a turtle “context”.\nYou can establish a turtle context in any of three ways:",[44,4103,4104,4107,4110],{},[47,4105,4106],{},"In a button, by choosing “Turtles” from the popup menu. Any code you put in\nthe button will be run by all turtles.",[47,4108,4109],{},"In the Command Center, by choosing “Turtles” from the popup menu. Any commands\nyou enter will be run by all the turtles.",[47,4111,4112,4113,290,4121,4124],{},"By using ",[319,4114,4115,594,4118],{},[580,4116,536],{"className":4117},[583,972],[580,4119,289],{"className":4120},[583,592],[319,4122,4123],{},"hatch",", or other commands which establish a turtle\ncontext.",[22,4126,4127,4128,4135,4136,4143],{},"The same goes for patches, links, and the observer, except that you cannot\n",[319,4129,4131],{"className":4130},[322],[16,4132,536],{"href":533,"rel":4133,"className":4134,"dataDisplayText":536,"target":331,"title":536},[327],[329]," the observer. Any code that is not inside any ",[319,4137,4139],{"className":4138},[322],[16,4140,536],{"href":533,"rel":4141,"className":4142,"dataDisplayText":536,"target":331,"title":536},[327],[329]," is by default\nobserver code.",[22,4145,4146,4147,4154,4155,4158],{},"Because agentset members are always read in a random order, when ",[319,4148,4150],{"className":4149},[322],[16,4151,536],{"href":533,"rel":4152,"className":4153,"dataDisplayText":536,"target":331,"title":536},[327],[329]," is used\nwith an agentset each agent will take its turn in a random order. See\n",[16,4156,66],{"href":4157},"/programming#agentsets"," for more information.",[22,4160,4161,4162,4169],{},"Here’s an example of the use of ",[319,4163,4165],{"className":4164},[322],[16,4166,536],{"href":533,"rel":4167,"className":4168,"dataDisplayText":536,"target":331,"title":536},[327],[329]," in a NetLogo procedure:",[575,4171,4172],{},[319,4173,4174,594,4177,4180,968,4182,4185,968,4187,594,4190,4194,4195,4199,968,4201,594,4204,4207,1811,4209,594,4212,594,4215,3660,4218,4222,1824,4224,594,4227,4230,4231,4235,968,4237,594,4240,4243,1811,4245,594,4248,594,4251,594,4254,4257,4258,4262,4264,4265,594,4268,594,4271,4274,4275,4279,968,4281,4284],{},[580,4175,1789],{"className":4176},[583,1225],[580,4178,1793],{"className":4179},[583,1029],[587,4181],{},[580,4183,1243],{"className":4184},[583,972],[587,4186],{},[580,4188,1252],{"className":4189},[583,972],[580,4191,4193],{"className":4192},[583,689],"100","   ",[580,4196,4198],{"className":4197},[583,584],";; create 100 turtles with random headings",[587,4200],{},[580,4202,536],{"className":4203},[583,972],[580,4205,289],{"className":4206},[583,592],[587,4208],{},[580,4210,1265],{"className":4211},[583,972],[580,4213,631],{"className":4214},[583,592],[580,4216,640],{"className":4217},[583,639],[580,4219,4221],{"className":4220},[583,584],";; turn them red",[587,4223],{},[580,4225,2997],{"className":4226},[583,972],[580,4228,1808],{"className":4229},[583,689]," ]          ",[580,4232,4234],{"className":4233},[583,584],";; spread them around",[587,4236],{},[580,4238,536],{"className":4239},[583,972],[580,4241,293],{"className":4242},[583,592],[587,4244],{},[580,4246,1659],{"className":4247},[583,972],[580,4249,330],{"className":4250},[583,592],[580,4252,685],{"className":4253},[583,592],[580,4255,690],{"className":4256},[583,689],"         ",[580,4259,4261],{"className":4260},[583,584],";; patches on the right side",[587,4263],{},"        [ ",[580,4266,1265],{"className":4267},[583,972],[580,4269,815],{"className":4270},[583,592],[580,4272,822],{"className":4273},[583,639]," ] ]  ",[580,4276,4278],{"className":4277},[583,584],";; of the view turn green",[587,4280],{},[580,4282,1863],{"className":4283},[583,972],[580,4285,4287,1869],{"className":4286},[583,1225],[587,4288],{},[22,4290,4291],{},"The models in the Models Library are full of other examples. A good place to\nstart looking is in the Code Examples section.",[22,4293,4294,4295,4302,4303,4310,4311,290,4318,290,4327,332,4336,4345],{},"Usually, the observer uses ",[319,4296,4298],{"className":4297},[322],[16,4299,536],{"href":533,"rel":4300,"className":4301,"dataDisplayText":536,"target":331,"title":536},[327],[329]," to ask all turtles, all patches or all links\nto run commands. You can also use ",[319,4304,4306],{"className":4305},[322],[16,4307,536],{"href":533,"rel":4308,"className":4309,"dataDisplayText":536,"target":331,"title":536},[327],[329]," to have an individual turtle, patch or\nlink run commands. The reporters ",[319,4312,4314],{"className":4313},[322],[16,4315,859],{"href":1528,"rel":4316,"className":4317,"dataDisplayText":859,"target":331,"title":859},[327],[329],[319,4319,4321],{"className":4320},[322],[16,4322,4326],{"href":4323,"rel":4324,"className":4325,"dataDisplayText":4326,"target":331,"title":4326},"/dictionary#patch",[327],[329],"patch",[319,4328,4330],{"className":4329},[322],[16,4331,4335],{"href":4332,"rel":4333,"className":4334,"dataDisplayText":4335,"target":331,"title":4335},"/dictionary#link",[327],[329],"link",[319,4337,4339],{"className":4338},[322],[16,4340,4344],{"href":4341,"rel":4342,"className":4343,"dataDisplayText":4344,"target":331,"title":4344},"/dictionary#patch-at",[327],[329],"patch-at"," are useful for this technique. For example:",[575,4347,4348],{},[319,4349,4350,594,4353,4356,968,4358,4361,968,4363,594,4367,4370,4371,4375,968,4377,594,4380,594,4383,4386,4387,4391,1811,4393,594,4396,4399,4400,4404,968,4406,594,4409,594,4412,4386,4415,4419,1811,4421,594,4424,594,4427,4430,4431,4435,968,4437,594,4440,594,4443,4386,4447,4451,1811,4453,594,4456,4460,4461,4465,968,4467,594,4470,594,4473,594,4476,4480,4481,4485,1811,4487,594,4490,594,4493,4430,4496,4500,968,4502,594,4505,594,4508,4386,4511,4515,1811,4517,594,4520,594,4523,594,4526,3667,4529,4533,4535,4536,594,4539,594,4542,4545,4546,4550,968,4552,594,4555,594,4558,4386,4561,4565,1811,4567,594,4570,594,4573,2189,4576,4580,968,4582,594,4585,594,4588,594,4591,4386,4594,4598,1811,4600,594,4603,594,4606,4609,4610,4613,968,4615,4618],{},[580,4351,1789],{"className":4352},[583,1225],[580,4354,1793],{"className":4355},[583,1029],[587,4357],{},[580,4359,1243],{"className":4360},[583,972],[587,4362],{},[580,4364,4366],{"className":4365},[583,972],"crt",[580,4368,709],{"className":4369},[583,689],"                           ",[580,4372,4374],{"className":4373},[583,584],";; make 3 turtles",[587,4376],{},[580,4378,536],{"className":4379},[583,972],[580,4381,859],{"className":4382},[583,592],[580,4384,690],{"className":4385},[583,689],"                    ",[580,4388,4390],{"className":4389},[583,584],";; tell the first one...",[587,4392],{},[580,4394,2997],{"className":4395},[583,972],[580,4397,729],{"className":4398},[583,689]," ]                      ",[580,4401,4403],{"className":4402},[583,584],";; ...to go forward",[587,4405],{},[580,4407,536],{"className":4408},[583,972],[580,4410,859],{"className":4411},[583,592],[580,4413,729],{"className":4414},[583,689],[580,4416,4418],{"className":4417},[583,584],";; tell the second one...",[587,4420],{},[580,4422,1265],{"className":4423},[583,972],[580,4425,631],{"className":4426},[583,592],[580,4428,822],{"className":4429},[583,639]," ]           ",[580,4432,4434],{"className":4433},[583,584],";; ...to become green",[587,4436],{},[580,4438,536],{"className":4439},[583,972],[580,4441,859],{"className":4442},[583,592],[580,4444,4446],{"className":4445},[583,689],"2",[580,4448,4450],{"className":4449},[583,584],";; tell the third one...",[587,4452],{},[580,4454,3677],{"className":4455},[583,972],[580,4457,4459],{"className":4458},[583,689],"90"," ]                     ",[580,4462,4464],{"className":4463},[583,584],";; ...to turn right",[587,4466],{},[580,4468,536],{"className":4469},[583,972],[580,4471,4326],{"className":4472},[583,592],[580,4474,4446],{"className":4475},[583,689],[580,4477,4479],{"className":4478},[583,689],"-2","                  ",[580,4482,4484],{"className":4483},[583,584],";; ask the patch at (2,-2)",[587,4486],{},[580,4488,1265],{"className":4489},[583,972],[580,4491,815],{"className":4492},[583,592],[580,4494,3352],{"className":4495},[583,639],[580,4497,4499],{"className":4498},[583,584],";; ...to become blue",[587,4501],{},[580,4503,536],{"className":4504},[583,972],[580,4506,859],{"className":4507},[583,592],[580,4509,690],{"className":4510},[583,689],[580,4512,4514],{"className":4513},[583,584],";; ask the first turtle",[587,4516],{},[580,4518,536],{"className":4519},[583,972],[580,4521,4344],{"className":4522},[583,592],[580,4524,729],{"className":4525},[583,689],[580,4527,690],{"className":4528},[583,689],[580,4530,4532],{"className":4531},[583,584],";; ...to ask patch to the east",[587,4534],{},"      [ ",[580,4537,1265],{"className":4538},[583,972],[580,4540,815],{"className":4541},[583,592],[580,4543,640],{"className":4544},[583,639]," ] ]        ",[580,4547,4549],{"className":4548},[583,584],";; ...to become red",[587,4551],{},[580,4553,536],{"className":4554},[583,972],[580,4556,859],{"className":4557},[583,592],[580,4559,690],{"className":4560},[583,689],[580,4562,4564],{"className":4563},[583,584],";; tell the first turtle...",[587,4566],{},[580,4568,2662],{"className":4569},[583,972],[580,4571,859],{"className":4572},[583,592],[580,4574,729],{"className":4575},[583,689],[580,4577,4579],{"className":4578},[583,584],";; ...make a link with the second",[587,4581],{},[580,4583,536],{"className":4584},[583,972],[580,4586,4335],{"className":4587},[583,592],[580,4589,690],{"className":4590},[583,689],[580,4592,729],{"className":4593},[583,689],[580,4595,4597],{"className":4596},[583,584],";; tell the link between turtle 0 and 1",[587,4599],{},[580,4601,1265],{"className":4602},[583,972],[580,4604,631],{"className":4605},[583,592],[580,4607,3352],{"className":4608},[583,639]," ]            ",[580,4611,4499],{"className":4612},[583,584],[587,4614],{},[580,4616,1863],{"className":4617},[583,972],[580,4619,4621,1869],{"className":4620},[583,1225],[587,4622],{},[22,4624,4625],{},"Every turtle created has a who number. The first turtle created is number 0, the\nsecond turtle number 1, and so forth.",[22,4627,1411,4628,4635,4636,4643,4644,4651,4652,4659,4660,4663,4664,4666,4667,4669,4670,301],{},[319,4629,4631],{"className":4630},[322],[16,4632,859],{"href":1528,"rel":4633,"className":4634,"dataDisplayText":859,"target":331,"title":859},[327],[329]," primitive reporter takes a who number as an input, and reports\nthe turtle with that who number. The ",[319,4637,4639],{"className":4638},[322],[16,4640,4326],{"href":4323,"rel":4641,"className":4642,"dataDisplayText":4326,"target":331,"title":4326},[327],[329]," primitive reporter takes values\nfor pxcor and pycor and reports the patch with those coordinates. The ",[319,4645,4647],{"className":4646},[322],[16,4648,4335],{"href":4332,"rel":4649,"className":4650,"dataDisplayText":4335,"target":331,"title":4335},[327],[329],"\nprimitive takes two inputs, the who numbers of the two turtles it connects. And\nthe ",[319,4653,4655],{"className":4654},[322],[16,4656,4344],{"href":4341,"rel":4657,"className":4658,"dataDisplayText":4344,"target":331,"title":4344},[327],[329]," primitive reporter takes ",[481,4661,4662],{},"offsets",": distances, in the x and y\ndirections, ",[481,4665,2640],{}," the first agent. In the example ",[319,4668,1793],{}," procedure above, the\nturtle with who number 0 is asked to get the patch east (and no patches north)\nof itself like this: ",[319,4671,4672,594,4675,594,4678,979,4681,594,4684,594,4687,594,4690,979,4693,594,4696,594,4699,4702],{},[580,4673,536],{"className":4674},[583,972],[580,4676,859],{"className":4677},[583,592],[580,4679,690],{"className":4680},[583,689],[580,4682,536],{"className":4683},[583,972],[580,4685,4344],{"className":4686},[583,592],[580,4688,729],{"className":4689},[583,689],[580,4691,690],{"className":4692},[583,689],[580,4694,1265],{"className":4695},[583,972],[580,4697,815],{"className":4698},[583,592],[580,4700,640],{"className":4701},[583,639]," ] ]",[22,4704,4705,4706,4708],{},"You can also select a subset of turtles, or a subset of patches, or a subset of\nlinks and ask them to do something. This involves using ",[281,4707,469],{},". The next\nsection explains them in detail.",[22,4710,4711],{},"When you ask a set of agents to run more than one command, each agent must\nfinish before the next agent starts. One agent runs all of the commands, then\nthe next agent runs all of them, and so on. For example, if you write:",[575,4713,4714],{},[319,4715,4716,594,4719,4722,4724,4725,594,4728,4731,3660,4733,594,4736,594,4739,986],{},[580,4717,536],{"className":4718},[583,972],[580,4720,289],{"className":4721},[583,592],[587,4723],{},"  [ ",[580,4726,2997],{"className":4727},[583,972],[580,4729,729],{"className":4730},[583,689],[587,4732],{},[580,4734,1265],{"className":4735},[583,972],[580,4737,631],{"className":4738},[583,592],[580,4740,640],{"className":4741},[583,639],[22,4743,4744],{},"first one turtle moves and turns red, then another turtle moves and turns red,\nand so on.",[22,4746,4747],{},"But if you write it this way:",[575,4749,4750],{},[319,4751,4752,594,4755,979,4758,594,4761,986,4764,4766,594,4769,979,4772,594,4775,594,4778,986],{},[580,4753,536],{"className":4754},[583,972],[580,4756,289],{"className":4757},[583,592],[580,4759,2997],{"className":4760},[583,972],[580,4762,729],{"className":4763},[583,689],[587,4765],{},[580,4767,536],{"className":4768},[583,972],[580,4770,289],{"className":4771},[583,592],[580,4773,1265],{"className":4774},[583,972],[580,4776,631],{"className":4777},[583,592],[580,4779,640],{"className":4780},[583,639],[22,4782,4783],{},"first all the turtles move, then they all turn red.",[270,4785,4788],{"id":4786,"className":4787},"ask-concurrent",[14],[16,4789,134],{"className":4790,"href":133},[19],[22,4792,4793,4796,4797,4799],{},[281,4794,4795],{},"NOTE:"," The following information is included only for backwards\ncompatibility. We don’t recommend using the ",[319,4798,4786],{}," primitive at all in\nnew models.",[22,4801,4802,4803,4810,4811,4818],{},"In very old versions of NetLogo, ",[319,4804,4806],{"className":4805},[322],[16,4807,536],{"href":533,"rel":4808,"className":4809,"dataDisplayText":536,"target":331,"title":536},[327],[329]," had simulated concurrent behavior by\ndefault. Since NetLogo 4.0 (2007), ",[319,4812,4814],{"className":4813},[322],[16,4815,536],{"href":533,"rel":4816,"className":4817,"dataDisplayText":536,"target":331,"title":536},[327],[329]," is serial, that is, the agents run\nthe commands inside the ask one at a time.",[22,4820,4821,4822,4830,4831,4838],{},"The following information describes the behavior of the ",[319,4823,4825],{"className":4824},[322],[16,4826,4786],{"href":4827,"rel":4828,"className":4829,"dataDisplayText":4786,"target":331,"title":4786},"/dictionary#ask-concurrent",[327],[329],"\ncommand, which behaves the way the old ",[319,4832,4834],{"className":4833},[322],[16,4835,536],{"href":533,"rel":4836,"className":4837,"dataDisplayText":536,"target":331,"title":536},[327],[329]," behaved.",[22,4840,4841,4848],{},[319,4842,4844],{"className":4843},[322],[16,4845,4786],{"href":4827,"rel":4846,"className":4847,"dataDisplayText":4786,"target":331,"title":4786},[327],[329]," produces simulated concurrency via a mechanism of\nturn-taking. The first agent takes a turn, then the second agent takes a turn,\nand so on until every agent in the asked agentset has had a turn. Then we go\nback to the first agent. This continues until all of the agents have finished\nrunning all of the commands.",[22,4850,4851],{},"An agent’s “turn” ends when it performs an action that affects the state of the\nworld, such as moving, or creating a turtle, or changing the value of a global,\nturtle, patch, or link variable. (Setting a local variable doesn’t count.)",[22,4853,1411,4854,795,4862,4869,4870,795,4879,4887,4888,4895,4896,4905,4906,4920,4921,4923,4924,4933,4934,301],{},[319,4855,4857],{"className":4856},[322],[16,4858,4861],{"href":2994,"rel":4859,"className":4860,"dataDisplayText":4861,"target":331,"title":4861},[327],[329],"forward",[319,4863,4865],{"className":4864},[322],[16,4866,2997],{"href":2994,"rel":4867,"className":4868,"dataDisplayText":2997,"target":331,"title":2997},[327],[329],") and ",[319,4871,4873],{"className":4872},[322],[16,4874,4878],{"href":4875,"rel":4876,"className":4877,"dataDisplayText":4878,"target":331,"title":4878},"/dictionary#back",[327],[329],"back",[319,4880,4882],{"className":4881},[322],[16,4883,4886],{"href":4875,"rel":4884,"className":4885,"dataDisplayText":4886,"target":331,"title":4886},[327],[329],"bk",") commands are treated\nspecially. When used inside ",[319,4889,4891],{"className":4890},[322],[16,4892,4786],{"href":4827,"rel":4893,"className":4894,"dataDisplayText":4786,"target":331,"title":4786},[327],[329],", these commands can take multiple\nturns to execute. During its turn, the turtle can only move by one step. Thus,\nfor example, ",[319,4897,4898,594,4901],{},[580,4899,2997],{"className":4900},[583,972],[580,4902,4904],{"className":4903},[583,689],"20"," is equivalent to ",[319,4907,4908,594,4911,979,4914,594,4917,986],{},[580,4909,3932],{"className":4910},[583,972],[580,4912,4904],{"className":4913},[583,689],[580,4915,2997],{"className":4916},[583,972],[580,4918,729],{"className":4919},[583,689],", where the turtle’s\nturn ends after each run of ",[319,4922,2997],{},". If the distance specified isn’t an integer,\nthe last fraction of step takes a full turn. So for example ",[319,4925,4926,594,4929],{},[580,4927,2997],{"className":4928},[583,972],[580,4930,4932],{"className":4931},[583,689],"20.3"," is\nequivalent to ",[319,4935,4936,594,4939,979,4942,594,4945,2189,4948,594,4951],{},[580,4937,3932],{"className":4938},[583,972],[580,4940,4904],{"className":4941},[583,689],[580,4943,2997],{"className":4944},[583,972],[580,4946,729],{"className":4947},[583,689],[580,4949,2997],{"className":4950},[583,972],[580,4952,4954],{"className":4953},[583,689],"0.3",[22,4956,1411,4957,4964],{},[319,4958,4960],{"className":4959},[322],[16,4961,3006],{"href":3003,"rel":4962,"className":4963,"dataDisplayText":3006,"target":331,"title":3006},[327],[329]," command always takes exactly one turn, regardless of distance.",[22,4966,4967,4968,418,4975,4982],{},"To understand the difference between ",[319,4969,4971],{"className":4970},[322],[16,4972,536],{"href":533,"rel":4973,"className":4974,"dataDisplayText":536,"target":331,"title":536},[327],[329],[319,4976,4978],{"className":4977},[322],[16,4979,4786],{"href":4827,"rel":4980,"className":4981,"dataDisplayText":4786,"target":331,"title":4786},[327],[329],", consider\nthe following two commands:",[575,4984,4985],{},[319,4986,4987,594,4990,979,4993,594,4996,986,4999,5001,594,5004,979,5007,594,5010,986],{},[580,4988,536],{"className":4989},[583,972],[580,4991,289],{"className":4992},[583,592],[580,4994,2997],{"className":4995},[583,972],[580,4997,1256],{"className":4998},[583,689],[587,5000],{},[580,5002,4786],{"className":5003},[583,972],[580,5005,289],{"className":5006},[583,592],[580,5008,2997],{"className":5009},[583,972],[580,5011,1256],{"className":5012},[583,689],[22,5014,5015,5016,5023],{},"With ",[319,5017,5019],{"className":5018},[322],[16,5020,536],{"href":533,"rel":5021,"className":5022,"dataDisplayText":536,"target":331,"title":536},[327],[329],", the first turtle takes five steps forward, then the second turtle\ntakes five steps forward, and so on.",[22,5025,5015,5026,5033],{},[319,5027,5029],{"className":5028},[322],[16,5030,4786],{"href":4827,"rel":5031,"className":5032,"dataDisplayText":4786,"target":331,"title":4786},[327],[329],", all of the turtles take one step forward. Then they all\ntake a second step, and so on. Thus, the latter command is equivalent to:",[575,5035,5036],{},[319,5037,5038,594,5041,979,5044,594,5047,979,5050,594,5053,4702],{},[580,5039,3932],{"className":5040},[583,972],[580,5042,1256],{"className":5043},[583,689],[580,5045,536],{"className":5046},[583,972],[580,5048,289],{"className":5049},[583,592],[580,5051,2997],{"className":5052},[583,972],[580,5054,729],{"className":5055},[583,689],[1449,5057,5058],{},[22,5059,5060,5062,5063,5070,5071,301],{},[281,5061,1455],{}," Ask-Concurrent Example shows the difference between ",[319,5064,5066],{"className":5065},[322],[16,5067,536],{"href":533,"rel":5068,"className":5069,"dataDisplayText":536,"target":331,"title":536},[327],[329],"\nand ",[319,5072,5074],{"className":5073},[322],[16,5075,4786],{"href":4827,"rel":5076,"className":5077,"dataDisplayText":4786,"target":331,"title":4786},[327],[329],[22,5079,5080,5081,5088,5089,5096],{},"The behavior of ",[319,5082,5084],{"className":5083},[322],[16,5085,4786],{"href":4827,"rel":5086,"className":5087,"dataDisplayText":4786,"target":331,"title":4786},[327],[329]," cannot always be so simply reproduced using\n",[319,5090,5092],{"className":5091},[322],[16,5093,536],{"href":533,"rel":5094,"className":5095,"dataDisplayText":536,"target":331,"title":536},[327],[329],", as in this example. Consider this command:",[575,5098,5099],{},[319,5100,5101,594,5104,979,5107,594,5110,594,5113,986],{},[580,5102,4786],{"className":5103},[583,972],[580,5105,289],{"className":5106},[583,592],[580,5108,2997],{"className":5109},[583,972],[580,5111,1834],{"className":5112},[583,592],[580,5114,1322],{"className":5115},[583,689],[22,5117,5118,5119,5126],{},"In order to get the same behavior using ",[319,5120,5122],{"className":5121},[322],[16,5123,536],{"href":533,"rel":5124,"className":5125,"dataDisplayText":536,"target":331,"title":536},[327],[329],", we would have to write:",[575,5128,5129],{},[319,5130,5131,627,5134,641,5138,5140,594,5143,979,5146,594,5149,594,5152,594,5155,986,5158,5160,627,5164,594,5167,594,5170,627,5173,594,5176,594,5179,5182,5183,968,5185,594,5188,594,5191,627,5194,594,5197,594,5200,733,5203,3660,5205,594,5208,5211,3660,5213,594,5216,594,5219,594,5222,594,5225,5228,3706,5230,641],{},[580,5132,2342],{"className":5133},[583,1225],[580,5135,5137],{"className":5136},[583,1029],"steps",[587,5139],{},[580,5141,536],{"className":5142},[583,972],[580,5144,289],{"className":5145},[583,592],[580,5147,1265],{"className":5148},[583,972],[580,5150,5137],{"className":5151},[583,1029],[580,5153,1834],{"className":5154},[583,592],[580,5156,1322],{"className":5157},[583,689],[587,5159],{},[580,5161,5163],{"className":5162},[583,972],"while",[580,5165,901],{"className":5166},[583,592],[580,5168,289],{"className":5169},[583,592],[580,5171,626],{"className":5172},[583,592],[580,5174,5137],{"className":5175},[583,1029],[580,5177,685],{"className":5178},[583,592],[580,5180,690],{"className":5181},[583,689],"]] [",[587,5184],{},[580,5186,536],{"className":5187},[583,972],[580,5189,289],{"className":5190},[583,592],[580,5192,626],{"className":5193},[583,592],[580,5195,5137],{"className":5196},[583,1029],[580,5198,685],{"className":5199},[583,592],[580,5201,690],{"className":5202},[583,689],[587,5204],{},[580,5206,2997],{"className":5207},[583,972],[580,5209,729],{"className":5210},[583,689],[587,5212],{},[580,5214,1265],{"className":5215},[583,972],[580,5217,5137],{"className":5218},[583,1029],[580,5220,5137],{"className":5221},[583,1029],[580,5223,4071],{"className":5224},[583,592],[580,5226,729],{"className":5227},[583,689],[587,5229],{},[587,5231],{},[22,5233,5234,5235,5244,5245,418,5252,5259,5260,5267],{},"To prolong an agent’s “turn”, use the ",[319,5236,5238],{"className":5237},[322],[16,5239,5243],{"href":5240,"rel":5241,"className":5242,"dataDisplayText":5243,"target":331,"title":5243},"/dictionary#without-interruption",[327],[329],"without-interruption"," command. (The\ncommand blocks inside some commands, such as ",[319,5246,5248],{"className":5247},[322],[16,5249,1252],{"href":1540,"rel":5250,"className":5251,"dataDisplayText":1252,"target":331,"title":1252},[327],[329],[319,5253,5255],{"className":5254},[322],[16,5256,4123],{"href":1581,"rel":5257,"className":5258,"dataDisplayText":4123,"target":331,"title":4123},[327],[329],",\nhave an implied ",[319,5261,5263],{"className":5262},[322],[16,5264,5243],{"href":5240,"rel":5265,"className":5266,"dataDisplayText":5243,"target":331,"title":5243},[327],[329]," around them.)",[22,5269,5270,5271,5278],{},"Note that the behavior of ",[319,5272,5274],{"className":5273},[322],[16,5275,4786],{"href":4827,"rel":5276,"className":5277,"dataDisplayText":4786,"target":331,"title":4786},[327],[329]," is completely deterministic. Given\nthe same code and the same initial conditions, the same thing will always happen\n(if you are using the same version of NetLogo and begin your model run with the\nsame random seed).",[22,5280,5281,5282,5284,5285,5287],{},"In general, we suggest you not use ",[319,5283,4786],{}," at all. If you do, we\nsuggest you write your model so that it does not depend on the exact details of\nhow ",[319,5286,4786],{}," works. We make no guarantees that its semantics will remain\nthe same in future versions of NetLogo, or that it will continue to be supported\nat all.",[270,5289,5292],{"id":5290,"className":5291},"syntax",[14],[16,5293,140],{"className":5294,"href":139},[19],[34,5296,5299],{"id":5297,"className":5298},"colors",[14],[16,5300,5303],{"className":5301,"href":5302},[19],"#colors","Colors",[22,5305,5306],{},"In the Code tab and elsewhere in the NetLogo user interface, program code is\ncolor-coded by the following scheme:",[44,5308,5309,5312,5315,5318,5321,5324],{},[47,5310,5311],{},"Keywords are green",[47,5313,5314],{},"Constants are orange",[47,5316,5317],{},"Comments are gray",[47,5319,5320],{},"Primitive commands are blue",[47,5322,5323],{},"Primitive reporters are purple",[47,5325,5326],{},"Everything else is black",[34,5328,5331],{"id":5329,"className":5330},"notice",[14],[16,5332,5335],{"className":5333,"href":5334},[19],"#notice","Notice",[22,5337,5338],{},"The remainder of this section contains technical terminology which will be\nunfamiliar to some readers.",[34,5340,5343],{"id":5341,"className":5342},"keywords",[14],[16,5344,5347],{"className":5345,"href":5346},[19],"#keywords","Keywords",[22,5349,5350,5351,290,5358,290,5365,403,5372,290,5379,290,5386,1617,5393,5400,5401,5410,5411,5420],{},"The only keywords in the language are ",[319,5352,5354],{"className":5353},[322],[16,5355,1226],{"href":2317,"rel":5356,"className":5357,"dataDisplayText":1226,"target":331,"title":1226},[327],[329],[319,5359,5361],{"className":5360},[322],[16,5362,1492],{"href":1489,"rel":5363,"className":5364,"dataDisplayText":1492,"target":331,"title":1492},[327],[329],[319,5366,5368],{"className":5367},[322],[16,5369,2342],{"href":1635,"rel":5370,"className":5371,"dataDisplayText":2342,"target":331,"title":2342},[327],[329],[319,5373,5375],{"className":5374},[322],[16,5376,2351],{"href":2348,"rel":5377,"className":5378,"dataDisplayText":2351,"target":331,"title":2351},[327],[329],[319,5380,5382],{"className":5381},[322],[16,5383,1789],{"href":3574,"rel":5384,"className":5385,"dataDisplayText":1789,"target":331,"title":1789},[327],[329],[319,5387,5389],{"className":5388},[322],[16,5390,3585],{"href":3582,"rel":5391,"className":5392,"dataDisplayText":3585,"target":331,"title":3585},[327],[329],[319,5394,5396],{"className":5395},[322],[16,5397,1869],{"href":3592,"rel":5398,"className":5399,"dataDisplayText":1869,"target":331,"title":1869},[327],[329],", plus ",[319,5402,5404],{"className":5403},[322],[16,5405,5409],{"href":5406,"rel":5407,"className":5408,"dataDisplayText":5409,"target":331,"title":5409},"/dictionary#extensions",[327],[329],"extensions"," and the\nexperimental ",[319,5412,5414],{"className":5413},[322],[16,5415,5419],{"href":5416,"rel":5417,"className":5418,"dataDisplayText":5419,"target":331,"title":5419},"/dictionary#includes",[327],[329],"__includes"," keyword. (Built-in primitive names may not be\nshadowed or redefined, so they are effectively a kind of keyword as well.)",[34,5422,5425],{"id":5423,"className":5424},"identifiers",[14],[16,5426,5429],{"className":5427,"href":5428},[19],"#identifiers","Identifiers",[22,5431,5432,5433,5440],{},"All primitives, global and agent variable names, and procedure names share a\nsingle global case-insensitive namespace; local names (",[319,5434,5436],{"className":5435},[322],[16,5437,2532],{"href":2529,"rel":5438,"className":5439,"dataDisplayText":2532,"target":331,"title":2532},[327],[329]," variables and the\nnames of procedure inputs) may not shadow global names or each other.\nIdentifiers may contain any Unicode letter or digit and the following ASCII\ncharacters:",[575,5442,5443],{},[319,5444,5445],{},[580,5446,5448],{"className":5447},[583,1029],".?=*!\u003C>:#+/%$_^'&-",[22,5450,5451],{},"Some primitive names begin with two underscores to indicate that they are\nexperimental and are especially likely to change or be removed in future NetLogo\nreleases.",[34,5453,5456],{"id":5454,"className":5455},"scope",[14],[16,5457,5460],{"className":5458,"href":5459},[19],"#scope","Scope",[22,5462,5463],{},"NetLogo is lexically scoped. Local variables (including inputs to procedures)\nare accessible within the block of commands in which they are declared, but not\naccessible by procedures called by those commands.",[34,5465,5468],{"id":5466,"className":5467},"comments",[14],[16,5469,5472],{"className":5470,"href":5471},[19],"#comments","Comments",[22,5474,5475],{},"The semicolon character introduces a comment, which lasts until the end of the\nline. There is no multi-line comment syntax.",[34,5477,5480],{"id":5478,"className":5479},"structure",[14],[16,5481,5484],{"className":5482,"href":5483},[19],"#structure","Structure",[22,5486,5487,5488,290,5495,403,5502,290,5509,290,5516,290,5524,5531,5532,5539],{},"A program consists of optional declarations (",[319,5489,5491],{"className":5490},[322],[16,5492,1226],{"href":2317,"rel":5493,"className":5494,"dataDisplayText":1226,"target":331,"title":1226},[327],[329],[319,5496,5498],{"className":5497},[322],[16,5499,1492],{"href":1489,"rel":5500,"className":5501,"dataDisplayText":1492,"target":331,"title":1492},[327],[329],[319,5503,5505],{"className":5504},[322],[16,5506,2342],{"href":1635,"rel":5507,"className":5508,"dataDisplayText":2342,"target":331,"title":2342},[327],[329],[319,5510,5512],{"className":5511},[322],[16,5513,2351],{"href":2348,"rel":5514,"className":5515,"dataDisplayText":2351,"target":331,"title":2351},[327],[329],[319,5517,5519],{"className":5518},[322],[16,5520,5523],{"href":1635,"rel":5521,"className":5522,"dataDisplayText":5523,"target":331,"title":5523},[327],[329],"\u003CBREED>-own",[319,5525,5527],{"className":5526},[322],[16,5528,5409],{"href":5406,"rel":5529,"className":5530,"dataDisplayText":5409,"target":331,"title":5409},[327],[329],")\nin any order, followed by zero or more procedure definitions. Multiple breeds\nmay be declared with separate ",[319,5533,5535],{"className":5534},[322],[16,5536,1492],{"href":1489,"rel":5537,"className":5538,"dataDisplayText":1492,"target":331,"title":1492},[327],[329]," declarations; the other declarations may\nappear once only.",[22,5541,5542,5543,550,5550,5557,5558,5565],{},"Every procedure definition begins with ",[319,5544,5546],{"className":5545},[322],[16,5547,1789],{"href":3574,"rel":5548,"className":5549,"dataDisplayText":1789,"target":331,"title":1789},[327],[329],[319,5551,5553],{"className":5552},[322],[16,5554,3585],{"href":3582,"rel":5555,"className":5556,"dataDisplayText":3585,"target":331,"title":3585},[327],[329],", the procedure\nname, and an optional bracketed list of input names. Every procedure definition\nends with ",[319,5559,5561],{"className":5560},[322],[16,5562,1869],{"href":3592,"rel":5563,"className":5564,"dataDisplayText":1869,"target":331,"title":1869},[327],[329],". In between are zero or more commands.",[34,5567,5570],{"id":5568,"className":5569},"commands-and-reporters",[14],[16,5571,5574],{"className":5572,"href":5573},[19],"#commands-and-reporters","Commands and reporters",[22,5576,5577,5578,5581,5582,5585],{},"Commands take zero or more inputs; the inputs are reporters, which may also take\nzero or more inputs. No punctuation separates or terminates commands; no\npunctuation separates inputs. Identifiers must be separated by whitespace or by\nparentheses or square brackets. (So for example, ",[319,5579,5580],{},"a+b"," is a single identifier,\nbut ",[319,5583,5584],{},"a(b[c]d)e"," contains five identifiers.)",[22,5587,5588],{},"All commands are prefix. All user-defined reporters are prefix. Most primitive\nreporters are prefix, but some (arithmetic operators, boolean operators, and\nsome agentset operators like with and in-points) are infix.",[22,5590,5591,5592,5608,5609,5617,5618,5636],{},"All commands and reporters, both primitive and user-defined, take a fixed number\nof inputs by default. (That’s why the language can be parsed though there is no\npunctuation to separate or terminate commands and/or inputs.) Some primitives\nare variadic, that is, may optionally take a different number of inputs than the\ndefault; parentheses are used to indicate this, e.g. ",[319,5593,5594,5595,594,5599,594,5602,594,5605,805],{},"(",[580,5596,5598],{"className":5597},[583,592],"list",[580,5600,729],{"className":5601},[583,689],[580,5603,4446],{"className":5604},[583,689],[580,5606,709],{"className":5607},[583,689]," (since the\n",[319,5610,5612],{"className":5611},[322],[16,5613,5598],{"href":5614,"rel":5615,"className":5616,"dataDisplayText":5598,"target":331,"title":5598},"/dictionary#list",[327],[329]," primitive only takes two inputs by default). Parentheses are also used\nto override the default operator precedence, e.g. ",[319,5619,5594,5620,594,5623,594,5626,790,5629,594,5633],{},[580,5621,729],{"className":5622},[583,689],[580,5624,2491],{"className":5625},[583,592],[580,5627,4446],{"className":5628},[583,689],[580,5630,5632],{"className":5631},[583,592],"*",[580,5634,709],{"className":5635},[583,689],", as in other\nprogramming languages.",[22,5638,5639],{},"Sometimes an input to a primitive is a command block (zero or more commands\ninside square brackets) or a reporter block (a single reporter expression inside\nsquare brackets). User-defined procedures may not take a command or reporter\nblock as input.",[22,5641,5642],{},"Operator precedences are as follows, high to low:",[44,5644,5645,5703,5709,5721,5726,5735,5741,5753,5759,5783],{},[47,5646,5647,290,5651,290,5660,290,5669,290,5677,403,5685,290,5694],{},[580,5648,5649],{},[580,5650,626],{},[319,5652,5654],{"className":5653},[322],[16,5655,5659],{"href":5656,"rel":5657,"className":5658,"dataDisplayText":5659,"target":331,"title":5659},"/dictionary#with-min",[327],[329],"with-min",[319,5661,5663],{"className":5662},[322],[16,5664,5668],{"href":5665,"rel":5666,"className":5667,"dataDisplayText":5668,"target":331,"title":5668},"/dictionary#with-max",[327],[329],"with-max",[319,5670,5672],{"className":5671},[322],[16,5673,724],{"href":5674,"rel":5675,"className":5676,"dataDisplayText":724,"target":331,"title":724},"/dictionary#at-points",[327],[329],[319,5678,5680],{"className":5679},[322],[16,5681,705],{"href":5682,"rel":5683,"className":5684,"dataDisplayText":705,"target":331,"title":705},"/dictionary#in-radius",[327],[329],[319,5686,5688],{"className":5687},[322],[16,5689,5693],{"href":5690,"rel":5691,"className":5692,"dataDisplayText":5693,"target":331,"title":5693},"/dictionary#in-cone",[327],[329],"in-cone",[319,5695,5697],{"className":5696},[322],[16,5698,5702],{"href":5699,"rel":5700,"className":5701,"dataDisplayText":5702,"target":331,"title":5702},"/dictionary#who-are-not",[327],[329],"who-are-not",[47,5704,5705],{},[580,5706,5707],{},[580,5708,855],{},[47,5710,5711,5712],{},"All other primitives and user-defined procedures, including ",[319,5713,5715],{"className":5714},[322],[16,5716,5720],{"href":5717,"rel":5718,"className":5719,"dataDisplayText":5720,"target":331,"title":5720},"/dictionary#not",[327],[329],"not",[47,5722,5723],{},[319,5724,5725],{},"^",[47,5727,5728,290,5730,290,5732],{},[319,5729,5632],{},[319,5731,3956],{},[319,5733,5734],{},"mod",[47,5736,5737,290,5739],{},[319,5738,2491],{},[319,5740,4071],{},[47,5742,5743,290,5746,290,5748,290,5751],{},[319,5744,5745],{},"\u003C",[319,5747,685],{},[319,5749,5750],{},"\u003C=",[319,5752,4051],{},[47,5754,5755,290,5757],{},[319,5756,635],{},[319,5758,1174],{},[47,5760,5761,290,5765,290,5774],{},[580,5762,5763],{},[580,5764,794],{},[319,5766,5768],{"className":5767},[322],[16,5769,5773],{"href":5770,"rel":5771,"className":5772,"dataDisplayText":5773,"target":331,"title":5773},"/dictionary#or",[327],[329],"or",[319,5775,5777],{"className":5776},[322],[16,5778,5782],{"href":5779,"rel":5780,"className":5781,"dataDisplayText":5782,"target":331,"title":5782},"/dictionary#xor",[327],[329],"xor",[47,5784,5785],{},[580,5786,5787],{},[580,5788,5789],{},"ifelse-value",[22,5791,5792,5793,5812,5813,5830,5831,5842,5843,5845,5846,5848,5849,5851,5852,290,5869,5880,5881,5883],{},"When an expression contains multiple operators with the same precedence, they\nare read in code order left-to-right. Example: ",[319,5794,5795,594,5799,594,5802,594,5806,594,5809],{},[580,5796,5798],{"className":5797},[583,639],"true",[580,5800,5773],{"className":5801},[583,592],[580,5803,5805],{"className":5804},[583,639],"false",[580,5807,794],{"className":5808},[583,592],[580,5810,5805],{"className":5811},[583,639]," is read\nas ",[319,5814,5594,5815,594,5818,594,5821,790,5824,594,5827],{},[580,5816,5798],{"className":5817},[583,639],[580,5819,5773],{"className":5820},[583,592],[580,5822,5805],{"className":5823},[583,639],[580,5825,794],{"className":5826},[583,592],[580,5828,5805],{"className":5829},[583,639]," and so results in ",[319,5832,5594,5833,790,5836,594,5839],{},[580,5834,5798],{"className":5835},[583,639],[580,5837,794],{"className":5838},[583,592],[580,5840,5805],{"className":5841},[583,639],", which is\n",[319,5844,5805],{},". This is different than many other programming languages where ",[319,5847,5773],{}," has\na lower precedence than ",[319,5850,794],{},", so the above statement would be read as\n",[319,5853,5854,594,5857,795,5860,594,5863,594,5866,805],{},[580,5855,5798],{"className":5856},[583,639],[580,5858,5773],{"className":5859},[583,592],[580,5861,5805],{"className":5862},[583,639],[580,5864,794],{"className":5865},[583,592],[580,5867,5805],{"className":5868},[583,639],[319,5870,5871,594,5874,795,5877,805],{},[580,5872,5798],{"className":5873},[583,639],[580,5875,5773],{"className":5876},[583,592],[580,5878,5805],{"className":5879},[583,639],", so ",[319,5882,5798],{},". You can surround\nexpressions in parentheses to ensure you get your desired order of operations.",[34,5885,5888],{"id":5886,"className":5887},"compared-to-other-logos",[14],[16,5889,5892],{"className":5890,"href":5891},[19],"#compared-to-other-logos","Compared to other Logos",[22,5894,5895],{},"There is no agreed-upon standard definition of Logo; it is a loose family of\nlanguages. We believe that NetLogo has enough in common with other Logos to earn\nthe Logo name. Still, NetLogo differs in some respects from most other Logos.\nThe most important differences are as follows.",[5897,5898,5901],"h5",{"id":5899,"className":5900},"surface-differences",[14],[16,5902,5905],{"className":5903,"href":5904},[19],"#surface-differences","Surface differences",[44,5907,5908,5962,5980,5983,6011,6026],{},[47,5909,5910,5911,290,5913,5915,5916,5932,5933,5947,5948,301],{},"The precedence of mathematical operators is different. Infix math operators\n(like ",[319,5912,2491],{},[319,5914,5632],{},", etc.) have lower precedence than reporters with names. For\nexample, in many Logos, if you write ",[319,5917,5918,594,5922,594,5926,594,5929],{},[580,5919,5921],{"className":5920},[583,592],"sin",[580,5923,5925],{"className":5924},[583,1029],"x",[580,5927,2491],{"className":5928},[583,592],[580,5930,729],{"className":5931},[583,689],", it will be interpreted as\n",[319,5934,5935,795,5938,594,5941,594,5944,805],{},[580,5936,5921],{"className":5937},[583,592],[580,5939,5925],{"className":5940},[583,1029],[580,5942,2491],{"className":5943},[583,592],[580,5945,729],{"className":5946},[583,689],". NetLogo, on the other hand, interprets it the way most other\nprogramming languages would, and the way the same expression would be\ninterpreted in standard mathematical notation, namely as ",[319,5949,5594,5950,594,5953,790,5956,594,5959],{},[580,5951,5921],{"className":5952},[583,592],[580,5954,5925],{"className":5955},[583,1029],[580,5957,2491],{"className":5958},[583,592],[580,5960,729],{"className":5961},[583,689],[47,5963,1411,5964,418,5972,5979],{},[319,5965,5967],{"className":5966},[322],[16,5968,794],{"href":5969,"rel":5970,"className":5971,"dataDisplayText":794,"target":331,"title":794},"/dictionary#and",[327],[329],[319,5973,5975],{"className":5974},[322],[16,5976,5773],{"href":5770,"rel":5977,"className":5978,"dataDisplayText":5773,"target":331,"title":5773},[327],[329]," reporters are special forms, not ordinary functions,\nand they “short circuit”, that is, they only evaluate their second input if\nnecessary.",[47,5981,5982],{},"Procedures can only be defined in the Code tab, not interactively in the\nCommand Center.",[47,5984,5985,5986,4006,5993,6000,6001,1735,6008,301],{},"Reporter procedures, that is, procedures that “report” (return) a value, must\nbe defined with ",[319,5987,5989],{"className":5988},[322],[16,5990,3585],{"href":3582,"rel":5991,"className":5992,"dataDisplayText":3585,"target":331,"title":3585},[327],[329],[319,5994,5996],{"className":5995},[322],[16,5997,1789],{"href":3574,"rel":5998,"className":5999,"dataDisplayText":1789,"target":331,"title":1789},[327],[329],". The command to report a value\nfrom a reporter procedure is ",[319,6002,6004],{"className":6003},[322],[16,6005,4023],{"href":4020,"rel":6006,"className":6007,"dataDisplayText":4023,"target":331,"title":4023},[327],[329],[319,6009,6010],{},"output",[47,6012,6013,6014,301],{},"When defining a procedure, the inputs to the procedure must be enclosed in\nsquare brackets, e.g. ",[319,6015,6016,594,6019,627,6023,641],{},[580,6017,1789],{"className":6018},[583,1225],[580,6020,6022],{"className":6021},[583,1029],"square",[580,6024,5925],{"className":6025},[583,1029],[47,6027,6028,6029,6032,6033,550,6036,6039,6040,6043,6044,6051],{},"Variable names are always used without any punctuation: always ",[319,6030,6031],{},"foo",", never\n",[319,6034,6035],{},":foo",[319,6037,6038],{},"\"foo",". (To make this work, instead of a ",[319,6041,6042],{},"make"," command taking a\nquoted argument we supply a ",[319,6045,6047],{"className":6046},[322],[16,6048,1265],{"href":2402,"rel":6049,"className":6050,"dataDisplayText":1265,"target":331,"title":1265},[327],[329]," special form which does not evaluate its\nfirst input.) As a result, procedures and variables occupy a single shared\nnamespace.",[22,6053,6054],{},"The last three differences are illustrated in the following procedure\ndefinitions:",[29,6056,6059],{"className":6057},[6058],"table-container",[6060,6061,6062,6063],"table",{},"\n  ",[6064,6065,6066,6077],"tbody",{},[6067,6068,6069,6070,6074],"tr",{},"\n    ",[6071,6072,6073],"th",{},"most Logos\n    ",[6071,6075,6076],{},"NetLogo\n  ",[6067,6078,6069,6079,6085],{},[6080,6081,6082,6069],"td",{},[575,6083,6084],{},"to square :x\noutput :x * :x\nend",[6080,6086,6087],{},[575,6088,6089],{},"to-report square [x]\nreport x * x\nend",[5897,6091,6094],{"id":6092,"className":6093},"deeper-differences",[14],[16,6095,6098],{"className":6096,"href":6097},[19],"#deeper-differences","Deeper differences",[44,6100,6101,6104,6144,6156,6185],{},[47,6102,6103],{},"NetLogo’s local variables and inputs to procedures are lexically scoped, not\ndynamically scoped.",[47,6105,6106,6107,6121,6122,6128,6129,6143],{},"NetLogo has no “word” data type (what Lisp calls “symbols”). Eventually, we\nmay add one, but since it is seldom requested, it may be that the need doesn’t\narise much in agent-based modeling. We do have strings. In most situations\nwhere traditional Logo would use words, we simply use strings instead. For\nexample in Logo you could write ",[319,6108,846,6109,594,6113,594,6117,641],{},[580,6110,6112],{"className":6111},[583,1029],"see",[580,6114,6116],{"className":6115},[583,1029],"spot",[580,6118,6120],{"className":6119},[583,972],"run"," (a list of words), but in\nNetLogo you must write ",[319,6123,6124],{},[580,6125,6127],{"className":6126},[583,3102],"\"see spot run\""," (a string) or ",[319,6130,846,6131,594,6135,594,6139,641],{},[580,6132,6134],{"className":6133},[583,3102],"\"see\"",[580,6136,6138],{"className":6137},[583,3102],"\"spot\"",[580,6140,6142],{"className":6141},[583,3102],"\"run\"","\n(a list of strings) instead.",[47,6145,6146,6147,6155],{},"NetLogo’s ",[319,6148,6150],{"className":6149},[322],[16,6151,6120],{"href":6152,"rel":6153,"className":6154,"dataDisplayText":6120,"target":331,"title":6120},"/dictionary#run",[327],[329]," command works on anonymous procedures and strings, not lists\n(since we have no “word” data type), and does not permit the definition or\nredefinition of procedures.",[47,6157,6158,6159,418,6167,6175,6176,290,6179,1617,6181,6184],{},"Control structures such as ",[319,6160,6162],{"className":6161},[322],[16,6163,1659],{"href":6164,"rel":6165,"className":6166,"dataDisplayText":1659,"target":331,"title":1659},"/dictionary#if",[327],[329],[319,6168,6170],{"className":6169},[322],[16,6171,5163],{"href":6172,"rel":6173,"className":6174,"dataDisplayText":5163,"target":331,"title":5163},"/dictionary#while",[327],[329]," are special forms, not\nordinary functions. You can’t define your own special forms, so you can’t\ndefine your own control structures. (You can do something similar using\nanonymous procedures, but you must use the ",[319,6177,6178],{},"->",[319,6180,6120],{},[319,6182,6183],{},"runresult","\nprimitives for that, you cannot make them implicit.)",[47,6186,6187],{},"Anonymous procedures (aka function values or lambda) are true lexically-scoped\nclosures. This feature is available in NetLogo and in modern Lisps, but not in\nstandard Logo.",[22,6189,6190],{},"Of course, the NetLogo language also contains other features not found in most\nLogos, most importantly agents and agentsets.",[270,6192,6195],{"id":6193,"className":6194},"multiple-source-files",[14],[16,6196,146],{"className":6197,"href":145},[19],[22,6199,1411,6200,6207],{},[319,6201,6203],{"className":6202},[322],[16,6204,5419],{"href":5416,"rel":6205,"className":6206,"dataDisplayText":5419,"target":331,"title":5419},[327],[329]," keyword allows you to use multiple source files in a single\nNetLogo model.",[22,6209,6210],{},"The keyword begins with two underscores to indicate that the feature is\nexperimental and may change in future NetLogo releases.",[22,6212,6213,6214,6222],{},"When you open a model that uses the ",[319,6215,6217],{"className":6216},[322],[16,6218,5419],{"href":6219,"rel":6220,"className":6221,"dataDisplayText":5419,"target":331,"title":5419},"/dictionary#__includes",[327],[329]," keyword, or if you add it to\nthe top of a model and hit the Check button, the includes menu will appear in\nthe toolbar. From the includes menu you can select from the files included in\nthis model.",[22,6224,6225,6226,6230],{},"When you open included files they appear in additional tabs. See the\n",[16,6227,6229],{"href":6228},"/codetab#included-files-menu","Interface Guide"," for more details.",[22,6232,6233,6234,6237,6238,290,6245,290,6252,290,6259,403,6266,6274,6275,6278,6279,6281,6282,6284,6285,6287],{},"You can have anything in external source files (",[319,6235,6236],{},".nls",") that you would normally\nput in the Code tab: ",[319,6239,6241],{"className":6240},[322],[16,6242,1226],{"href":2317,"rel":6243,"className":6244,"dataDisplayText":1226,"target":331,"title":1226},[327],[329],[319,6246,6248],{"className":6247},[322],[16,6249,1492],{"href":1489,"rel":6250,"className":6251,"dataDisplayText":1492,"target":331,"title":1492},[327],[329],[319,6253,6255],{"className":6254},[322],[16,6256,2342],{"href":1635,"rel":6257,"className":6258,"dataDisplayText":2342,"target":331,"title":2342},[327],[329],[319,6260,6262],{"className":6261},[322],[16,6263,2351],{"href":2348,"rel":6264,"className":6265,"dataDisplayText":2351,"target":331,"title":2351},[327],[329],[319,6267,6269],{"className":6268},[322],[16,6270,6273],{"href":1635,"rel":6271,"className":6272,"dataDisplayText":6273,"target":331,"title":6273},[327],[329],"breeds-own",", procedure definitions, etc. Note though that these\ndeclarations all share the same namespace. That is, if you declare a global\n",[319,6276,6277],{},"my-global"," in the Code tab you cannot declare a global (or anything else) with\nthe name ",[319,6280,6277],{}," in any file that is included in the model. ",[319,6283,6277],{}," will\nbe accessible from all the included files. The same would be true if ",[319,6286,6277],{},"\nwere declared in one of the included files.",[270,6289,6292],{"id":6290,"className":6291},"buttons",[14],[16,6293,152],{"className":6294,"href":151},[19],[22,6296,6297],{},"Buttons in the interface tab provide an easy way to control the model. Typically\na model will have at least a “setup” button, to set up the initial state of the\nworld, and a “go” button to make the model run continuously. Some models will\nhave additional buttons that perform other actions.",[22,6299,6300],{},"A button contains some NetLogo code. That code is run when you press the button.",[22,6302,6303],{},"A button may be either a “once button”, or a “forever button”. You can control\nthis by editing the button and checking or unchecking the “Forever” checkbox.\nOnce buttons run their code once, then stop and pop back up. Forever buttons\nkeep running their code over and over again.",[22,6305,6306],{},"A forever button stops if the user presses the button again to stop it. The\nbutton waits until the current iteration has finished, then pops up.",[22,6308,6309],{},"A forever button can also be stopped from code. If the forever button directly\ncalls a procedure, then when that procedure stops, the button stops. (In a\nturtle or patch forever button, the button won’t stop until every turtle or\npatch stops — a single turtle or patch doesn’t have the power to stop the whole\nbutton.)",[22,6311,6312],{},"Normally, a button is labeled with the code that it runs. For example, a button\nthat says “go” on it usually contains the code “go”, which means “run the go\nprocedure”. (Procedures are defined in the Code tab; see below.) But you can\nalso edit a button and enter a “display name” for the button, which is a text\nthat appears on the button instead of the code. You might use this feature if\nyou think the actual code would be confusing to your users.",[22,6314,6315,6316,6323],{},"When you put code in a button, you must also specify which agents you want to\nrun that code. You can choose to have the observer run the code, or all turtles,\nor all patches, or all links. (If you want the code to be run by only some\nturtles or some patches, you could make an observer button, and then have the\nobserver use the ",[319,6317,6319],{"className":6318},[322],[16,6320,536],{"href":533,"rel":6321,"className":6322,"dataDisplayText":536,"target":331,"title":536},[327],[329]," command to ask only some of the turtles or patches to\ndo something.)",[22,6325,6326],{},"When you edit a button, you have the option to assign an “action key”. This\nmakes that key on the keyboard behave just like a button press. If the button is\na forever button, it will stay down until the key is pressed again (or the\nbutton is clicked). Action keys are particularly useful for games or any model\nwhere rapid triggering of buttons is needed.",[22,6328,6329],{},[281,6330,6331],{},"Buttons take turns",[22,6333,6334],{},"More than one button can be pressed at a time. If this happens, the buttons\n“take turns”, which means that only one button runs at a time. Each button runs\nits code all the way through once while the other buttons wait, then the next\nbutton gets its turn.",[22,6336,6337],{},"In the following examples, “setup” is a once button and “go” is a forever\nbutton.",[22,6339,6340],{},"Example #1: The user presses “setup”, then presses “go” immediately, before the\n“setup” has popped back up. Result: “setup” finishes before “go” starts.",[22,6342,6343],{},"Example #2: While the “go” button is down, the user presses “setup”. Result: the\n“go” button finishes its current iteration. Then the “setup” button runs. Then\n“go” starts running again.",[22,6345,6346],{},"Example #3: The user has two forever buttons down at the same time. Result:\nfirst one button runs its code all the way through, then the other runs its code\nall the way through, and so on, alternating.",[22,6348,6349],{},"Note that if one button gets stuck in an infinite loop, then no other buttons\nwill run.",[22,6351,6352],{},[281,6353,6354],{},"Turtle, patch, and link forever buttons",[22,6356,6357,6358,290,6366,550,6374,6382,6383,6390],{},"There is a subtle difference between putting commands in a turtle, patch or link\nforever button, and putting the same commands in an observer button that does\n",[319,6359,6360,594,6363],{},[580,6361,536],{"className":6362},[583,972],[580,6364,289],{"className":6365},[583,592],[319,6367,6368,594,6371],{},[580,6369,536],{"className":6370},[583,972],[580,6372,293],{"className":6373},[583,592],[319,6375,6376,594,6379],{},[580,6377,536],{"className":6378},[583,972],[580,6380,296],{"className":6381},[583,592],". An “ask” doesn’t complete until all\nof the agents have finished running all of the commands in the “ask”. So the\nagents, as they all run the commands concurrently, can be out of sync with each\nother, but they all sync up again at the end of the ask. The same isn’t true of\nturtle, patch and link forever buttons. Since ",[319,6384,6386],{"className":6385},[322],[16,6387,536],{"href":533,"rel":6388,"className":6389,"dataDisplayText":536,"target":331,"title":536},[327],[329]," was not used, each turtle\nor patch runs the given code over and over again, so they can become (and\nremain) out of sync with each other.",[22,6392,6393],{},"At present, this capability is very rarely used in the models in our Models\nLibrary. A model that does use the capability is the Termites model, in the\nBiology section of Sample Models. The “go” button is a turtle forever button, so\neach termite proceeds independently of every other termite, and the observer is\nnot involved at all. This means that if, for example, you wanted to add ticks\nand/or a plot to the model, you would need to add a second forever button (an\nobserver forever button), and run both forever buttons at the same time. Note\nalso that a model like this cannot be used with BehaviorSpace.",[1449,6395,6396],{},[22,6397,6398,6400],{},[281,6399,1455],{}," State Machine Example shows how Termites can be recoded in a\ntick-based way, without using a turtle forever button.",[22,6402,6403],{},"At present, NetLogo has no way for one forever button to start another. Buttons\nare only started when you press them.",[270,6405,6408],{"id":6406,"className":6407},"anonymous-procedures",[14],[16,6409,158],{"className":6410,"href":157},[19],[22,6412,6413],{},"Anonymous procedures let you store code to be run later. Just like regular\nNetLogo procedures, an anonymous procedures can be either a command (anonymous\ncommand) or a reporter (anonymous reporter).",[22,6415,6416],{},"Anonymous procedures are values, which means they may be passed as input,\nreported as a result, or stored in a variable.",[22,6418,6419],{},"An anonymous procedure might be run once, multiple times, or not at all.",[22,6421,6422],{},"In other programming languages anonymous procedures are known as first-class\nfunctions, closures, or lambda.",[34,6424,6427],{"id":6425,"className":6426},"anonymous-procedure-primitives",[14],[16,6428,6431],{"className":6429,"href":6430},[19],"#anonymous-procedure-primitives","Anonymous procedure primitives",[22,6433,6434,6435,290,6437,6440,6441,301],{},"Primitives specific to anonymous procedures are ",[319,6436,6178],{},[319,6438,6439],{},"is-anonymous-command?",",\nand ",[319,6442,6443],{},"is-anonymous-reporter?",[22,6445,1411,6446,6448,6449,6461,6462,6464,6465,6476,6477,6479],{},[319,6447,6178],{}," creates an anonymous procedure. The anonymous procedure it reports\nmight be a command or a reporter, depending on what kind of block you pass it.\nFor example ",[319,6450,6451,6452,594,6455,594,6458,986],{},"[ ",[580,6453,6178],{"className":6454},[583,592],[580,6456,2997],{"className":6457},[583,972],[580,6459,729],{"className":6460},[583,689]," reports an anonymous command, because ",[319,6463,2997],{}," is a\ncommand, while ",[319,6466,6451,6467,594,6470,594,6473,986],{},[580,6468,6178],{"className":6469},[583,592],[580,6471,925],{"className":6472},[583,592],[580,6474,289],{"className":6475},[583,592]," reports an anonymous reporter, because\n",[319,6478,925],{}," is a reporter.",[22,6481,6482,6483,290,6486,403,6489,290,6492,290,6495,290,6498,6501,6502,6504,6505,6517,6518,6539,6540,301],{},"These primitives require anonymous procedures as input: ",[319,6484,6485],{},"foreach",[319,6487,6488],{},"map",[319,6490,6491],{},"reduce",[319,6493,6494],{},"filter",[319,6496,6497],{},"n-values",[319,6499,6500],{},"sort-by",". When calling these primitives, using\nan ",[319,6503,6178],{}," is optional if your anonymous procedure contains a single primitive\nwhich has requires no more inputs than are are provided by the primitive. For\nexample one may write simply ",[319,6506,6507,594,6510,594,6514],{},[580,6508,6485],{"className":6509},[583,972],[580,6511,6513],{"className":6512},[583,1029],"mylist",[580,6515,1280],{"className":6516},[583,972]," instead of\n",[319,6519,6520,594,6523,6526,6527,851,6530,594,6533,594,6536,986],{},[580,6521,6485],{"className":6522},[583,972],[580,6524,6513],{"className":6525},[583,1029]," [ [",[580,6528,5925],{"className":6529},[583,1029],[580,6531,6178],{"className":6532},[583,592],[580,6534,1280],{"className":6535},[583,972],[580,6537,5925],{"className":6538},[583,1029],", though the latter is also accepted.\nDepending on the anonymous procedure, various parts of the anonymous procedure\nsyntax can be omitted. For a summary of optional syntax, see\n",[16,6541,6543],{"href":6542},"#what-is-optional","the table below",[22,6545,1411,6546,6548],{},[319,6547,6120],{}," command accepts anonymous commands as well as strings.",[22,6550,1411,6551,6553],{},[319,6552,6183],{}," reporter accepts anonymous reporters as well as strings.",[22,6555,6556,418,6558,6560,6561,6573,6574,6590],{},[319,6557,6120],{},[319,6559,6183],{}," allow passing inputs to an anonymous procedure. As with\nall primitives accepting varying number of inputs, the whole call must be\nsurrounded with parentheses, so for example ",[319,6562,5594,6563,594,6566,594,6570,805],{},[580,6564,6120],{"className":6565},[583,972],[580,6567,6569],{"className":6568},[583,1029],"my-anonymous-command",[580,6571,1256],{"className":6572},[583,689]," or\n",[319,6575,5594,6576,594,6579,594,6583,594,6587,805],{},[580,6577,6183],{"className":6578},[583,592],[580,6580,6582],{"className":6581},[583,1029],"my-anonymous-reporter",[580,6584,6586],{"className":6585},[583,3102],"\"foo\"",[580,6588,4446],{"className":6589},[583,689],". When not passing input, no\nparentheses are required.",[34,6592,6595],{"id":6593,"className":6594},"anonymous-procedure-inputs",[14],[16,6596,6599],{"className":6597,"href":6598},[19],"#anonymous-procedure-inputs","Anonymous procedure inputs",[22,6601,6602,6603,290,6625,418,6627,6629],{},"An anonymous procedure may take zero or more inputs. The inputs are referenced\nthe variables declared before the arrow. For instance, in the anonymous reporter\n",[319,6604,6605,6606,594,6609,851,6613,594,6616,594,6619,594,6622,986],{},"[ [",[580,6607,16],{"className":6608},[583,1029],[580,6610,6612],{"className":6611},[583,1029],"b",[580,6614,6178],{"className":6615},[583,592],[580,6617,16],{"className":6618},[583,1029],[580,6620,2491],{"className":6621},[583,592],[580,6623,6612],{"className":6624},[583,1029],[319,6626,16],{},[319,6628,6612],{}," are inputs.",[34,6631,6634],{"id":6632,"className":6633},"anonymous-procedures-and-strings",[14],[16,6635,6638],{"className":6636,"href":6637},[19],"#anonymous-procedures-and-strings","Anonymous procedures and strings",[22,6640,6641,6642,550,6644,6646],{},"Creating and running anonymous procedures is fast. To use ",[319,6643,6120],{},[319,6645,6183],{},"\non a new string for the first time is about 100x slower than running an\nanonymous procedure. Modelers should normally use anonymous procedures instead\nof running strings, except when running strings entered by the user.",[34,6648,6651],{"id":6649,"className":6650},"concise-syntax",[14],[16,6652,6655],{"className":6653,"href":6654},[19],"#concise-syntax","Concise syntax",[22,6657,6658,6659,290,6661,290,6663,290,6665,290,6667,1617,6669,6671],{},"Simple uses of ",[319,6660,6485],{},[319,6662,6488],{},[319,6664,6491],{},[319,6666,6494],{},[319,6668,6497],{},[319,6670,6500],{},"\ncan be written with an especially concise syntax. You can write:",[575,6673,6674],{},[319,6675,6676,594,6679,627,6683,594,6686,594,6689,594,6692,641,6696,6698,6702,6704,594,6707,627,6710,594,6713,594,6716,594,6719,641,6723,6725,6729,6731,594,6734,627,6738,594,6741,594,6745,641,6748,6750,6754,6756,627,6759,594,6762,594,6765,594,6768,851,6771,6774,6776],{},[580,6677,6488],{"className":6678},[583,592],[580,6680,6682],{"className":6681},[583,592],"abs",[580,6684,729],{"className":6685},[583,689],[580,6687,4479],{"className":6688},[583,689],[580,6690,709],{"className":6691},[583,689],[580,6693,6695],{"className":6694},[583,689],"-4",[587,6697],{},[580,6699,6701],{"className":6700},[583,584],";; => [1 2 3 4]",[587,6703],{},[580,6705,6491],{"className":6706},[583,592],[580,6708,2491],{"className":6709},[583,592],[580,6711,729],{"className":6712},[583,689],[580,6714,4446],{"className":6715},[583,689],[580,6717,709],{"className":6718},[583,689],[580,6720,6722],{"className":6721},[583,689],"4",[587,6724],{},[580,6726,6728],{"className":6727},[583,584],";; => 10",[587,6730],{},[580,6732,6494],{"className":6733},[583,592],[580,6735,6737],{"className":6736},[583,592],"is-number?",[580,6739,729],{"className":6740},[583,689],[580,6742,6744],{"className":6743},[583,3102],"\"x\"",[580,6746,709],{"className":6747},[583,689],[587,6749],{},[580,6751,6753],{"className":6752},[583,584],";; => [1 3]",[587,6755],{},[580,6757,6485],{"className":6758},[583,972],[580,6760,729],{"className":6761},[583,689],[580,6763,4446],{"className":6764},[583,689],[580,6766,709],{"className":6767},[583,689],[580,6769,6722],{"className":6770},[583,689],[580,6772,1280],{"className":6773},[583,972],[587,6775],{},[580,6777,6779],{"className":6778},[583,584],";; prints 1 through 4",[22,6781,6782],{},"In older NetLogo versions (4 and earlier), these had to be written:",[575,6784,6785],{},[319,6786,6787,627,6790,594,6793,733,6797,594,6800,594,6803,594,6806,641,6809,6811,6814,6816,627,6819,594,6823,594,6826,733,6830,594,6833,594,6836,594,6839,641,6842,6844,6847,6849,627,6852,594,6855,733,6858,594,6861,594,6864,641,6867,6869,6872,6874,627,6877,594,6880,594,6883,594,6886,1031,6889,594,6892,986,6895,6897],{},[580,6788,6488],{"className":6789},[583,592],[580,6791,6682],{"className":6792},[583,592],[580,6794,6796],{"className":6795},[583,1029],"?",[580,6798,729],{"className":6799},[583,689],[580,6801,4479],{"className":6802},[583,689],[580,6804,709],{"className":6805},[583,689],[580,6807,6695],{"className":6808},[583,689],[587,6810],{},[580,6812,6701],{"className":6813},[583,584],[587,6815],{},[580,6817,6491],{"className":6818},[583,592],[580,6820,6822],{"className":6821},[583,1029],"?1",[580,6824,2491],{"className":6825},[583,592],[580,6827,6829],{"className":6828},[583,1029],"?2",[580,6831,729],{"className":6832},[583,689],[580,6834,4446],{"className":6835},[583,689],[580,6837,709],{"className":6838},[583,689],[580,6840,6722],{"className":6841},[583,689],[587,6843],{},[580,6845,6728],{"className":6846},[583,584],[587,6848],{},[580,6850,6494],{"className":6851},[583,592],[580,6853,6737],{"className":6854},[583,592],[580,6856,6796],{"className":6857},[583,1029],[580,6859,729],{"className":6860},[583,689],[580,6862,6744],{"className":6863},[583,3102],[580,6865,709],{"className":6866},[583,689],[587,6868],{},[580,6870,6753],{"className":6871},[583,584],[587,6873],{},[580,6875,6485],{"className":6876},[583,972],[580,6878,729],{"className":6879},[583,689],[580,6881,4446],{"className":6882},[583,689],[580,6884,709],{"className":6885},[583,689],[580,6887,6722],{"className":6888},[583,689],[580,6890,1280],{"className":6891},[583,972],[580,6893,6796],{"className":6894},[583,1029],[587,6896],{},[580,6898,6779],{"className":6899},[583,584],[34,6901,6904],{"id":6902,"className":6903},"anonymous-procedures-as-closures",[14],[16,6905,6908],{"className":6906,"href":6907},[19],"#anonymous-procedures-as-closures","Anonymous procedures as closures",[22,6910,6911],{},"Anonymous procedures are “closures”; that means they capture or “close over” the\nbindings (not just the current values) of local variables and procedure inputs.\nThey do not capture agent variables and do not capture the identity (or even the\nagent type) of the current agent.",[34,6913,6916],{"id":6914,"className":6915},"nonlocal-exits",[14],[16,6917,6920],{"className":6918,"href":6919},[19],"#nonlocal-exits","Nonlocal exits",[22,6922,1411,6923,418,6926,6928],{},[319,6924,6925],{},"stop",[319,6927,4023],{}," commands exit from the dynamically enclosing procedure,\nnot the enclosing anonymous procedure. (This is backward-compatible with older\nNetLogo versions.)",[34,6930,6933],{"id":6931,"className":6932},"anonymous-procedures-and-extensions",[14],[16,6934,6937],{"className":6935,"href":6936},[19],"#anonymous-procedures-and-extensions","Anonymous procedures and extensions",[22,6939,6940],{},"The extensions API supports writing primitives that accept anonymous procedures\nas input. Write us for sample code.",[34,6942,6945],{"id":6943,"className":6944},"limitations",[14],[16,6946,6949],{"className":6947,"href":6948},[19],"#limitations","Limitations",[22,6951,6952],{},"We hope to address at least some of the following limitations in future NetLogo\nversions:",[44,6954,6955,6961,6964,6976,7088],{},[47,6956,6957,6960],{},[319,6958,6959],{},"import-world"," does not support anonymous procedures.",[47,6962,6963],{},"Anonymous procedures can’t be variadic (accept a varying number of inputs).",[47,6965,6966,6967,6969,6970,6972,6973,6975],{},"Anonymous reporters can’t contain commands, only a single reporter expression.\nSo for example you must use ",[319,6968,5789],{}," not ",[319,6971,1659],{},", and you don’t use\n",[319,6974,4023],{}," at all. If your code is too complex to be written as one reporter,\nyou’ll need to move the code to a separate reporter procedure, and then call\nthat procedure from your anonymous reporter, passing it any needed inputs.",[47,6977,6978,6979,418,6981,6983,6984,418,6986,6988,6989,7017,7018,418,7033,7048,7049,7063,7064,301],{},"Anonymous procedures are not interchangeable with command blocks and reporter\nblocks. Only the primitives listed above accept anonymous procedures as input.\nControl primitives such as ",[319,6980,4044],{},[319,6982,5163],{}," and agent primitives such as\n",[319,6985,855],{},[319,6987,626],{}," don’t accept anonymous procedures. So for example if I have an\nanonymous reporter ",[319,6990,6991,594,6994,979,6998,594,7001,594,7004,594,7007,594,7010,594,7014,986],{},[580,6992,2532],{"className":6993},[583,972],[580,6995,6997],{"className":6996},[583,1029],"r",[580,6999,6178],{"className":7000},[583,592],[580,7002,1659],{"className":7003},[583,972],[580,7005,1834],{"className":7006},[583,592],[580,7008,4446],{"className":7009},[583,689],[580,7011,7013],{"className":7012},[583,1029],"==",[580,7015,690],{"className":7016},[583,689]," and two anonymous commands\n",[319,7019,7020,594,7023,979,7027,594,7030,986],{},[580,7021,2532],{"className":7022},[583,972],[580,7024,7026],{"className":7025},[583,1029],"c1",[580,7028,6178],{"className":7029},[583,592],[580,7031,3712],{"className":7032},[583,972],[319,7034,7035,594,7038,979,7042,594,7045,986],{},[580,7036,2532],{"className":7037},[583,972],[580,7039,7041],{"className":7040},[583,1029],"c2",[580,7043,6178],{"className":7044},[583,592],[580,7046,6925],{"className":7047},[583,972],", I can’t write ",[319,7050,7051,594,7054,594,7057,594,7060],{},[580,7052,4044],{"className":7053},[583,972],[580,7055,6997],{"className":7056},[583,1029],[580,7058,7026],{"className":7059},[583,1029],[580,7061,7041],{"className":7062},[583,1029],",\nI must write ",[319,7065,7066,594,7069,594,7072,979,7075,594,7078,7081,7082,594,7085,986],{},[580,7067,4044],{"className":7068},[583,972],[580,7070,6183],{"className":7071},[583,592],[580,7073,6997],{"className":7074},[583,1029],[580,7076,6120],{"className":7077},[583,972],[580,7079,7026],{"className":7080},[583,1029]," ] [ ",[580,7083,6120],{"className":7084},[583,972],[580,7086,7041],{"className":7087},[583,1029],[47,7089,7090,7091,7093,7094,7096,7097,6969,7108,301],{},"The concise syntax where ",[319,7092,6178],{}," may be omitted is only available to primitives\nand extension primitives, not ordinary procedures. So for example if I have a\nprocedure ",[319,7095,22],{}," that accepts an anonymous procedure as input, it must be called\nas e.g. ",[319,7098,7099,979,7102,594,7105,3706],{},[580,7100,22],{"className":7101},[583,1029],[580,7103,6178],{"className":7104},[583,592],[580,7106,1673],{"className":7107},[583,1029],[319,7109,7110,979,7113,986],{},[580,7111,22],{"className":7112},[583,1029],[580,7114,1673],{"className":7115},[583,1029],[34,7117,7120],{"id":7118,"className":7119},"what-is-optional",[14],[16,7121,7123],{"className":7122,"href":6542},[19],"What is Optional?",[22,7125,7126],{},"There are several different ways of writing anonymous procedures which allow\nusers to omit part or all of the anonymous procedure syntax. These are\nsummarized in the table below.",[29,7128,7130],{"className":7129},[6058],[6060,7131,7135,7150],{"className":7132},[7133,7134],"line-border","anon-procedure-table",[7136,7137,7138],"thead",{},[6067,7139,6062,7140,6062,7144,6062,7147],{},[6071,7141,7143],{"scope":7142},"col","What is the anonymous procedure like?",[6071,7145,7146],{"scope":7142},"What can be left out?",[6071,7148,7149],{"scope":7142},"Examples",[6064,7151,6062,7152,6062,7203,6062,7231,6062,7273],{},[6067,7153,6069,7154,6069,7157,6069,7172,6062],{},[6080,7155,7156],{},"The anonymous procedure is a single primitive",[6080,7158,7159,7160,6069],{},"\n      ",[44,7161,7162,7163,7162,7166,7162,7169,7159],{},"\n        ",[47,7164,7165],{},"input names",[47,7167,7168],{},"arrow",[47,7170,7171],{},"block brackets",[6080,7173,7159,7174,6069],{},[44,7175,7162,7178,7162,7183,7162,7188,7162,7193,7162,7198,7159],{"className":7176},[7177],"no-bullets",[47,7179,7180],{},[319,7181,7182],{},"foreach mylist stamp  ; no inputs",[47,7184,7185],{},[319,7186,7187],{},"foreach mylist print  ; single input",[47,7189,7190],{},[319,7191,7192],{},"(foreach xs ys setxy) ; multiple inputs",[47,7194,7195],{},[319,7196,7197],{},"map round [1.3 2.4 3.5] ; reporter, single input",[47,7199,7200],{},[319,7201,7202],{},"(map + [1 2 3] [4 5 6]) ; reporter, multiple inputs",[6067,7204,6069,7205,6069,7208,6069,7216,6062],{},[6080,7206,7207],{},"The anonymous procedure takes no inputs",[6080,7209,7159,7210,6069],{},[44,7211,7162,7212,7162,7214,7159],{},[47,7213,7165],{},[47,7215,7168],{},[6080,7217,7159,7218,6069],{},[44,7219,7162,7221,7162,7226,7159],{"className":7220},[7177],[47,7222,7223],{},[319,7224,7225],{},"foreach mylist [ print \"abc\" ]",[47,7227,7228],{},[319,7229,7230],{},"map [ 4 ] mylist",[6067,7232,6069,7233,6069,7236,6069,7243,6062],{},[6080,7234,7235],{},"The anonymous procedure has zero or one input(s)",[6080,7237,7159,7238,6069],{},[44,7239,7162,7240,7159],{},[47,7241,7242],{},"brackets around input names",[6080,7244,7159,7245,6069],{},[44,7246,7162,7248,7162,7253,7162,7258,7162,7263,7162,7268,594],{"className":7247},[7177],[47,7249,7250],{},[319,7251,7252],{},"foreach mylist [ -> stamp ] ; no inputs",[47,7254,7255],{},[319,7256,7257],{},"foreach mylist [ x -> print x ] ; single input",[47,7259,7260],{},[319,7261,7262],{},"foreach mylist [ x -> rt x fd x ] ; multiple primitives, single input",[47,7264,7265],{},[319,7266,7267],{},"map [ -> world-width ] mylist ; reporter, no inputs",[47,7269,7270],{},[319,7271,7272],{},"map [ x -> x ^ 2 ] mylist ; reporter, single input",[6067,7274,6069,7275,6069,7278,6069,7285,6062],{},[6080,7276,7277],{},"Anonymous procedure takes more than one input",[6080,7279,7159,7280,6069],{},[44,7281,7162,7282,7159],{},[47,7283,7284],{},"nothing",[6080,7286,7159,7287,6069],{},[44,7288,7162,7290,7162,7295,7159],{"className":7289},[7177],[47,7291,7292],{},[319,7293,7294],{},"(foreach xs ys [ [ x y ] -> setx x + y ])",[47,7296,7297],{},[319,7298,7299],{},"(map [ [ x y ] -> x mod round y ] xs ys)",[22,7301,7302,7305,7306,7309],{},[281,7303,7304],{},"Note",": brackets around input names were ",[281,7307,7308],{},"always required"," in NetLogo 6.0.0.\nIf you copy and paste code into NetLogo 6.0.0 using anonymous procedures with\nunbracketed input names, the code will not compile until you add the brackets.",[34,7311,7314],{"id":7312,"className":7313},"code-example",[14],[16,7315,7318],{"className":7316,"href":7317},[19],"#code-example","Code example",[1449,7320,7321],{},[22,7322,7323,7325],{},[281,7324,1455],{}," State Machine Example",[262,7327,7329],{"id":307,"className":7328},[14],[16,7330,164],{"className":7331,"href":163},[19],[270,7333,7336],{"id":7334,"className":7335},"tick-counter",[14],[16,7337,172],{"className":7338,"href":171},[19],[22,7340,7341],{},"In many NetLogo models, time passes in discrete steps, called “ticks”. NetLogo\nincludes a built-in tick counter so you can keep track of how many ticks have\npassed.",[22,7343,7344],{},"The current value of the tick counter is shown above the view. (You can use the\nSettings button to hide the tick counter, or change the word “ticks” to\nsomething else.)",[22,7346,7347,7348,7355,7356,7363,7364,7371],{},"In code, to retrieve the current value of the tick counter, use the ",[319,7349,7351],{"className":7350},[322],[16,7352,3885],{"href":3882,"rel":7353,"className":7354,"dataDisplayText":3885,"target":331,"title":3885},[327],[329],"\nreporter. The ",[319,7357,7359],{"className":7358},[322],[16,7360,3712],{"href":3784,"rel":7361,"className":7362,"dataDisplayText":3712,"target":331,"title":3712},[327],[329]," command advances the tick counter by 1. The ",[319,7365,7367],{"className":7366},[322],[16,7368,1243],{"href":3248,"rel":7369,"className":7370,"dataDisplayText":1243,"target":331,"title":1243},[327],[329],"\ncommand clears the tick counter along with everything else.",[22,7373,7374,7375,7382],{},"When the tick counter is clear, it’s an error to try to read or modify it. Use\nthe ",[319,7376,7378],{"className":7377},[322],[16,7379,1863],{"href":3751,"rel":7380,"className":7381,"dataDisplayText":1863,"target":331,"title":1863},[327],[329]," command when your model is done setting up, to start the\ntick counter.",[22,7384,7385,7386,7393,7394,301],{},"If your model is set to use tick-based updates, then the ",[319,7387,7389],{"className":7388},[322],[16,7390,3712],{"href":3784,"rel":7391,"className":7392,"dataDisplayText":3712,"target":331,"title":3712},[327],[329]," command will\nusually also update the view. See the later section,\n",[16,7395,7396],{"href":177},"View Updates",[34,7398,7401],{"id":7399,"className":7400},"when-to-tick",[14],[16,7402,7405],{"className":7403,"href":7404},[19],"#when-to-tick","When to tick",[22,7407,882,7408,7415],{},[319,7409,7411],{"className":7410},[322],[16,7412,1863],{"href":3751,"rel":7413,"className":7414,"dataDisplayText":1863,"target":331,"title":1863},[327],[329]," at the end of your setup procedure.",[22,7417,882,7418,7425],{},[319,7419,7421],{"className":7420},[322],[16,7422,3712],{"href":3784,"rel":7423,"className":7424,"dataDisplayText":3712,"target":331,"title":3712},[327],[329]," at the end of your go procedure.",[575,7427,7428],{},[319,7429,7430,594,7433,7436,968,7438,7441,968,7443,594,7446,7449,968,7451,7454,7459,7461,594,7466,7469,968,7471,594,7474,979,7477,594,7480,986,7483,968,7485,7488],{},[580,7431,1789],{"className":7432},[583,1225],[580,7434,1793],{"className":7435},[583,1029],[587,7437],{},[580,7439,1243],{"className":7440},[583,972],[587,7442],{},[580,7444,1252],{"className":7445},[583,972],[580,7447,1322],{"className":7448},[583,689],[587,7450],{},[580,7452,1863],{"className":7453},[583,972],[580,7455,7457,1869],{"className":7456},[583,1225],[587,7458],{},[587,7460],{},[580,7462,7464,1789],{"className":7463},[583,1225],[587,7465],{},[580,7467,3649],{"className":7468},[583,1029],[587,7470],{},[580,7472,536],{"className":7473},[583,972],[580,7475,289],{"className":7476},[583,592],[580,7478,2997],{"className":7479},[583,972],[580,7481,729],{"className":7482},[583,689],[587,7484],{},[580,7486,3712],{"className":7487},[583,972],[580,7489,7491,1869],{"className":7490},[583,1225],[587,7492],{},[34,7494,7497],{"id":7495,"className":7496},"fractional-ticks",[14],[16,7498,7501],{"className":7499,"href":7500},[19],"#fractional-ticks","Fractional ticks",[22,7503,7504],{},"In most models, the tick counter starts at 0 and goes up 1 at a time, from\ninteger to integer. But it’s also possible for the tick counter to take on\nin-between floating point values.",[22,7506,7507,7508,7517],{},"To advance the tick counter by a fractional amount, use the ",[319,7509,7511],{"className":7510},[322],[16,7512,7516],{"href":7513,"rel":7514,"className":7515,"dataDisplayText":7516,"target":331,"title":7516},"/dictionary#tick-advance",[327],[329],"tick-advance","\ncommand. This command takes a numeric input specifying how far to advance the\ntick counter.",[22,7519,7520],{},"A typical use of fractional ticks is to approximate continuous or curved motion.\nSee, for example, the GasLab models in the Models Library (under Chemistry &\nPhysics). These models calculate the exact time at which a future event is to\noccur, then advance the tick counter to exactly that time.",[270,7522,7525],{"id":7523,"className":7524},"view-updates",[14],[16,7526,178],{"className":7527,"href":177},[19],[22,7529,7530],{},"The “view” in NetLogo lets you see the agents in your model on your computer’s\nscreen. As your agents move and change, you see them moving and changing in the\nview.",[22,7532,7533],{},"Of course, you can’t really see your agents directly. The view is a picture that\nNetLogo paints, showing you how your agents look at a particular instant. Once\nthat instant passes and your agents move and change some more, that picture\nneeds to be repainted to reflect the new state of the world. Repainting the\npicture is called “updating” the view.",[22,7535,7536],{},"When does the view get updated? This section discusses how NetLogo decides when\nto update the view, and how you can influence when it gets updated.",[22,7538,7539],{},"NetLogo offers two updates modes, “continuous” updates and “tick-based” updates.\nYou can switch between NetLogo’s two view update modes using a popup menu at the\ntop of the Interface tab.",[22,7541,7542],{},"Continuous updates are the default when you start up NetLogo or start a new\nmodel. Nearly every model in our Models Library, however, uses tick-based\nupdates.",[22,7544,7545],{},"Continuous updates are simplest, but tick-based updates give you more control\nover when and how often updates happen.",[22,7547,7548],{},"It’s important exactly when an update happens, because when updates happen\ndetermines what you see on the screen. If an update comes at an unexpected time,\nyou may see something unexpected — perhaps something confusing or misleading.",[22,7550,7551],{},"It’s also important how often updates happen, because updates take time. The\nmore time NetLogo spends updating the view, the slower your model will run. With\nfewer updates, your model runs faster.",[34,7553,7556],{"id":7554,"className":7555},"continuous-updates",[14],[16,7557,7560],{"className":7558,"href":7559},[19],"#continuous-updates","Continuous updates",[22,7562,7563],{},"Continuous updates are very simple. With continuous updates, NetLogo updates the\nview a certain number of times per second — by default, 30 times a second when\nthe speed slider is in the default, middle setting.",[22,7565,7566],{},"If you move the speed slider to a slower setting, NetLogo will update more than\n30 times a second, effectively slowing down the model. On a faster setting,\nNetLogo will update less than 30 times a second. On the fastest setting, updates\nwill be separated by several seconds.",[22,7568,7569],{},"At extremely slow settings, NetLogo will be updating so often that you will see\nyour agents moving (or changing color, etc.) one at a time.",[22,7571,7572,7573,7582,7583,7592],{},"If you need to temporarily shut off continuous updates, use the ",[319,7574,7576],{"className":7575},[322],[16,7577,7581],{"href":7578,"rel":7579,"className":7580,"dataDisplayText":7581,"target":331,"title":7581},"/dictionary#no-display",[327],[329],"no-display","\ncommand. The ",[319,7584,7586],{"className":7585},[322],[16,7587,7591],{"href":7588,"rel":7589,"className":7590,"dataDisplayText":7591,"target":331,"title":7591},"/dictionary#display",[327],[329],"display"," command turns updates back on, and also forces an\nimmediate update (unless the user is fast-forwarding the model using the speed\nslider).",[34,7594,7597],{"id":7595,"className":7596},"tick-based-updates",[14],[16,7598,7601],{"className":7599,"href":7600},[19],"#tick-based-updates","Tick-based updates",[22,7603,7604,7605,7608],{},"As discussed above in the ",[16,7606,7607],{"href":171},"Tick Counter"," section, in many NetLogo\nmodels, time passes in discrete steps, called “ticks”. Typically, you want the\nview to update once per tick, between ticks. That’s the default behavior with\ntick-based updates.",[22,7610,7611,7612,7619],{},"If you want additional view updates, you can force an update using the\n",[319,7613,7615],{"className":7614},[322],[16,7616,7591],{"href":7588,"rel":7617,"className":7618,"dataDisplayText":7591,"target":331,"title":7591},[327],[329]," command. (The update may be skipped if the user is fast-forwarding\nthe model using the speed slider.)",[22,7621,7622,7623,7630],{},"You don’t have to use the tick counter to use tick-based updates. If the tick\ncounter never advances, the view will update only when you use the ",[319,7624,7626],{"className":7625},[322],[16,7627,7591],{"href":7588,"rel":7628,"className":7629,"dataDisplayText":7591,"target":331,"title":7591},[327],[329],"\ncommand.",[22,7632,7633],{},"If you move the speed slider to a fast enough setting, eventually NetLogo will\nskip some of the updates that would ordinarily have happened. Moving the speed\nslider to a slower setting doesn’t cause additional updates; rather, it makes\nNetLogo pause after each update. The slower the setting, the longer the pause.",[22,7635,7636,7637,7644,7645,7652,7653,7660],{},"Even under tick-based updates, the view also updates whenever a button in the\ninterface pops up (both once and forever buttons) and when a command entered in\nthe Command Center finishes. So it’s not necessary to add the ",[319,7638,7640],{"className":7639},[322],[16,7641,7591],{"href":7588,"rel":7642,"className":7643,"dataDisplayText":7591,"target":331,"title":7591},[327],[329],"\ncommand to once buttons that don’t advance the tick counter. Many forever\nbuttons that don’t advance the tick counter do need to use the ",[319,7646,7648],{"className":7647},[322],[16,7649,7591],{"href":7588,"rel":7650,"className":7651,"dataDisplayText":7591,"target":331,"title":7591},[327],[329],"\ncommand. An example in the Models Library is the Life model (under Computer\nScience -> Cellular Automata). The forever buttons that let the user draw in the\nview use the ",[319,7654,7656],{"className":7655},[322],[16,7657,7591],{"href":7588,"rel":7658,"className":7659,"dataDisplayText":7591,"target":331,"title":7591},[327],[329]," command so the user can see what they are drawing, even\nthough the tick counter is not advancing.",[34,7662,7665],{"id":7663,"className":7664},"choosing-a-mode",[14],[16,7666,7669],{"className":7667,"href":7668},[19],"#choosing-a-mode","Choosing a mode",[22,7671,7672],{},"Advantages of tick-based updates over continuous updates include:",[7674,7675,7676,7679,7682],"ol",{},[47,7677,7678],{},"Consistent, predictable view update behavior which does not vary from\ncomputer to computer or from run to run.",[47,7680,7681],{},"Continuous updates can confuse the user of your model by letting them see\nmodel states they aren’t supposed to see, which may be misleading.",[47,7683,7684,7685,7687],{},"Since ",[319,7686,1793],{}," buttons don’t advance the tick counter, they are unaffected by\nthe speed slider; this is normally the desired behavior.",[22,7689,7690],{},"Nearly every model in our Models Library uses tick-based updates.",[22,7692,7693],{},"Continuous updates are occasionally useful for those rare models in which\nexecution is not divided into short, discrete phases. An example in the Models\nLibrary is Termites. (See also, however, the State Machine Example model, which\nshows how to re-code Termites using ticks.)",[22,7695,7696],{},"Even for models that would normally be set to tick-based updates, it may be\nuseful to switch to continuous updates temporarily for debugging purposes.\nSeeing what’s going on within a tick, instead of only seeing the end result of a\ntick, could help with troubleshooting. After switching to continuous updates,\nyou may want to use the speed slider to slow the model down until you see your\nagents moving one at a time. Don’t forget to change back to tick-based updates\nwhen you are done, as the choice of update mode is saved with the model.",[22,7698,7699],{},"Changing the update mode also affects model speed. Updating the view takes time;\noften enforcing a single update per tick (by using tick-based updates) will make\nyour model faster. On the other hand, continuous updates will be faster when\nrunning a single tick is faster than drawing a frame of the model. Most models\nrun faster under tick-based updates, but for an example of a model which is\nfaster with continuous updates see the “Heroes and Cowards” library model.",[34,7701,7704],{"id":7702,"className":7703},"frame-rate",[14],[16,7705,7708],{"className":7706,"href":7707},[19],"#frame-rate","Frame rate",[22,7710,7711],{},"One of the model settings in NetLogo’s “Settings…” dialog is “Frame rate”\nwhich defaults to 30 frames per second.",[22,7713,7714],{},"The frame rate setting affects both continuous updates and tick-based updates.",[22,7716,7717],{},"With continuous updates, the setting directly determines the frequency of\nupdates.",[22,7719,7720,7721,7724],{},"With tick-based updates, the setting is a ",[481,7722,7723],{},"ceiling"," on how many updates per\nsecond you get. If the frame rate is 30, then NetLogo will ensure that the model\nnever runs faster than that when the speed slider is in the default position. If\nany frame takes less than 1/30 of a second to compute and display, NetLogo will\npause and wait until the full 1/30 of a second has passed before continuing.",[22,7726,7727],{},"The frame rate settings lets you set what you consider to be a normal speed for\nyour model. Then you, or the user of your model, can use the speed slider to\ntemporarily get a faster or slower speed.",[270,7729,7732],{"id":7730,"className":7731},"topology",[14],[16,7733,184],{"className":7734,"href":183},[19],[22,7736,7737],{},"The way the world of patches is connected can change. By default the world is a\ntorus which means it isn’t bounded, but “wraps” — so when a turtle moves past\nthe edge of the world, it disappears and reappears on the opposite edge and\nevery patch has the same number of “neighbor” patches. If you’re a patch on the\nedge of the world, some of your “neighbors” are on the opposite edge.",[22,7739,7740],{},"However, you can change the wrap settings with the Settings button. If wrapping\nis not allowed in a given direction then in that direction (x or y) the world is\nbounded. Patches along that boundary will have fewer than 8 neighbors and\nturtles will not move beyond the edge of the world.",[22,7742,7743],{},"The topology of the NetLogo world has four potential values, torus, box,\nvertical cylinder, or horizontal cylinder. The topology is controlled by\nenabling or disabling wrapping in the x or y directions. The default world is a\ntorus.",[22,7745,7746],{},"A torus wraps in both directions, meaning that the top and bottom edges of the\nworld are connected and the left and right edges are connected. So if a turtle\nmoves beyond the right edge of the world it appears again on the left and the\nsame for the top and bottom.",[22,7748,7749],{},"A box does not wrap in either direction. The world is bounded so turtles that\ntry to move off the edge of the world cannot. Note that the patches around edge\nof the world have fewer than eight neighbors; the corners have three and the\nrest have five.",[22,7751,7752],{},"Horizontal and vertical cylinders wrap in one direction but not the other. A\nhorizontal cylinder wraps vertically, so the top of the world is connected to\nthe bottom. but the left and right edges are bounded. A vertical cylinder is the\nopposite; it wraps horizontally so the left and right edges are connected, but\nthe top and bottom edges are bounded.",[1449,7754,7755],{},[22,7756,7757,7759],{},[281,7758,1455],{}," Neighbors Example",[22,7761,7762],{},"When coordinates wrap, turtles and links wrap visually in the view, too. If a\nturtle shape or link extends past an edge, part of it will appear at the other\nedge. (Turtles themselves are points that take up no space, so they cannot be on\nboth sides of the world at once, but in the view, they appear to take up space\nbecause they have a shape.)",[22,7764,7765,7766],{},"Wrapping also affects how the view looks when you are following a turtle. On a\ntorus, wherever the turtle goes, you will always see the whole world around it:\n",[2835,7767],{"alt":7768,"className":7769,"src":7770,"width":7771,"height":7771,"style":7772},"programming/torus.png",[2839],"/_content/images/programming/torus.png",300,{"aspectRatio":7773},"300/300",[22,7775,7776,7777],{},"Whereas in a box or cylinder the world has edges, so the areas past those edges\nshow up in the view as gray: ",[2835,7778],{"alt":7779,"className":7780,"src":7781,"width":7771,"height":7771,"style":7782},"programming/box.png",[2839],"/_content/images/programming/box.png",{"aspectRatio":7773},[1449,7784,7785],{},[22,7786,7787,7789],{},[281,7788,1455],{}," Termites Perspective Demo (torus), Ants Perspective Demo\n(box)",[22,7791,7792],{},"The topology settings also control the behavior of the distance(xy), in-radius,\nin-cone, face(xy), and towards(xy) primitives. The topology controls whether the\nprimitives wrap or not. They always use the shortest path allowed by the\ntopology. For example, the distance from the center of the patches in the bottom\nleft corner (min-pxcor, min-pycor) and the upper right corner (max-pxcor,\nmax-pycor) will be as follows for each topology given that the min and max pxcor\nand pycor are +/-2:",[44,7794,7795,7798,7801,7804],{},[47,7796,7797],{},"Torus - sqrt(2) ~ 1.414 (this will be the same for all world sizes since the\npatches are directly diagonal to each other in a torus.)",[47,7799,7800],{},"Box - sqrt(world-width^2 + world-height^2) ~ 7.07",[47,7802,7803],{},"Vertical Cylinder - sqrt(world-height^2 + 1) ~ 5.099",[47,7805,7806],{},"Horizontal Cylinder - sqrt(world-width^2 + 1) ~ 5.099",[22,7808,7809,7810,7813],{},"All the other primitives will act similarly to distance. If you formerly used\n",[319,7811,7812],{},"-nowrap"," primitives in your model we recommend removing them and changing the\ntopology of the world instead.",[22,7815,7816,7817,3468],{},"If your model has turtles that move around you’ll need to think about what\nhappens to them when they reach the edge of the world, if the topology you’re\nusing has some non-wrapping edges. There are a few common options: the turtle is\nreflected back into the world (either systematically or randomly), the turtle\nexits the system (dies), or the turtle is hidden. It is no longer necessary to\ncheck the bounds using turtle coordinates, instead we can just ask NetLogo if a\nturtle is at the edge of the world. There are a couple ways of doing this, the\nsimplest is to use the ",[319,7818,7820],{"className":7819},[322],[16,7821,7825],{"href":7822,"rel":7823,"className":7824,"dataDisplayText":7825,"target":331,"title":7825},"/dictionary#can-move",[327],[329],"can-move?",[575,7827,7828],{},[319,7829,7830,594,7833,594,7836,594,7839,979,7843,594,7846,986],{},[580,7831,1659],{"className":7832},[583,972],[580,7834,5720],{"className":7835},[583,592],[580,7837,7825],{"className":7838},[583,592],[580,7840,7842],{"className":7841},[583,592],"distance",[580,7844,3677],{"className":7845},[583,972],[580,7847,7849],{"className":7848},[583,689],"180",[22,7851,7852,7853,7855,7856,7872,7873,7880,7881,7888,7889,418,7898,301],{},"can-move? merely returns true if the position ",[481,7854,7842],{}," in front of the turtle\nis inside the NetLogo world, false otherwise. In this case, if the turtle is at\nthe edge of the world it simple goes back the way it came. You can also use\n",[319,7857,7858,594,7862,594,7865,594,7868],{},[580,7859,7861],{"className":7860},[583,592],"patch-ahead",[580,7863,729],{"className":7864},[583,689],[580,7866,1174],{"className":7867},[583,592],[580,7869,7871],{"className":7870},[583,639],"nobody"," in place of ",[319,7874,7876],{"className":7875},[322],[16,7877,7825],{"href":7822,"rel":7878,"className":7879,"dataDisplayText":7825,"target":331,"title":7825},[327],[329],". If you need to do something\nsmarter that simply turning around it may be useful to use ",[319,7882,7884],{"className":7883},[322],[16,7885,4344],{"href":4341,"rel":7886,"className":7887,"dataDisplayText":4344,"target":331,"title":4344},[327],[329]," with\n",[319,7890,7892],{"className":7891},[322],[16,7893,7897],{"href":7894,"rel":7895,"className":7896,"dataDisplayText":7897,"target":331,"title":7897},"/dictionary#dxy",[327],[329],"dx",[319,7899,7901],{"className":7900},[322],[16,7902,7905],{"href":7894,"rel":7903,"className":7904,"dataDisplayText":7905,"target":331,"title":7905},[327],[329],"dy",[575,7907,7908],{},[319,7909,7910,594,7913,594,7916,594,7919,594,7922,594,7925,627,7928,968,7930,594,7933,795,7936,594,7939,805,7942,641,7944,7946,594,7949,594,7952,594,7955,594,7958,594,7961,627,7964,968,7966,594,7969,795,7972,594,7975,594,7978,805,7981,641],{},[580,7911,1659],{"className":7912},[583,972],[580,7914,4344],{"className":7915},[583,592],[580,7917,7897],{"className":7918},[583,592],[580,7920,690],{"className":7921},[583,689],[580,7923,635],{"className":7924},[583,592],[580,7926,7871],{"className":7927},[583,639],[587,7929],{},[580,7931,1265],{"className":7932},[583,972],[580,7934,2282],{"className":7935},[583,592],[580,7937,4071],{"className":7938},[583,592],[580,7940,2282],{"className":7941},[583,592],[587,7943],{},[587,7945],{},[580,7947,1659],{"className":7948},[583,972],[580,7950,4344],{"className":7951},[583,592],[580,7953,690],{"className":7954},[583,689],[580,7956,7905],{"className":7957},[583,592],[580,7959,635],{"className":7960},[583,592],[580,7962,7871],{"className":7963},[583,639],[587,7965],{},[580,7967,1265],{"className":7968},[583,972],[580,7970,2282],{"className":7971},[583,592],[580,7973,7849],{"className":7974},[583,689],[580,7976,4071],{"className":7977},[583,592],[580,7979,2282],{"className":7980},[583,592],[587,7982],{},[22,7984,7985],{},"This tests whether the turtle is hitting a horizontal or vertical wall and\nbounces off that wall.",[22,7987,7988],{},"In some models if a turtle can’t move forward it simply dies (exits the system,\nlike in Conductor or Mousetraps).",[575,7990,7991],{},[319,7992,7993,594,7996,594,7999,594,8002,6451,8005,986],{},[580,7994,1659],{"className":7995},[583,972],[580,7997,5720],{"className":7998},[583,592],[580,8000,7825],{"className":8001},[583,592],[580,8003,7842],{"className":8004},[583,592],[580,8006,1035],{"className":8007},[583,972],[22,8009,8010,8011,8013,8014,8016,8017,8019],{},"If you are moving turtles using ",[319,8012,3015],{}," rather than ",[319,8015,4861],{}," you should test to\nmake sure the patch you are about to move to exists since ",[319,8018,3015],{}," throws a\nruntime error if it is given coordinates outside the world. This is a common\nsituation when the model is simulating an infinite plane and turtles outside the\nview should simply be hidden.",[575,8021,8022],{},[319,8023,8024,594,8027,594,8031,8035,8037,594,8040,594,8044,8048,8050,8052,594,8055,795,8058,594,8061,594,8064,8067,8068,594,8071,594,8074,790,8077,594,8080,8083,4724,8085,986,8089,4724,8091,594,8094,594,8097,8100,3660,8102,986],{},[580,8025,2532],{"className":8026},[583,972],[580,8028,8030],{"className":8029},[583,1029],"new-x",[580,8032,8034],{"className":8033},[583,1029],"new-value-of-xcor",[587,8036],{},[580,8038,2532],{"className":8039},[583,972],[580,8041,8043],{"className":8042},[583,1029],"new-y",[580,8045,8047],{"className":8046},[583,1029],"new-value-of-ycor",[587,8049],{},[587,8051],{},[580,8053,4044],{"className":8054},[583,972],[580,8056,4344],{"className":8057},[583,592],[580,8059,8030],{"className":8060},[583,1029],[580,8062,4071],{"className":8063},[583,592],[580,8065,453],{"className":8066},[583,592],") (",[580,8069,8043],{"className":8070},[583,1029],[580,8072,4071],{"className":8073},[583,592],[580,8075,462],{"className":8076},[583,592],[580,8078,635],{"className":8079},[583,592],[580,8081,7871],{"className":8082},[583,639],[587,8084],{},[580,8086,8088],{"className":8087},[583,972],"hide-turtle",[587,8090],{},[580,8092,3015],{"className":8093},[583,972],[580,8095,8030],{"className":8096},[583,1029],[580,8098,8043],{"className":8099},[583,1029],[587,8101],{},[580,8103,8105],{"className":8104},[583,972],"show-turtle",[22,8107,8108],{},"Several models in the Models Library use this technique, Gravitation, N-Bodies,\nand Electrostatics are good examples.",[22,8110,1411,8111,418,8114,8117,8118,8120],{},[319,8112,8113],{},"diffuse",[319,8115,8116],{},"diffuse4"," commands behave correctly in all topologies. Each\npatch diffuses and equal amount of the diffuse variable to each of its\nneighbors, if it has fewer than 8 neighbors (or 4 if you are using ",[319,8119,8116],{},"),\nthe remainder stays on the diffusing patch. This means that the overall sum of\npatch-variable across the world remains constant. However, if you want the\ndiffuse matter to still fall off the edges of the world as it would on an\ninfinite plane you still need to clear the edges each step as in the Diffuse Off\nEdges Example.",[262,8122,8125],{"id":8123,"className":8124},"observer-perspective",[14],[16,8126,190],{"className":8127,"href":189},[19],[22,8129,8130,8131,290,8140,418,8149,8158,8159,403,8168,418,8177,8186,8187,8194,8195,8204,8205,8214],{},"The 2D and the 3D view show the world from the perspective of the observer. By\ndefault the observer is looking down on the world from the positive z-axis at\nthe origin. You can change the perspective of the observer by using the\n",[319,8132,8134],{"className":8133},[322],[16,8135,8139],{"href":8136,"rel":8137,"className":8138,"dataDisplayText":8139,"target":331,"title":8139},"/dictionary#follow",[327],[329],"follow",[319,8141,8143],{"className":8142},[322],[16,8144,8148],{"href":8145,"rel":8146,"className":8147,"dataDisplayText":8148,"target":331,"title":8148},"/dictionary#ride",[327],[329],"ride",[319,8150,8152],{"className":8151},[322],[16,8153,8157],{"href":8154,"rel":8155,"className":8156,"dataDisplayText":8157,"target":331,"title":8157},"/dictionary#watch",[327],[329],"watch"," observer commands and ",[319,8160,8162],{"className":8161},[322],[16,8163,8167],{"href":8164,"rel":8165,"className":8166,"dataDisplayText":8167,"target":331,"title":8167},"/dictionary#follow-me",[327],[329],"follow-me",[319,8169,8171],{"className":8170},[322],[16,8172,8176],{"href":8173,"rel":8174,"className":8175,"dataDisplayText":8176,"target":331,"title":8176},"/dictionary#ride-me",[327],[329],"ride-me",[319,8178,8180],{"className":8179},[322],[16,8181,8185],{"href":8182,"rel":8183,"className":8184,"dataDisplayText":8185,"target":331,"title":8185},"/dictionary#watch-me",[327],[329],"watch-me"," turtle commands. ",[319,8188,8190],{"className":8189},[322],[16,8191,8185],{"href":8182,"rel":8192,"className":8193,"dataDisplayText":8185,"target":331,"title":8185},[327],[329]," is also a patch or\nlink command. When in follow or ride mode the observer moves with the subject\nagent around the world. The difference between follow and ride is only visible\nin the 3D view. In the 3D view the user can change the distance behind the agent\nusing the mouse. When the observer is following at zero distance from the agent\nit is actually riding the agent. When the observer is in watch mode it tracks\nthe movements of one turtle (or patch or link) without moving. In both views you\nwill see a spotlight appear on the subject and in the 3D view the observer will\nturn to face the subject. To determine which agent is the focus you can use the\n",[319,8196,8198],{"className":8197},[322],[16,8199,8203],{"href":8200,"rel":8201,"className":8202,"dataDisplayText":8203,"target":331,"title":8203},"/dictionary#subject",[327],[329],"subject"," reporter. Use the ",[319,8206,8208],{"className":8207},[322],[16,8209,8213],{"href":8210,"rel":8211,"className":8212,"dataDisplayText":8213,"target":331,"title":8213},"/dictionary#reset-perspective",[327],[329],"reset-perspective"," command to stop the observer\nfrom watching, following, or riding. In the 3D view, the observer also returns\nto its default position (above the origin, looking straight down).",[1449,8216,8217],{},[22,8218,8219,8221],{},[281,8220,1455],{}," Perspective Example",[262,8223,8226],{"id":8224,"className":8225},"inputoutput",[14],[16,8227,196],{"className":8228,"href":195},[19],[270,8230,8232],{"id":6010,"className":8231},[14],[16,8233,204],{"className":8234,"href":203},[19],[22,8236,8237,8238,8247,8248,301],{},"This section is about output to the screen. Output to the screen can also be\nlater saved to a file using the ",[319,8239,8241],{"className":8240},[322],[16,8242,8246],{"href":8243,"rel":8244,"className":8245,"dataDisplayText":8246,"target":331,"title":8246},"/dictionary#export-cmds",[327],[329],"export-output"," command. If you\nneed a more flexible method of writing data to external files, see the next\nsection, ",[16,8249,210],{"href":209},[22,8251,8252,8253,403,8261,290,8269,1617,8278,8287],{},"The basic commands for generating output to the screen in NetLogo are ",[319,8254,8256],{"className":8255},[322],[16,8257,1280],{"href":8258,"rel":8259,"className":8260,"dataDisplayText":1280,"target":331,"title":1280},"/dictionary#print",[327],[329],[319,8262,8264],{"className":8263},[322],[16,8265,1079],{"href":8266,"rel":8267,"className":8268,"dataDisplayText":1079,"target":331,"title":1079},"/dictionary#show",[327],[329],[319,8270,8272],{"className":8271},[322],[16,8273,8277],{"href":8274,"rel":8275,"className":8276,"dataDisplayText":8277,"target":331,"title":8277},"/dictionary#type",[327],[329],"type",[319,8279,8281],{"className":8280},[322],[16,8282,8286],{"href":8283,"rel":8284,"className":8285,"dataDisplayText":8286,"target":331,"title":8286},"/dictionary#write",[327],[329],"write",". These commands send their output to the\nCommand Center.",[22,8289,8290],{},"For full details on these four commands, see their entries in the NetLogo\nDictionary. Here is how they are typically used:",[44,8292,8293,8300,8307,8314],{},[47,8294,8295,8299],{},[580,8296,8297],{},[580,8298,1280],{}," is useful in most situations.",[47,8301,8302,8306],{},[580,8303,8304],{},[580,8305,1079],{}," lets you see which agent is printing what.",[47,8308,8309,8313],{},[580,8310,8311],{},[580,8312,8277],{}," lets you print several things on the same line.",[47,8315,8316,8320,8321,301],{},[580,8317,8318],{},[580,8319,8286],{}," lets you print values in a format which can be read back in using\n",[319,8322,8324],{"className":8323},[322],[16,8325,8329],{"href":8326,"rel":8327,"className":8328,"dataDisplayText":8329,"target":331,"title":8329},"/dictionary#file-read",[327],[329],"file-read",[22,8331,8332,8333,290,8342,403,8350,1617,8358,8366],{},"A NetLogo model may optionally have an “output area” in its Interface tab,\nseparate from the Command Center. To send output there instead of the Command\nCenter, use the ",[319,8334,8336],{"className":8335},[322],[16,8337,8341],{"href":8338,"rel":8339,"className":8340,"dataDisplayText":8341,"target":331,"title":8341},"/dictionary#output-cmds",[327],[329],"output-print",[319,8343,8345],{"className":8344},[322],[16,8346,8349],{"href":8338,"rel":8347,"className":8348,"dataDisplayText":8349,"target":331,"title":8349},[327],[329],"output-show",[319,8351,8353],{"className":8352},[322],[16,8354,8357],{"href":8338,"rel":8355,"className":8356,"dataDisplayText":8357,"target":331,"title":8357},[327],[329],"output-type",[319,8359,8361],{"className":8360},[322],[16,8362,8365],{"href":8338,"rel":8363,"className":8364,"dataDisplayText":8365,"target":331,"title":8365},[327],[329],"output-write"," commands.",[22,8368,8369,8370,8379,8380,8387,8388,8396,8397,8405],{},"The output area can be cleared with the ",[319,8371,8373],{"className":8372},[322],[16,8374,8378],{"href":8375,"rel":8376,"className":8377,"dataDisplayText":8378,"target":331,"title":8378},"/dictionary#clear-output",[327],[329],"clear-output"," command and saved to a\nfile with ",[319,8381,8383],{"className":8382},[322],[16,8384,8246],{"href":8243,"rel":8385,"className":8386,"dataDisplayText":8246,"target":331,"title":8246},[327],[329],". The contents of the output area will be\nsaved by the ",[319,8389,8391],{"className":8390},[322],[16,8392,8395],{"href":8243,"rel":8393,"className":8394,"dataDisplayText":8395,"target":331,"title":8395},[327],[329],"export-world"," command. The ",[319,8398,8400],{"className":8399},[322],[16,8401,6959],{"href":8402,"rel":8403,"className":8404,"dataDisplayText":6959,"target":331,"title":6959},"/dictionary#import-world",[327],[329]," command\nwill clear the output area and set its contents to the value in imported world\nfile. It should be noted that large amounts of data being sent to the output\narea can increase the size of your exported worlds.",[22,8407,8408,8409,290,8416,403,8423,290,8430,290,8437,8444,8445,8452],{},"If you use ",[319,8410,8412],{"className":8411},[322],[16,8413,8341],{"href":8338,"rel":8414,"className":8415,"dataDisplayText":8341,"target":331,"title":8341},[327],[329],[319,8417,8419],{"className":8418},[322],[16,8420,8349],{"href":8338,"rel":8421,"className":8422,"dataDisplayText":8349,"target":331,"title":8349},[327],[329],[319,8424,8426],{"className":8425},[322],[16,8427,8357],{"href":8338,"rel":8428,"className":8429,"dataDisplayText":8357,"target":331,"title":8357},[327],[329],[319,8431,8433],{"className":8432},[322],[16,8434,8365],{"href":8338,"rel":8435,"className":8436,"dataDisplayText":8365,"target":331,"title":8365},[327],[329],[319,8438,8440],{"className":8439},[322],[16,8441,8378],{"href":8375,"rel":8442,"className":8443,"dataDisplayText":8378,"target":331,"title":8378},[327],[329],", or\n",[319,8446,8448],{"className":8447},[322],[16,8449,8246],{"href":8243,"rel":8450,"className":8451,"dataDisplayText":8246,"target":331,"title":8246},[327],[329]," in a model which does not have a separate output\narea, then the commands apply to the output portion of the Command Center.",[34,8454,8457],{"id":8455,"className":8456},"how-output-primitives-differ",[14],[16,8458,8461],{"className":8459,"href":8460},[19],"#how-output-primitives-differ","How Output Primitives Differ",[22,8463,8464],{},"This information is a quick reference for more advanced users.",[22,8466,1411,8467,290,8474,290,8481,1617,8488,8495],{},[319,8468,8470],{"className":8469},[322],[16,8471,1280],{"href":8258,"rel":8472,"className":8473,"dataDisplayText":1280,"target":331,"title":1280},[327],[329],[319,8475,8477],{"className":8476},[322],[16,8478,1079],{"href":8266,"rel":8479,"className":8480,"dataDisplayText":1079,"target":331,"title":1079},[327],[329],[319,8482,8484],{"className":8483},[322],[16,8485,8277],{"href":8274,"rel":8486,"className":8487,"dataDisplayText":8277,"target":331,"title":8277},[327],[329],[319,8489,8491],{"className":8490},[322],[16,8492,8286],{"href":8283,"rel":8493,"className":8494,"dataDisplayText":8286,"target":331,"title":8286},[327],[329]," primitives differ on the\nfollowing facets:",[44,8497,8498,8501,8504,8507],{},[47,8499,8500],{},"What types of values does the primitive accept?",[47,8502,8503],{},"Does the primitive output a newline at the end?",[47,8505,8506],{},"Are strings output with quotes surrounding them?",[47,8508,8509],{},"Does the primitive output the agent which printed it?",[22,8511,8512],{},"The following table summarizes the behavior of each primitive.",[29,8514,8516],{"className":8515},[6058],[6060,8517,8518,8540],{},[7136,8519,8520],{},[6067,8521,8522,8525,8528,8531,8534],{},[6071,8523,8524],{},"Primitive",[6071,8526,8527],{},"Acceptable values",[6071,8529,8530],{},"Adds newline?",[6071,8532,8533],{},"Strings quoted?",[6071,8535,8536,8537,6796],{},"Outputs ",[319,8538,8539],{},"self",[6064,8541,8542,8564,8583,8602],{},[6067,8543,8544,8553,8556,8559,8562],{},[6080,8545,8546],{},[319,8547,8549],{"className":8548},[322],[16,8550,1280],{"href":8258,"rel":8551,"className":8552,"dataDisplayText":1280,"target":331,"title":1280},[327],[329],[6080,8554,8555],{},"any NetLogo value",[6080,8557,8558],{},"yes",[6080,8560,8561],{},"no",[6080,8563,8561],{},[6067,8565,8566,8575,8577,8579,8581],{},[6080,8567,8568],{},[319,8569,8571],{"className":8570},[322],[16,8572,1079],{"href":8266,"rel":8573,"className":8574,"dataDisplayText":1079,"target":331,"title":1079},[327],[329],[6080,8576,8555],{},[6080,8578,8558],{},[6080,8580,8558],{},[6080,8582,8558],{},[6067,8584,8585,8594,8596,8598,8600],{},[6080,8586,8587],{},[319,8588,8590],{"className":8589},[322],[16,8591,8277],{"href":8274,"rel":8592,"className":8593,"dataDisplayText":8277,"target":331,"title":8277},[327],[329],[6080,8595,8555],{},[6080,8597,8561],{},[6080,8599,8561],{},[6080,8601,8561],{},[6067,8603,8604,8613,8616,8618,8620],{},[6080,8605,8606],{},[319,8607,8609],{"className":8608},[322],[16,8610,8286],{"href":8283,"rel":8611,"className":8612,"dataDisplayText":8286,"target":331,"title":8286},[327],[329],[6080,8614,8615],{},"boolean, number, string, lists containing only these types",[6080,8617,8561],{},[6080,8619,8558],{},[6080,8621,8561],{},[34,8623,8626],{"id":8624,"className":8625},"user-interaction-primitives",[14],[16,8627,8630],{"className":8628,"href":8629},[19],"#user-interaction-primitives","User Interaction Primitives",[22,8632,8633,8634,403,8638,403,8642,403,8646,403,8650,403,8654,2803,8658,301],{},"NetLogo features several primitives which allow a model to interact with the\nuser. These primitives include ",[16,8635,8637],{"href":8636},"dictionary#user-directory","user-directory",[16,8639,8641],{"href":8640},"dictionary#user-file","user-file",[16,8643,8645],{"href":8644},"dictionary#user-new-file","user-new-file",[16,8647,8649],{"href":8648},"dictionary#user-input","user-input",[16,8651,8653],{"href":8652},"dictionary#user-message","user-message",[16,8655,8657],{"href":8656},"dictionary#user-one-of","user-one-of",[16,8659,8661],{"href":8660},"dictionary#user-yes-or-no","user-yes-or-no?",[22,8663,8664,8665,290,8667,1617,8669,8671,8672,290,8674,1617,8676,8678,8679,8681],{},"These primitives differ in precisely what interaction they take with the user.\n",[319,8666,8637],{},[319,8668,8641],{},[319,8670,8645],{}," are all reporters which\nprompt the user to select an item from the file system and report the path of\nthe selected item to NetLogo. ",[319,8673,8661],{},[319,8675,8657],{},[319,8677,8649],{},"\nall prompt the user to provide input in the form of text or a selection.\n",[319,8680,8653],{}," simply presents a message to the user.",[22,8683,8684],{},"Note that all active forever buttons will pause when one of these primitives is\nused and will resume only when the user completes the interaction with the\nbutton.",[34,8686,8689],{"id":8687,"className":8688},"what-does-halt-mean",[14],[16,8690,8693],{"className":8691,"href":8692},[19],"#what-does-halt-mean","What does “Halt” mean?",[22,8695,8696,8697,8699],{},"The primitives which prompt the user for input, as well as ",[319,8698,8653],{}," all\nprovide a “Halt” button. The effect of this button is the same for all of these\nprimitives - it halts the model. When the model is halted all running code is\nstopped, including buttons and the command center. Since halting stops code in\nthe middle of whatever it happened to be doing at the time it was halted, you\nmay see strange results if you continue to run the model after a halt without\nsetting it up again.",[270,8701,8704],{"id":8702,"className":8703},"file-io",[14],[16,8705,210],{"className":8706,"href":209},[19],[22,8708,8709,8710,301],{},"In NetLogo, there is a set of primitives that give you the power to interact\nwith outside files. They all begin with the prefix ",[281,8711,8712],{},"file-",[22,8714,8715],{},"There are two main modes when dealing with files: reading and writing. The\ndifference is the direction of the flow of data. When you are reading in\ninformation from a file, data that is stored in the file flows into your model.\nOn the other hand, writing allows data to flow out of your model and into a\nfile.",[22,8717,8718,8719,8728],{},"When working with files, always begin by using the primitive ",[319,8720,8722],{"className":8721},[322],[16,8723,8727],{"href":8724,"rel":8725,"className":8726,"dataDisplayText":8727,"target":331,"title":8727},"/dictionary#file-open",[327],[329],"file-open",". This\nspecifies which file you will be interacting with. None of the other primitives\nwork unless you open a file first.",[22,8730,8731,8732,8734],{},"The next ",[281,8733,8712],{}," primitive you use dictates which mode the file will be in\nuntil the file is closed, reading or writing. To switch modes, close and then\nreopen the file.",[22,8736,8737,8738,290,8745,403,8754,1617,8763,8772],{},"The reading primitives include ",[319,8739,8741],{"className":8740},[322],[16,8742,8329],{"href":8326,"rel":8743,"className":8744,"dataDisplayText":8329,"target":331,"title":8329},[327],[329],[319,8746,8748],{"className":8747},[322],[16,8749,8753],{"href":8750,"rel":8751,"className":8752,"dataDisplayText":8753,"target":331,"title":8753},"/dictionary#file-read-line",[327],[329],"file-read-line",[319,8755,8757],{"className":8756},[322],[16,8758,8762],{"href":8759,"rel":8760,"className":8761,"dataDisplayText":8762,"target":331,"title":8762},"/dictionary#file-read-characters",[327],[329],"file-read-characters",[319,8764,8766],{"className":8765},[322],[16,8767,8771],{"href":8768,"rel":8769,"className":8770,"dataDisplayText":8771,"target":331,"title":8771},"/dictionary#file-at-end",[327],[329],"file-at-end?",". Note that the file must exist\nalready before you can open it for reading.",[1449,8774,8775],{},[22,8776,8777,8779],{},[281,8778,2923],{}," File Input Example",[22,8781,8782,8783,290,8792,290,8801,1617,8810,8819,8820,8829],{},"The primitives for writing are similar to the primitives that print things in\nthe Command Center, except that the output gets saved to a file. They include\n",[319,8784,8786],{"className":8785},[322],[16,8787,8791],{"href":8788,"rel":8789,"className":8790,"dataDisplayText":8791,"target":331,"title":8791},"/dictionary#file-print",[327],[329],"file-print",[319,8793,8795],{"className":8794},[322],[16,8796,8800],{"href":8797,"rel":8798,"className":8799,"dataDisplayText":8800,"target":331,"title":8800},"/dictionary#file-show",[327],[329],"file-show",[319,8802,8804],{"className":8803},[322],[16,8805,8809],{"href":8806,"rel":8807,"className":8808,"dataDisplayText":8809,"target":331,"title":8809},"/dictionary#file-type",[327],[329],"file-type",[319,8811,8813],{"className":8812},[322],[16,8814,8818],{"href":8815,"rel":8816,"className":8817,"dataDisplayText":8818,"target":331,"title":8818},"/dictionary#file-write",[327],[329],"file-write",". Note that you\ncan never “overwrite” data. In other words, if you attempt to write to a file\nwith existing data, all new data will be appended to the end of the file. (If\nyou want to overwrite a file, use ",[319,8821,8823],{"className":8822},[322],[16,8824,8828],{"href":8825,"rel":8826,"className":8827,"dataDisplayText":8828,"target":331,"title":8828},"/dictionary#file-delete",[327],[329],"file-delete"," to delete it, then open it for\nwriting.)",[1449,8831,8832],{},[22,8833,8834,8836],{},[281,8835,2923],{}," File Output Example",[22,8838,8839,8840,8849,8850,8857,8858,8865],{},"When you are finished using a file, you can use the command ",[319,8841,8843],{"className":8842},[322],[16,8844,8848],{"href":8845,"rel":8846,"className":8847,"dataDisplayText":8848,"target":331,"title":8848},"/dictionary#file-close",[327],[329],"file-close"," to\nend your session with the file. If you wish to remove the file afterwards, use\nthe primitive ",[319,8851,8853],{"className":8852},[322],[16,8854,8828],{"href":8825,"rel":8855,"className":8856,"dataDisplayText":8828,"target":331,"title":8828},[327],[329]," to delete it. To close multiple opened files, one\nneeds to first select the file by using ",[319,8859,8861],{"className":8860},[322],[16,8862,8727],{"href":8724,"rel":8863,"className":8864,"dataDisplayText":8727,"target":331,"title":8727},[327],[329]," before closing it.",[575,8867,8868],{},[319,8869,8870,8874,8876,594,8879,8883,8885,594,8888,8892,8894,594,8897,8901,8903,8905,8909,8911,8914,8916,594,8919,8922,8924,8927,8929,594,8932,8935,8937],{},[580,8871,8873],{"className":8872},[583,584],";; Open 3 files",[587,8875],{},[580,8877,8727],{"className":8878},[583,972],[580,8880,8882],{"className":8881},[583,3102],"\"myfile1.txt\"",[587,8884],{},[580,8886,8727],{"className":8887},[583,972],[580,8889,8891],{"className":8890},[583,3102],"\"myfile2.txt\"",[587,8893],{},[580,8895,8727],{"className":8896},[583,972],[580,8898,8900],{"className":8899},[583,3102],"\"myfile3.txt\"",[587,8902],{},[587,8904],{},[580,8906,8908],{"className":8907},[583,584],";; Now close the 3 files",[587,8910],{},[580,8912,8848],{"className":8913},[583,972],[587,8915],{},[580,8917,8727],{"className":8918},[583,972],[580,8920,8891],{"className":8921},[583,3102],[587,8923],{},[580,8925,8848],{"className":8926},[583,972],[587,8928],{},[580,8930,8727],{"className":8931},[583,972],[580,8933,8882],{"className":8934},[583,3102],[587,8936],{},[580,8938,8848],{"className":8939},[583,972],[22,8941,8942,8943,301],{},"Or, if you know you just want to close every file, you can use\n",[319,8944,8946],{"className":8945},[322],[16,8947,8951],{"href":8948,"rel":8949,"className":8950,"dataDisplayText":8951,"target":331,"title":8951},"/dictionary#file-close-all",[327],[329],"file-close-all",[22,8953,8954,8955,418,8962,8969],{},"Two primitives worth noting are ",[319,8956,8958],{"className":8957},[322],[16,8959,8818],{"href":8815,"rel":8960,"className":8961,"dataDisplayText":8818,"target":331,"title":8818},[327],[329],[319,8963,8965],{"className":8964},[322],[16,8966,8329],{"href":8326,"rel":8967,"className":8968,"dataDisplayText":8329,"target":331,"title":8329},[327],[329]," . These\nprimitives are designed to easily save and retrieve NetLogo constants such as\nnumbers, lists, booleans, and strings. file-write will always output the\nvariable in such a manner that file-read will be able to interpret it correctly.",[575,8971,8972],{},[319,8973,8974,594,8977,968,8981,8985,8987,594,8990,8993,4724,8995,594,8998,594,9001,594,9004,986,9007,9009,9012,9014,9016,594,9019,968,9022,9026,9028,594,9031,9034,4724,9036,594,9039,594,9042,986,9045,9047],{},[580,8975,8727],{"className":8976},[583,972],[580,8978,8980],{"className":8979},[583,3102],"\"myfile.txt\"",[580,8982,8984],{"className":8983},[583,584],";; Opening file for writing",[587,8986],{},[580,8988,536],{"className":8989},[583,972],[580,8991,289],{"className":8992},[583,592],[587,8994],{},[580,8996,8818],{"className":8997},[583,972],[580,8999,453],{"className":9000},[583,592],[580,9002,8818],{"className":9003},[583,972],[580,9005,462],{"className":9006},[583,592],[587,9008],{},[580,9010,8848],{"className":9011},[583,972],[587,9013],{},[587,9015],{},[580,9017,8727],{"className":9018},[583,972],[580,9020,8980],{"className":9021},[583,3102],[580,9023,9025],{"className":9024},[583,584],";; Opening file for reading",[587,9027],{},[580,9029,536],{"className":9030},[583,972],[580,9032,289],{"className":9033},[583,592],[587,9035],{},[580,9037,3015],{"className":9038},[583,972],[580,9040,8329],{"className":9041},[583,592],[580,9043,8329],{"className":9044},[583,592],[587,9046],{},[580,9048,8848],{"className":9049},[583,972],[1449,9051,9052],{},[22,9053,9054,9056],{},[281,9055,2923],{}," File Input Example and File Output Example",[22,9058,9059],{},[281,9060,9061],{},"Letting the user choose",[22,9063,1411,9064,290,9072,1617,9080,9088],{},[319,9065,9067],{"className":9066},[322],[16,9068,8637],{"href":9069,"rel":9070,"className":9071,"dataDisplayText":8637,"target":331,"title":8637},"/dictionary#user-directory",[327],[329],[319,9073,9075],{"className":9074},[322],[16,9076,8641],{"href":9077,"rel":9078,"className":9079,"dataDisplayText":8641,"target":331,"title":8641},"/dictionary#user-file",[327],[329],[319,9081,9083],{"className":9082},[322],[16,9084,8645],{"href":9085,"rel":9086,"className":9087,"dataDisplayText":8645,"target":331,"title":8645},"/dictionary#user-new-file",[327],[329]," primitives are\nuseful when you want the user to choose a file or directory for your code to\noperate on.",[262,9090,9093],{"id":9091,"className":9092},"lists",[14],[16,9094,216],{"className":9095,"href":215},[19],[22,9097,9098],{},"In the simplest models, each variable holds only one piece of information,\nusually a number or a string. Lists let you store multiple pieces of information\nin a single value by collecting that information in a list. Each value in the\nlist can be any type of value: a number, or a string, an agent or agentset, or\neven another list.",[22,9100,9101],{},"Lists allow for the convenient packaging of information in NetLogo. If your\nagents carry out a repetitive calculation on multiple variables, it might be\neasier to have a list variable, instead of multiple number variables. Several\nprimitives simplify the process of performing the same computation on each value\nin a list.",[22,9103,1411,9104,9107],{},[16,9105,9106],{"href":3560},"NetLogo Dictionary"," has a section that lists all of the\nlist-related primitives.",[22,9109,9110],{},[281,9111,9112],{},"Constant lists",[22,9114,9115,9116,9137,9138,301],{},"You can make a list by simply putting the values you want in the list between\nbrackets, like this: ",[319,9117,9118,594,9121,627,9124,594,9127,594,9130,594,9134,641],{},[580,9119,1265],{"className":9120},[583,972],[580,9122,6513],{"className":9123},[583,1029],[580,9125,4446],{"className":9126},[583,689],[580,9128,6722],{"className":9129},[583,689],[580,9131,9133],{"className":9132},[583,689],"6",[580,9135,3986],{"className":9136},[583,689],". Note that the individual values are\nseparated by spaces. You can make lists that contain numbers and strings this\nway, as well as lists within lists, for example ",[319,9139,9140,9141,594,9144,733,9147,594,9150,753],{},"[[",[580,9142,4446],{"className":9143},[583,689],[580,9145,6722],{"className":9146},[583,689],[580,9148,709],{"className":9149},[583,689],[580,9151,1256],{"className":9152},[583,689],[22,9154,9155,9156,301],{},"The empty list is written by putting nothing between the brackets, like this:\n",[319,9157,9158],{},"[]",[22,9160,9161],{},[281,9162,9163],{},"Building lists on the fly",[22,9165,9166,9167,9174,9175,9182],{},"If you want to make a list in which the values are determined by reporters, as\nopposed to being a series of constants, use the ",[319,9168,9170],{"className":9169},[322],[16,9171,5598],{"href":5614,"rel":9172,"className":9173,"dataDisplayText":5598,"target":331,"title":5598},[327],[329]," reporter. The ",[319,9176,9178],{"className":9177},[322],[16,9179,5598],{"href":5614,"rel":9180,"className":9181,"dataDisplayText":5598,"target":331,"title":5598},[327],[329],"\nreporter accepts two other reporters, runs them, and reports the results as a\nlist.",[22,9184,9185],{},"If I wanted a list to contain two random values, I might use the following code:",[575,9187,9188],{},[319,9189,9190,594,9193,594,9197,795,9200,594,9203,8067,9206,594,9209,805],{},[580,9191,1265],{"className":9192},[583,972],[580,9194,9196],{"className":9195},[583,1029],"random-list",[580,9198,5598],{"className":9199},[583,592],[580,9201,1834],{"className":9202},[583,592],[580,9204,1322],{"className":9205},[583,689],[580,9207,1834],{"className":9208},[583,592],[580,9210,4904],{"className":9211},[583,689],[22,9213,9214,9215,9217],{},"This will set ",[319,9216,9196],{}," to a new list of two random integers each time it\nruns.",[22,9219,9220,9221,9228],{},"To make longer or shorter lists, you can use the ",[319,9222,9224],{"className":9223},[322],[16,9225,5598],{"href":5614,"rel":9226,"className":9227,"dataDisplayText":5598,"target":331,"title":5598},[327],[329]," reporter with fewer or\nmore than two inputs, but in order to do so, you must enclose the entire call in\nparentheses, e.g.:",[575,9230,9231],{},[319,9232,5594,9233,594,9236,594,9239,805,9242,5594,9244,594,9247,594,9250,594,9253,594,9256,594,9259,594,9262,805],{},[580,9234,5598],{"className":9235},[583,592],[580,9237,1834],{"className":9238},[583,592],[580,9240,1322],{"className":9241},[583,689],[587,9243],{},[580,9245,5598],{"className":9246},[583,592],[580,9248,1834],{"className":9249},[583,592],[580,9251,1322],{"className":9252},[583,689],[580,9254,1834],{"className":9255},[583,592],[580,9257,4904],{"className":9258},[583,689],[580,9260,1834],{"className":9261},[583,592],[580,9263,9265],{"className":9264},[583,689],"30",[22,9267,9268,9269,301],{},"For more information, see ",[16,9270,9272],{"href":9271},"#variadic","Varying number of inputs",[22,9274,9275,9276,9284],{},"Some kinds of lists are most easily built using the ",[319,9277,9279],{"className":9278},[322],[16,9280,6497],{"href":9281,"rel":9282,"className":9283,"dataDisplayText":6497,"target":331,"title":6497},"/dictionary#n-values",[327],[329]," reporter, which\nallows you to construct a list of a specific length by repeatedly running a\ngiven reporter. You can make a list of the same value repeated, or all the\nnumbers in a range, or a lot of random numbers, or many other possibilities. See\ndictionary entry for details and examples.",[22,9286,1411,9287,9294,9295,9302],{},[319,9288,9290],{"className":9289},[322],[16,9291,855],{"href":1054,"rel":9292,"className":9293,"dataDisplayText":855,"target":331,"title":855},[327],[329]," primitive lets you construct a list from an agentset. It reports a\nlist containing each agent’s value for the given reporter. (The reporter could\nbe a simple variable name, or a more complex expression — even a call to a\nprocedure defined using ",[319,9296,9298],{"className":9297},[322],[16,9299,3585],{"href":3582,"rel":9300,"className":9301,"dataDisplayText":3585,"target":331,"title":3585},[327],[329],".) A common idiom is",[575,9304,9305],{},[319,9306,9307,627,9311,851,9314,594,9317,9320,9322,627,9325,851,9328,594,9331],{},[580,9308,9310],{"className":9309},[583,592],"max",[580,9312,1673],{"className":9313},[583,1029],[580,9315,855],{"className":9316},[583,592],[580,9318,289],{"className":9319},[583,592],[587,9321],{},[580,9323,1025],{"className":9324},[583,592],[580,9326,1673],{"className":9327},[583,1029],[580,9329,855],{"className":9330},[583,592],[580,9332,289],{"className":9333},[583,592],[22,9335,9336],{},"and so on.",[22,9338,9339,9340,9349,9350,290,9357,9364],{},"You can combine two or more lists using the ",[319,9341,9343],{"className":9342},[322],[16,9344,9348],{"href":9345,"rel":9346,"className":9347,"dataDisplayText":9348,"target":331,"title":9348},"/dictionary#sentence",[327],[329],"sentence"," reporter, which\nconcatenates lists by combining their contents into a single, larger list. Like\n",[319,9351,9353],{"className":9352},[322],[16,9354,5598],{"href":5614,"rel":9355,"className":9356,"dataDisplayText":5598,"target":331,"title":5598},[327],[329],[319,9358,9360],{"className":9359},[322],[16,9361,9348],{"href":9345,"rel":9362,"className":9363,"dataDisplayText":9348,"target":331,"title":9348},[327],[329]," normally takes two inputs, but can accept any number of\ninputs if the call is surrounded by parentheses.",[22,9366,9367],{},[281,9368,9369],{},"Changing list items",[22,9371,9372,9373,9380],{},"Technically, lists can’t be modified, but you can construct new lists based on\nold lists. If you want the new list to replace the old list, use ",[319,9374,9376],{"className":9375},[322],[16,9377,1265],{"href":2402,"rel":9378,"className":9379,"dataDisplayText":1265,"target":331,"title":1265},[327],[329],". For\nexample:",[575,9382,9383],{},[319,9384,9385,594,9388,627,9391,594,9394,594,9398,594,9401,627,9405,594,9408,594,9411,753,9414,9416,9420,9422,594,9425,594,9428,594,9432,594,9435,594,9438,9441,9443],{},[580,9386,1265],{"className":9387},[583,972],[580,9389,6513],{"className":9390},[583,1029],[580,9392,4446],{"className":9393},[583,689],[580,9395,9397],{"className":9396},[583,689],"7",[580,9399,1256],{"className":9400},[583,689],[580,9402,9404],{"className":9403},[583,1029],"Bob",[580,9406,709],{"className":9407},[583,689],[580,9409,690],{"className":9410},[583,689],[580,9412,4479],{"className":9413},[583,689],[587,9415],{},[580,9417,9419],{"className":9418},[583,584],"; mylist is now [2 7 5 Bob [3 0 -2]]",[587,9421],{},[580,9423,1265],{"className":9424},[583,972],[580,9426,6513],{"className":9427},[583,1029],[580,9429,9431],{"className":9430},[583,592],"replace-item",[580,9433,4446],{"className":9434},[583,689],[580,9436,6513],{"className":9437},[583,1029],[580,9439,1322],{"className":9440},[583,689],[587,9442],{},[580,9444,9446],{"className":9445},[583,584],"; mylist is now [2 7 10 Bob [3 0 -2]]",[22,9448,1411,9449,9457],{},[319,9450,9452],{"className":9451},[322],[16,9453,9431],{"href":9454,"rel":9455,"className":9456,"dataDisplayText":9431,"target":331,"title":9431},"/dictionary#replace-item",[327],[329]," reporter takes three inputs. The first input specifies\nwhich item in the list is to be changed. 0 means the first item, 1 means the\nsecond item, and so forth.",[22,9459,9460,9461,9470,9471,9480],{},"To add an item, say 42, to the end of a list, use the ",[319,9462,9464],{"className":9463},[322],[16,9465,9469],{"href":9466,"rel":9467,"className":9468,"dataDisplayText":9469,"target":331,"title":9469},"/dictionary#lput",[327],[329],"lput"," reporter.\n(",[319,9472,9474],{"className":9473},[322],[16,9475,9479],{"href":9476,"rel":9477,"className":9478,"dataDisplayText":9479,"target":331,"title":9479},"/dictionary#fput",[327],[329],"fput"," adds an item to the beginning of a list.)",[575,9482,9483],{},[319,9484,9485,594,9488,594,9491,594,9494,594,9498,9501,9503],{},[580,9486,1265],{"className":9487},[583,972],[580,9489,6513],{"className":9490},[583,1029],[580,9492,9469],{"className":9493},[583,592],[580,9495,9497],{"className":9496},[583,689],"42",[580,9499,6513],{"className":9500},[583,1029],[587,9502],{},[580,9504,9506],{"className":9505},[583,584],"; mylist is now [2 7 10 Bob [3 0 -2] 42]",[22,9508,9509,9510,795,9519,9522],{},"But what if you changed your mind? The ",[319,9511,9513],{"className":9512},[322],[16,9514,9518],{"href":9515,"rel":9516,"className":9517,"dataDisplayText":9518,"target":331,"title":9518},"/dictionary#but-first-and-last",[327],[329],"but-last",[319,9520,9521],{},"bl"," for\nshort) reporter reports all the list items but the last.",[575,9524,9525],{},[319,9526,9527,594,9530,594,9533,594,9536,9539,9541],{},[580,9528,1265],{"className":9529},[583,972],[580,9531,6513],{"className":9532},[583,1029],[580,9534,9518],{"className":9535},[583,592],[580,9537,6513],{"className":9538},[583,1029],[587,9540],{},[580,9542,9446],{"className":9543},[583,584],[22,9545,9546],{},"Suppose you want to get rid of item 0, the 2 at the beginning of the list.",[575,9548,9549],{},[319,9550,9551,594,9554,594,9557,594,9561,9564,9566],{},[580,9552,1265],{"className":9553},[583,972],[580,9555,6513],{"className":9556},[583,1029],[580,9558,9560],{"className":9559},[583,592],"but-first",[580,9562,6513],{"className":9563},[583,1029],[587,9565],{},[580,9567,9569],{"className":9568},[583,584],"; mylist is now [7 10 Bob [3 0 -2]]",[22,9571,9572,9573,9576,9577,9589,9590,9597],{},"Suppose you wanted to change the third item that’s nested inside item 3 from -2\nto 9? The key is to realize that the name that can be used to call the nested\nlist ",[580,9574,9575],{},"3 0 -2"," is ",[319,9578,9579,594,9583,594,9586],{},[580,9580,9582],{"className":9581},[583,592],"item",[580,9584,709],{"className":9585},[583,689],[580,9587,6513],{"className":9588},[583,1029],". Then the ",[319,9591,9593],{"className":9592},[322],[16,9594,9431],{"href":9454,"rel":9595,"className":9596,"dataDisplayText":9431,"target":331,"title":9431},[327],[329]," reporter can be\nnested to change the list-within-a-list. The parentheses are added for clarity.",[575,9599,9600],{},[319,9601,9602,594,9605,795,9608,594,9611,594,9614,9617,9619,9620,594,9623,795,9626,594,9629,594,9632,790,9635,9639,9640,9642],{},[580,9603,1265],{"className":9604},[583,972],[580,9606,6513],{"className":9607},[583,1029],[580,9609,9431],{"className":9610},[583,592],[580,9612,709],{"className":9613},[583,689],[580,9615,6513],{"className":9616},[583,1029],[587,9618],{},"                  (",[580,9621,9431],{"className":9622},[583,592],[580,9624,4446],{"className":9625},[583,689],[580,9627,9582],{"className":9628},[583,592],[580,9630,709],{"className":9631},[583,689],[580,9633,6513],{"className":9634},[583,1029],[580,9636,9638],{"className":9637},[583,689],"9","))",[587,9641],{},[580,9643,9645],{"className":9644},[583,584],"; mylist is now [7 10 Bob [3 0 9]]",[22,9647,9648],{},[281,9649,9650],{},"Iterating over lists",[22,9652,9653,9654,9662,9663,9671],{},"If you want to do some operation on each item in a list in turn, the ",[319,9655,9657],{"className":9656},[322],[16,9658,6485],{"href":9659,"rel":9660,"className":9661,"dataDisplayText":6485,"target":331,"title":6485},"/dictionary#foreach",[327],[329],"\ncommand and the ",[319,9664,9666],{"className":9665},[322],[16,9667,6488],{"href":9668,"rel":9669,"className":9670,"dataDisplayText":6488,"target":331,"title":6488},"/dictionary#map",[327],[329]," reporter may be helpful.",[22,9673,9674,9681],{},[319,9675,9677],{"className":9676},[322],[16,9678,6485],{"href":9659,"rel":9679,"className":9680,"dataDisplayText":6485,"target":331,"title":6485},[327],[329]," is used to run a command or commands on each item in a list. It\ntakes an input list and a command name or block of commands, like this:",[575,9683,9684],{},[319,9685,9686,627,9689,594,9692,594,9695,851,9698,9701,9703,594,9707,9710,9712,594,9715,9718,9720,594,9723,9726,9728,627,9731,594,9734,594,9737,641,9740,4724,9742,594,9746,594,9749,594,9752,9755,3660,9757,795,9760,594,9764,594,9768,594,9771,4075,9775,9777,594,9780,594,9784,594,9787,9790,9792,594,9795,594,9798,594,9801,9804,9806,594,9809,594,9812,594,9815],{},[580,9687,6485],{"className":9688},[583,972],[580,9690,729],{"className":9691},[583,689],[580,9693,4446],{"className":9694},[583,689],[580,9696,709],{"className":9697},[583,689],[580,9699,1079],{"className":9700},[583,972],[587,9702],{},[580,9704,9706],{"className":9705},[583,1029],"=>",[580,9708,729],{"className":9709},[583,689],[587,9711],{},[580,9713,9706],{"className":9714},[583,1029],[580,9716,4446],{"className":9717},[583,689],[587,9719],{},[580,9721,9706],{"className":9722},[583,1029],[580,9724,709],{"className":9725},[583,689],[587,9727],{},[580,9729,6485],{"className":9730},[583,972],[580,9732,4446],{"className":9733},[583,689],[580,9735,6722],{"className":9736},[583,689],[580,9738,9133],{"className":9739},[583,689],[587,9741],{},[580,9743,9745],{"className":9744},[583,1029],"n",[580,9747,6178],{"className":9748},[583,592],[580,9750,4366],{"className":9751},[583,972],[580,9753,9745],{"className":9754},[583,1029],[587,9756],{},[580,9758,1079],{"className":9759},[583,972],[580,9761,9763],{"className":9762},[583,592],"word",[580,9765,9767],{"className":9766},[583,3102],"\"created \"",[580,9769,9745],{"className":9770},[583,1029],[580,9772,9774],{"className":9773},[583,3102],"\" turtles\"",[587,9776],{},[580,9778,9706],{"className":9779},[583,1029],[580,9781,9783],{"className":9782},[583,1029],"created",[580,9785,4446],{"className":9786},[583,689],[580,9788,289],{"className":9789},[583,592],[587,9791],{},[580,9793,9706],{"className":9794},[583,1029],[580,9796,9783],{"className":9797},[583,1029],[580,9799,6722],{"className":9800},[583,689],[580,9802,289],{"className":9803},[583,592],[587,9805],{},[580,9807,9706],{"className":9808},[583,1029],[580,9810,9783],{"className":9811},[583,1029],[580,9813,9133],{"className":9814},[583,689],[580,9816,289],{"className":9817},[583,592],[22,9819,9820,9821,9823],{},"In the block, the variable ",[319,9822,9745],{}," holds the current value from the input list.",[22,9825,9826,9827,9834],{},"Here are some more examples of ",[319,9828,9830],{"className":9829},[322],[16,9831,6485],{"href":9659,"rel":9832,"className":9833,"dataDisplayText":6485,"target":331,"title":6485},[327],[329],":",[575,9836,9837],{},[319,9838,9839,627,9842,594,9845,594,9848,1031,9851,594,9854,594,9857,594,9860,979,9863,594,9866,4702,9869,9871,9875,9877,627,9880,594,9883,594,9886,594,9889,1031,9892,594,9896,594,9899,594,9902,979,9905,594,9908,979,9911,594,9914,9917,9918,9920],{},[580,9840,6485],{"className":9841},[583,972],[580,9843,729],{"className":9844},[583,689],[580,9846,4446],{"className":9847},[583,689],[580,9849,709],{"className":9850},[583,689],[580,9852,5137],{"className":9853},[583,1029],[580,9855,6178],{"className":9856},[583,592],[580,9858,536],{"className":9859},[583,972],[580,9861,289],{"className":9862},[583,592],[580,9864,2997],{"className":9865},[583,972],[580,9867,5137],{"className":9868},[583,1029],[587,9870],{},[580,9872,9874],{"className":9873},[583,584],";; turtles move forward 6 patches",[587,9876],{},[580,9878,6485],{"className":9879},[583,972],[580,9881,5798],{"className":9882},[583,639],[580,9884,5805],{"className":9885},[583,639],[580,9887,5798],{"className":9888},[583,639],[580,9890,5798],{"className":9891},[583,639],[580,9893,9895],{"className":9894},[583,1029],"should-move?",[580,9897,6178],{"className":9898},[583,592],[580,9900,536],{"className":9901},[583,972],[580,9903,289],{"className":9904},[583,592],[580,9906,1659],{"className":9907},[583,972],[580,9909,9895],{"className":9910},[583,1029],[580,9912,2997],{"className":9913},[583,972],[580,9915,729],{"className":9916},[583,689]," ] ] ]",[587,9919],{},[580,9921,9923],{"className":9922},[583,584],";; turtles move forward 3 patches",[22,9925,9926,9933,9934,9941,9942,9949],{},[319,9927,9929],{"className":9928},[322],[16,9930,6488],{"href":9668,"rel":9931,"className":9932,"dataDisplayText":6488,"target":331,"title":6488},[327],[329]," is similar to ",[319,9935,9937],{"className":9936},[322],[16,9938,6485],{"href":9659,"rel":9939,"className":9940,"dataDisplayText":6485,"target":331,"title":6485},[327],[329],", but it is a reporter. It takes an input list\nand a reporter name or reporter block. Note that unlike ",[319,9943,9945],{"className":9944},[322],[16,9946,6485],{"href":9659,"rel":9947,"className":9948,"dataDisplayText":6485,"target":331,"title":6485},[327],[329],", the\nreporter comes first, like this:",[575,9951,9952],{},[319,9953,9954,594,9957,594,9960,627,9964,594,9968,594,9972,641,9976,9978],{},[580,9955,1079],{"className":9956},[583,972],[580,9958,6488],{"className":9959},[583,592],[580,9961,9963],{"className":9962},[583,592],"round",[580,9965,9967],{"className":9966},[583,689],"1.2",[580,9969,9971],{"className":9970},[583,689],"2.2",[580,9973,9975],{"className":9974},[583,689],"2.7",[587,9977],{},[580,9979,9981],{"className":9980},[583,584],";; prints [1 2 3]",[22,9983,9984,9991,9992,9994],{},[319,9985,9987],{"className":9986},[322],[16,9988,6488],{"href":9668,"rel":9989,"className":9990,"dataDisplayText":6488,"target":331,"title":6488},[327],[329]," reports a list containing the results of applying the reporter to each\nitem in the input list. Again, use the variable named in the anonymous procedure\n(",[319,9993,5925],{}," in the examples below) to refer to the current item in the list.",[22,9996,9997,9998,9834],{},"Here are a couple more examples of ",[319,9999,10001],{"className":10000},[322],[16,10002,6488],{"href":9668,"rel":10003,"className":10004,"dataDisplayText":6488,"target":331,"title":6488},[327],[329],[575,10006,10007],{},[319,10008,10009,594,10012,979,10015,594,10018,594,10021,594,10024,594,10027,10030,10031,594,10034,594,10037,594,10040,594,10043,594,10046,641,10050,10052,10056,10058,594,10061,979,10064,594,10067,594,10070,594,10073,594,10076,10030,10079,594,10082,594,10085,641,10088,10090],{},[580,10010,1079],{"className":10011},[583,972],[580,10013,6488],{"className":10014},[583,592],[580,10016,5925],{"className":10017},[583,1029],[580,10019,6178],{"className":10020},[583,592],[580,10022,5925],{"className":10023},[583,1029],[580,10025,5745],{"className":10026},[583,592],[580,10028,690],{"className":10029},[583,689]," ] [",[580,10032,729],{"className":10033},[583,689],[580,10035,743],{"className":10036},[583,689],[580,10038,709],{"className":10039},[583,689],[580,10041,6722],{"className":10042},[583,689],[580,10044,4479],{"className":10045},[583,689],[580,10047,10049],{"className":10048},[583,689],"-10",[587,10051],{},[580,10053,10055],{"className":10054},[583,584],";; prints [false true false false true true]",[587,10057],{},[580,10059,1079],{"className":10060},[583,972],[580,10062,6488],{"className":10063},[583,592],[580,10065,5925],{"className":10066},[583,1029],[580,10068,6178],{"className":10069},[583,592],[580,10071,5925],{"className":10072},[583,1029],[580,10074,5632],{"className":10075},[583,592],[580,10077,5925],{"className":10078},[583,1029],[580,10080,729],{"className":10081},[583,689],[580,10083,4446],{"className":10084},[583,689],[580,10086,709],{"className":10087},[583,689],[587,10089],{},[580,10091,10093],{"className":10092},[583,584],";; prints [1 4 9]",[22,10095,10096,10097,418,10099,10101,10102,290,10110,1617,10118,301],{},"Besides ",[319,10098,6488],{},[319,10100,6485],{},", other primitives for processing whole lists in a\nconfigurable way include ",[319,10103,10105],{"className":10104},[322],[16,10106,6494],{"href":10107,"rel":10108,"className":10109,"dataDisplayText":6494,"target":331,"title":6494},"/dictionary#filter",[327],[329],[319,10111,10113],{"className":10112},[322],[16,10114,6491],{"href":10115,"rel":10116,"className":10117,"dataDisplayText":6491,"target":331,"title":6491},"/dictionary#reduce",[327],[329],[319,10119,10121],{"className":10120},[322],[16,10122,6500],{"href":10123,"rel":10124,"className":10125,"dataDisplayText":6500,"target":331,"title":6500},"/dictionary#sort-by",[327],[329],[22,10127,10128,10129,550,10137,10144],{},"These primitives aren’t always the solution for every situation in which you\nwant to operate on an entire list. In some situations, you may need to use some\nother technique such as a loop using ",[319,10130,10132],{"className":10131},[322],[16,10133,3932],{"href":10134,"rel":10135,"className":10136,"dataDisplayText":3932,"target":331,"title":3932},"/dictionary#repeat",[327],[329],[319,10138,10140],{"className":10139},[322],[16,10141,5163],{"href":6172,"rel":10142,"className":10143,"dataDisplayText":5163,"target":331,"title":5163},[327],[329],", or a recursive\nprocedure.",[22,10146,10147,10148,418,10150,10152,10153,10156,10157,10159],{},"The blocks of code we’re giving to ",[319,10149,6488],{},[319,10151,6485],{}," in these examples are\nactually ",[281,10154,10155],{},"anonymous procedures",". Anonymous procedures are explained in more\ndetail in ",[16,10158,158],{"href":157},", below.",[22,10161,10162],{},[281,10163,9272],{},[22,10165,10166],{},"Some commands and reporters involving lists and strings may take a varying\nnumber of inputs. In these cases, in order to pass them a number of inputs other\nthan their default, the primitive and its inputs must be surrounded by\nparentheses. Here are some examples:",[575,10168,10169],{},[319,10170,10171,594,10174,594,10177,594,10180,10183,10185,627,10188,594,10191,641,10194,10196,795,10199,594,10202,594,10205,594,10208,594,10211,805,10214,10216,627,10219,594,10222,594,10225,594,10228,641,10231,10233,795,10236,805,10239,10241,10244],{},[580,10172,1079],{"className":10173},[583,972],[580,10175,5598],{"className":10176},[583,592],[580,10178,729],{"className":10179},[583,689],[580,10181,4446],{"className":10182},[583,689],[587,10184],{},[580,10186,9706],{"className":10187},[583,1029],[580,10189,729],{"className":10190},[583,689],[580,10192,4446],{"className":10193},[583,689],[587,10195],{},[580,10197,1079],{"className":10198},[583,972],[580,10200,5598],{"className":10201},[583,592],[580,10203,729],{"className":10204},[583,689],[580,10206,4446],{"className":10207},[583,689],[580,10209,709],{"className":10210},[583,689],[580,10212,6722],{"className":10213},[583,689],[587,10215],{},[580,10217,9706],{"className":10218},[583,1029],[580,10220,729],{"className":10221},[583,689],[580,10223,4446],{"className":10224},[583,689],[580,10226,709],{"className":10227},[583,689],[580,10229,6722],{"className":10230},[583,689],[587,10232],{},[580,10234,1079],{"className":10235},[583,972],[580,10237,5598],{"className":10238},[583,592],[587,10240],{},[580,10242,9706],{"className":10243},[583,1029]," []",[22,10246,10247,10248,290,10255,290,10263,290,10270,290,10277,290,10284,2803,10291,301],{},"Note that each of these special primitives has a default number of inputs for\nwhich no parentheses are required. The primitives which have this capability are\n",[319,10249,10251],{"className":10250},[322],[16,10252,5598],{"href":5614,"rel":10253,"className":10254,"dataDisplayText":5598,"target":331,"title":5598},[327],[329],[319,10256,10258],{"className":10257},[322],[16,10259,9763],{"href":10260,"rel":10261,"className":10262,"dataDisplayText":9763,"target":331,"title":9763},"/dictionary#word",[327],[329],[319,10264,10266],{"className":10265},[322],[16,10267,9348],{"href":9345,"rel":10268,"className":10269,"dataDisplayText":9348,"target":331,"title":9348},[327],[329],[319,10271,10273],{"className":10272},[322],[16,10274,6488],{"href":9668,"rel":10275,"className":10276,"dataDisplayText":6488,"target":331,"title":6488},[327],[329],[319,10278,10280],{"className":10279},[322],[16,10281,6485],{"href":9659,"rel":10282,"className":10283,"dataDisplayText":6485,"target":331,"title":6485},[327],[329],[319,10285,10287],{"className":10286},[322],[16,10288,6120],{"href":6152,"rel":10289,"className":10290,"dataDisplayText":6120,"target":331,"title":6120},[327],[329],[319,10292,10294],{"className":10293},[322],[16,10295,6183],{"href":6152,"rel":10296,"className":10297,"dataDisplayText":6183,"target":331,"title":6183},[327],[329],[22,10299,10300],{},[281,10301,10302],{},"Lists of agents",[22,10304,10305],{},"Earlier, we said that agentsets are always in random order, a different random\norder every time. If you need your agents to do something in a fixed order, you\nneed to make a list of the agents instead.",[22,10307,10308,10309,418,10318,301],{},"There are two primitives that help you do this, ",[319,10310,10312],{"className":10311},[322],[16,10313,10317],{"href":10314,"rel":10315,"className":10316,"dataDisplayText":10317,"target":331,"title":10317},"/dictionary#sort",[327],[329],"sort",[319,10319,10321],{"className":10320},[322],[16,10322,6500],{"href":10123,"rel":10323,"className":10324,"dataDisplayText":6500,"target":331,"title":6500},[327],[329],[22,10326,10327,10328,418,10335,10342],{},"Both ",[319,10329,10331],{"className":10330},[322],[16,10332,10317],{"href":10314,"rel":10333,"className":10334,"dataDisplayText":10317,"target":331,"title":10317},[327],[329],[319,10336,10338],{"className":10337},[322],[16,10339,6500],{"href":10123,"rel":10340,"className":10341,"dataDisplayText":6500,"target":331,"title":6500},[327],[329]," can take an agentset as input. The result is\nalways a new list, containing the same agents as the agentset did, but in a\nparticular order.",[22,10344,8408,10345,10352,10353,10361],{},[319,10346,10348],{"className":10347},[322],[16,10349,10317],{"href":10314,"rel":10350,"className":10351,"dataDisplayText":10317,"target":331,"title":10317},[327],[329]," on an agentset of turtles, the result is a list of turtles\nsorted in ascending order by ",[319,10354,10356],{"className":10355},[322],[16,10357,3990],{"href":10358,"rel":10359,"className":10360,"dataDisplayText":3990,"target":331,"title":3990},"/dictionary#who",[327],[329]," number.",[22,10363,8408,10364,10371],{},[319,10365,10367],{"className":10366},[322],[16,10368,10317],{"href":10314,"rel":10369,"className":10370,"dataDisplayText":10317,"target":331,"title":10317},[327],[329]," on an agentset of patches, the result is a list of patches\nsorted left-to-right, top-to-bottom.",[22,10373,8408,10374,10381,10382,10389,10390,10397],{},[319,10375,10377],{"className":10376},[322],[16,10378,10317],{"href":10314,"rel":10379,"className":10380,"dataDisplayText":10317,"target":331,"title":10317},[327],[329]," on an agentset of links, the result is a list of links,\nsorted in ascending order first by ",[319,10383,10385],{"className":10384},[322],[16,10386,2739],{"href":2953,"rel":10387,"className":10388,"dataDisplayText":2739,"target":331,"title":2739},[327],[329]," then by ",[319,10391,10393],{"className":10392},[322],[16,10394,2742],{"href":2961,"rel":10395,"className":10396,"dataDisplayText":2742,"target":331,"title":2742},[327],[329]," any remaining ties\nare resolved by breed in the order they are declared in the Code tab.",[22,10399,10400,10401,10410,10411,10418,10419,301],{},"If you need descending order instead, you can combine ",[319,10402,10404],{"className":10403},[322],[16,10405,10409],{"href":10406,"rel":10407,"className":10408,"dataDisplayText":10409,"target":331,"title":10409},"/dictionary#reverse",[327],[329],"reverse"," with ",[319,10412,10414],{"className":10413},[322],[16,10415,10317],{"href":10314,"rel":10416,"className":10417,"dataDisplayText":10317,"target":331,"title":10317},[327],[329],",\nfor example ",[319,10420,10421,594,10424,594,10427],{},[580,10422,10409],{"className":10423},[583,592],[580,10425,10317],{"className":10426},[583,592],[580,10428,289],{"className":10429},[583,592],[22,10431,10432,10433,10440,10441,3298],{},"If you want your agents to be ordered by some other criterion than the standard\nones ",[319,10434,10436],{"className":10435},[322],[16,10437,10317],{"href":10314,"rel":10438,"className":10439,"dataDisplayText":10317,"target":331,"title":10317},[327],[329]," uses, you’ll need to use ",[319,10442,10444],{"className":10443},[322],[16,10445,6500],{"href":10123,"rel":10446,"className":10447,"dataDisplayText":6500,"target":331,"title":6500},[327],[329],[22,10449,10450],{},"Here’s an example:",[575,10452,10453],{},[319,10454,10455,6526,10458,594,10461,851,10464,627,10467,851,10471,594,10474,594,10477,627,10480,851,10483,594,10486,2189,10489],{},[580,10456,6500],{"className":10457},[583,592],[580,10459,16],{"className":10460},[583,1029],[580,10462,6612],{"className":10463},[583,1029],[580,10465,6178],{"className":10466},[583,592],[580,10468,10470],{"className":10469},[583,592],"size",[580,10472,855],{"className":10473},[583,592],[580,10475,16],{"className":10476},[583,1029],[580,10478,5745],{"className":10479},[583,592],[580,10481,10470],{"className":10482},[583,592],[580,10484,855],{"className":10485},[583,592],[580,10487,6612],{"className":10488},[583,1029],[580,10490,289],{"className":10491},[583,592],[22,10493,10494,10495,301],{},"This returns a list of turtles sorted in ascending order by their turtle\nvariable ",[319,10496,10498],{"className":10497},[322],[16,10499,10470],{"href":10500,"rel":10501,"className":10502,"dataDisplayText":10470,"target":331,"title":10470},"/dictionary#size",[327],[329],[22,10504,10505,10506,418,10513,10521,10522,9834],{},"There’s a common pattern to get a list of agents in a random order, using a\ncombination of ",[319,10507,10509],{"className":10508},[322],[16,10510,855],{"href":1054,"rel":10511,"className":10512,"dataDisplayText":855,"target":331,"title":855},[327],[329],[319,10514,10516],{"className":10515},[322],[16,10517,8539],{"href":10518,"rel":10519,"className":10520,"dataDisplayText":8539,"target":331,"title":8539},"/dictionary#self",[327],[329],", in the rare case that you cannot just use\n",[319,10523,10525],{"className":10524},[322],[16,10526,536],{"href":533,"rel":10527,"className":10528,"dataDisplayText":536,"target":331,"title":536},[327],[329],[575,10530,10531],{},[319,10532,846,10533,851,10536,594,10539],{},[580,10534,8539],{"className":10535},[583,592],[580,10537,855],{"className":10538},[583,592],[580,10540,10542],{"className":10541},[583,1029],"my-agentset",[22,10544,10545],{},[281,10546,10547],{},"Asking a list of agents",[22,10549,10550,10551,418,10558,10565],{},"Once you have a list of agents, you might want to ask them each to do something.\nTo do this, use the ",[319,10552,10554],{"className":10553},[322],[16,10555,6485],{"href":9659,"rel":10556,"className":10557,"dataDisplayText":6485,"target":331,"title":6485},[327],[329],[319,10559,10561],{"className":10560},[322],[16,10562,536],{"href":533,"rel":10563,"className":10564,"dataDisplayText":536,"target":331,"title":536},[327],[329]," commands in combination, like this:",[575,10567,10568],{},[319,10569,10570,594,10573,594,10576,979,10579,594,10583,10586,968,10588,594,10591,627,10594,3660,10596,10599,3706,10601,641],{},[580,10571,6485],{"className":10572},[583,972],[580,10574,10317],{"className":10575},[583,592],[580,10577,289],{"className":10578},[583,592],[580,10580,10582],{"className":10581},[583,1029],"the-turtle",[580,10584,6178],{"className":10585},[583,592],[587,10587],{},[580,10589,536],{"className":10590},[583,972],[580,10592,10582],{"className":10593},[583,1029],[587,10595],{},[580,10597,1673],{"className":10598},[583,1029],[587,10600],{},[587,10602],{},[22,10604,10605],{},"This will ask each turtle in ascending order by who number. Substitute “patches”\nfor “turtles” to ask patches in left-to-right, top-to-bottom order.",[22,10607,10608,10609,10616,10617,10624],{},"Note that you can’t use ",[319,10610,10612],{"className":10611},[322],[16,10613,536],{"href":533,"rel":10614,"className":10615,"dataDisplayText":536,"target":331,"title":536},[327],[329]," directly on a list of turtles. ",[319,10618,10620],{"className":10619},[322],[16,10621,536],{"href":533,"rel":10622,"className":10623,"dataDisplayText":536,"target":331,"title":536},[327],[329]," only\nworks with agentsets and single agents.",[22,10626,10627],{},[281,10628,10629],{},"Performance of lists",[22,10631,10632,10633,290,10635,290,10637,290,10640,290,10643,290,10646,1617,10648,301],{},"The data structure underlying NetLogo’s lists is a sophisticated tree-based data\nstructure on which most operations run in near-constant time. That includes\n",[319,10634,9479],{},[319,10636,9469],{},[319,10638,10639],{},"butfirst",[319,10641,10642],{},"butlast",[319,10644,10645],{},"length",[319,10647,9582],{},[319,10649,9431],{},[22,10651,10652,10653,10655],{},"One exception to the fast-performance rule is that concatenating two lists with\n",[319,10654,9348],{}," requires traversing and copying the whole second list. (This may be\nfixed in a future version.)",[22,10657,10658],{},"Technically, “near-constant time” is actually logarithmic time, proportional to\nthe depth of the underlying tree, but these trees have large nodes and a high\nbranching factor, so they are never more than a few levels deep. This means that\nchanges can be made in at most a few steps. The trees are immutable, but they\nshare structure with each other, so the whole tree doesn’t need to be copied to\nmake a changed version.",[22,10660,10661,10662,10668],{},"The actual data structure used is the immutable Vector class from the Scala\ncollections library. These are 32-wide\n",[16,10663,10667],{"href":10664,"rel":10665},"https://en.wikipedia.org/wiki/Hash_array_mapped_trie",[10666],"nofollow","hash array mapped tries",",\nas implemented by Tiark Rompf, based in part on work by Phil Bagwell and Rich\nHickey.",[262,10670,10673],{"id":10671,"className":10672},"strings",[14],[16,10674,222],{"className":10675,"href":221},[19],[22,10677,10678],{},"Strings may contain any Unicode characters.",[22,10680,10681],{},"To input a constant string in NetLogo, surround it with double quotes.",[22,10683,10684,10685,301],{},"The empty string is written by putting nothing between the quotes, like this:\n",[319,10686,10687],{},"\"\"",[22,10689,10690],{},"Most of the list primitives work on strings as well:",[575,10692,10693],{},[319,10694,10695,594,10698,594,10702,594,10705,10709,10711,594,10714,594,10717,594,10720,10724,10726,594,10730,594,10733,594,10736,10739,10741,594,10744,594,10747,594,10750,10753,10755,594,10759,594,10762,594,10765,10769,10771,594,10774,594,10777,594,10780,594,10783,10787,10789,594,10793,594,10796,594,10799,10803,10805,594,10808,594,10811,594,10814,10817,10819,594,10822,594,10825,594,10828,594,10831,10834,10836,594,10839,594,10843,594,10846,594,10849,10852,10854,594,10857,594,10861,594,10864,594,10867,10870,10872,594,10876,594,10879,594,10882,594,10885,10888,10890,594,10893,594,10896,594,10899,594,10902,10905,10907,594,10910,594,10913,594,10916,594,10919,10922,10924,594,10928,594,10931,594,10934,594,10937,10941,10943,594,10946,594,10949,594,10953,594,10956,10959,10961,594,10964,594,10967,594,10970,594,10974,594,10977,10981,10983,594,10986,594,10989,594,10992],{},[580,10696,9560],{"className":10697},[583,592],[580,10699,10701],{"className":10700},[583,3102],"\"string\"",[580,10703,9706],{"className":10704},[583,1029],[580,10706,10708],{"className":10707},[583,3102],"\"tring\"",[587,10710],{},[580,10712,9518],{"className":10713},[583,592],[580,10715,10701],{"className":10716},[583,3102],[580,10718,9706],{"className":10719},[583,1029],[580,10721,10723],{"className":10722},[583,3102],"\"strin\"",[587,10725],{},[580,10727,10729],{"className":10728},[583,592],"empty?",[580,10731,10687],{"className":10732},[583,3102],[580,10734,9706],{"className":10735},[583,1029],[580,10737,5798],{"className":10738},[583,639],[587,10740],{},[580,10742,10729],{"className":10743},[583,592],[580,10745,10701],{"className":10746},[583,3102],[580,10748,9706],{"className":10749},[583,1029],[580,10751,5805],{"className":10752},[583,639],[587,10754],{},[580,10756,10758],{"className":10757},[583,592],"first",[580,10760,10701],{"className":10761},[583,3102],[580,10763,9706],{"className":10764},[583,1029],[580,10766,10768],{"className":10767},[583,3102],"\"s\"",[587,10770],{},[580,10772,9582],{"className":10773},[583,592],[580,10775,4446],{"className":10776},[583,689],[580,10778,10701],{"className":10779},[583,3102],[580,10781,9706],{"className":10782},[583,1029],[580,10784,10786],{"className":10785},[583,3102],"\"r\"",[587,10788],{},[580,10790,10792],{"className":10791},[583,592],"last",[580,10794,10701],{"className":10795},[583,3102],[580,10797,9706],{"className":10798},[583,1029],[580,10800,10802],{"className":10801},[583,3102],"\"g\"",[587,10804],{},[580,10806,10645],{"className":10807},[583,592],[580,10809,10701],{"className":10810},[583,3102],[580,10812,9706],{"className":10813},[583,1029],[580,10815,9133],{"className":10816},[583,689],[587,10818],{},[580,10820,1185],{"className":10821},[583,592],[580,10823,10768],{"className":10824},[583,3102],[580,10826,10701],{"className":10827},[583,3102],[580,10829,9706],{"className":10830},[583,1029],[580,10832,5798],{"className":10833},[583,639],[587,10835],{},[580,10837,1185],{"className":10838},[583,592],[580,10840,10842],{"className":10841},[583,3102],"\"rin\"",[580,10844,10701],{"className":10845},[583,3102],[580,10847,9706],{"className":10848},[583,1029],[580,10850,5798],{"className":10851},[583,639],[587,10853],{},[580,10855,1185],{"className":10856},[583,592],[580,10858,10860],{"className":10859},[583,3102],"\"ron\"",[580,10862,10701],{"className":10863},[583,3102],[580,10865,9706],{"className":10866},[583,1029],[580,10868,5805],{"className":10869},[583,639],[587,10871],{},[580,10873,10875],{"className":10874},[583,592],"position",[580,10877,10768],{"className":10878},[583,3102],[580,10880,10701],{"className":10881},[583,3102],[580,10883,9706],{"className":10884},[583,1029],[580,10886,690],{"className":10887},[583,689],[587,10889],{},[580,10891,10875],{"className":10892},[583,592],[580,10894,10842],{"className":10895},[583,3102],[580,10897,10701],{"className":10898},[583,3102],[580,10900,9706],{"className":10901},[583,1029],[580,10903,4446],{"className":10904},[583,689],[587,10906],{},[580,10908,10875],{"className":10909},[583,592],[580,10911,10860],{"className":10912},[583,3102],[580,10914,10701],{"className":10915},[583,3102],[580,10917,9706],{"className":10918},[583,1029],[580,10920,5805],{"className":10921},[583,639],[587,10923],{},[580,10925,10927],{"className":10926},[583,592],"remove",[580,10929,10786],{"className":10930},[583,3102],[580,10932,10701],{"className":10933},[583,3102],[580,10935,9706],{"className":10936},[583,1029],[580,10938,10940],{"className":10939},[583,3102],"\"sting\"",[587,10942],{},[580,10944,10927],{"className":10945},[583,592],[580,10947,10768],{"className":10948},[583,3102],[580,10950,10952],{"className":10951},[583,3102],"\"strings\"",[580,10954,9706],{"className":10955},[583,1029],[580,10957,10708],{"className":10958},[583,3102],[587,10960],{},[580,10962,9431],{"className":10963},[583,592],[580,10965,709],{"className":10966},[583,689],[580,10968,10701],{"className":10969},[583,3102],[580,10971,10973],{"className":10972},[583,3102],"\"o\"",[580,10975,9706],{"className":10976},[583,1029],[580,10978,10980],{"className":10979},[583,3102],"\"strong\"",[587,10982],{},[580,10984,10409],{"className":10985},[583,592],[580,10987,10701],{"className":10988},[583,3102],[580,10990,9706],{"className":10991},[583,1029],[580,10993,10995],{"className":10994},[583,3102],"\"gnirts\"",[22,10997,10998,10999,403,11007,1617,11016,9834],{},"A few primitives are specific to strings, such as ",[319,11000,11002],{"className":11001},[322],[16,11003,11006],{"href":1623,"rel":11004,"className":11005,"dataDisplayText":11006,"target":331,"title":11006},[327],[329],"is-string?",[319,11008,11010],{"className":11009},[322],[16,11011,11015],{"href":11012,"rel":11013,"className":11014,"dataDisplayText":11015,"target":331,"title":11015},"/dictionary#subliststring",[327],[329],"substring",[319,11017,11019],{"className":11018},[322],[16,11020,9763],{"href":10260,"rel":11021,"className":11022,"dataDisplayText":9763,"target":331,"title":9763},[327],[329],[575,11024,11025],{},[319,11026,11027,594,11030,594,11033,594,11036,11039,11041,594,11044,594,11048,594,11051,11054,11056,594,11059,594,11062,594,11065,594,11068,594,11071,11074,11076,594,11079,594,11083,594,11087,594,11090],{},[580,11028,11006],{"className":11029},[583,592],[580,11031,10701],{"className":11032},[583,3102],[580,11034,9706],{"className":11035},[583,1029],[580,11037,5798],{"className":11038},[583,639],[587,11040],{},[580,11042,11006],{"className":11043},[583,592],[580,11045,11047],{"className":11046},[583,689],"37",[580,11049,9706],{"className":11050},[583,1029],[580,11052,5805],{"className":11053},[583,639],[587,11055],{},[580,11057,11015],{"className":11058},[583,592],[580,11060,10701],{"className":11061},[583,3102],[580,11063,4446],{"className":11064},[583,689],[580,11066,1256],{"className":11067},[583,689],[580,11069,9706],{"className":11070},[583,1029],[580,11072,10842],{"className":11073},[583,3102],[587,11075],{},[580,11077,9763],{"className":11078},[583,592],[580,11080,11082],{"className":11081},[583,3102],"\"tur\"",[580,11084,11086],{"className":11085},[583,3102],"\"tle\"",[580,11088,9706],{"className":11089},[583,1029],[580,11091,11093],{"className":11092},[583,3102],"\"turtle\"",[22,11095,11096],{},"Strings can be compared using the =, !=, \u003C, >, \u003C=, and >= operators.",[22,11098,11099],{},"If you need to embed a special character in a string, use the following escape\nsequences:",[44,11101,11102,11108,11114,11120],{},[47,11103,11104,11107],{},[319,11105,11106],{},"\\n"," = newline",[47,11109,11110,11113],{},[319,11111,11112],{},"\\t"," = tab",[47,11115,11116,11119],{},[319,11117,11118],{},"\\\""," = double quote",[47,11121,11122,11125],{},[319,11123,11124],{},"\\\\"," = backslash",[262,11127,11130],{"id":11128,"className":11129},"mathematics",[14],[16,11131,228],{"className":11132,"href":227},[19],[270,11134,11137],{"id":11135,"className":11136},"math",[14],[16,11138,236],{"className":11139,"href":235},[19],[22,11141,11142],{},"All numbers in NetLogo are stored internally as double precision floating point\nnumbers, as defined in the IEEE 754 standard. They are 64 bit numbers consisting\nof one sign bit, an 11-bit exponent, and a 52-bit mantissa. See the IEEE 754\nstandard for details.",[22,11144,11145],{},"An “integer” in NetLogo is simply a number that happens to have no fractional\npart. No distinction is made between 3 and 3.0; they are the same number. (This\nis the same as how most people use numbers in everyday contexts, but different\nfrom some programming languages. Some languages treat integers and floating\npoint numbers as distinct types.)",[22,11147,11148],{},"Integers are always printed by NetLogo without the trailing “.0”:",[575,11150,11151],{},[319,11152,11153,594,11156,594,11160,594,11163,11166,11168,594,11172],{},[580,11154,1079],{"className":11155},[583,972],[580,11157,11159],{"className":11158},[583,689],"1.5",[580,11161,2491],{"className":11162},[583,592],[580,11164,11159],{"className":11165},[583,689],[587,11167],{},[580,11169,11171],{"className":11170},[583,1029],"observer:",[580,11173,709],{"className":11174},[583,689],[22,11176,11177,11178,11187],{},"If a number with a fractional part is supplied in a context where an integer is\nexpected, the fractional part is simply discarded. So for example, ",[319,11179,11180,594,11183],{},[580,11181,4366],{"className":11182},[583,972],[580,11184,11186],{"className":11185},[583,689],"3.5","\ncreates three turtles; the extra 0.5 is ignored.",[22,11189,11190],{},"The range of integers is +/-9007199254740992 (2^53, about 9 quadrillion).\nCalculations that exceed this range will not cause runtime errors, but precision\nwill be lost when the least significant (binary) digits are rounded off in order\nfit the number into 64 bits. With very large numbers, this rounding can result\nin imprecise answers which may be surprising:",[575,11192,11193],{},[319,11194,11195,594,11198,594,11201,594,11204,594,11208,594,11211,594,11214,594,11217,594,11220,594,11223,11226,11228,594,11231],{},[580,11196,1079],{"className":11197},[583,972],[580,11199,4446],{"className":11200},[583,689],[580,11202,5725],{"className":11203},[583,592],[580,11205,11207],{"className":11206},[583,689],"60",[580,11209,2491],{"className":11210},[583,592],[580,11212,729],{"className":11213},[583,689],[580,11215,635],{"className":11216},[583,592],[580,11218,4446],{"className":11219},[583,689],[580,11221,5725],{"className":11222},[583,592],[580,11224,11207],{"className":11225},[583,689],[587,11227],{},[580,11229,9706],{"className":11230},[583,1029],[580,11232,5798],{"className":11233},[583,639],[22,11235,11236],{},"Calculations with smaller numbers can also produce surprising results if they\ninvolve fractional quantities, since not all fractions can be precisely\nrepresented and roundoff may occur. For example:",[575,11238,11239],{},[319,11240,11241,594,11244,594,11247,594,11250,594,11253,594,11256,594,11259,594,11262,594,11265,594,11268,594,11271,594,11274,594,11277,594,11280,594,11283,594,11286,594,11289,594,11292,594,11295,594,11298,594,11301,594,11304,594,11307,594,11310,11313,11315,594,11318,11322,11324,594,11327,594,11330,594,11333,594,11336,594,11339,594,11342,594,11345,594,11348,594,11351,594,11354,594,11357,594,11360,594,11363,594,11366,594,11369,594,11372,594,11375,594,11378,594,11381,594,11384,594,11387,594,11390,594,11393,594,11396,594,11399,594,11402,594,11405,594,11408,594,11411,594,11414,594,11417,594,11420,594,11423,594,11426,594,11429,11432,11434,594,11437],{},[580,11242,1079],{"className":11243},[583,972],[580,11245,729],{"className":11246},[583,689],[580,11248,3956],{"className":11249},[583,592],[580,11251,9133],{"className":11252},[583,689],[580,11254,2491],{"className":11255},[583,592],[580,11257,729],{"className":11258},[583,689],[580,11260,3956],{"className":11261},[583,592],[580,11263,9133],{"className":11264},[583,689],[580,11266,2491],{"className":11267},[583,592],[580,11269,729],{"className":11270},[583,689],[580,11272,3956],{"className":11273},[583,592],[580,11275,9133],{"className":11276},[583,689],[580,11278,2491],{"className":11279},[583,592],[580,11281,729],{"className":11282},[583,689],[580,11284,3956],{"className":11285},[583,592],[580,11287,9133],{"className":11288},[583,689],[580,11290,2491],{"className":11291},[583,592],[580,11293,729],{"className":11294},[583,689],[580,11296,3956],{"className":11297},[583,592],[580,11299,9133],{"className":11300},[583,689],[580,11302,2491],{"className":11303},[583,592],[580,11305,729],{"className":11306},[583,689],[580,11308,3956],{"className":11309},[583,592],[580,11311,9133],{"className":11312},[583,689],[587,11314],{},[580,11316,9706],{"className":11317},[583,1029],[580,11319,11321],{"className":11320},[583,689],"0.9999999999999999",[587,11323],{},[580,11325,1079],{"className":11326},[583,972],[580,11328,729],{"className":11329},[583,689],[580,11331,3956],{"className":11332},[583,592],[580,11334,9638],{"className":11335},[583,689],[580,11337,2491],{"className":11338},[583,592],[580,11340,729],{"className":11341},[583,689],[580,11343,3956],{"className":11344},[583,592],[580,11346,9638],{"className":11347},[583,689],[580,11349,2491],{"className":11350},[583,592],[580,11352,729],{"className":11353},[583,689],[580,11355,3956],{"className":11356},[583,592],[580,11358,9638],{"className":11359},[583,689],[580,11361,2491],{"className":11362},[583,592],[580,11364,729],{"className":11365},[583,689],[580,11367,3956],{"className":11368},[583,592],[580,11370,9638],{"className":11371},[583,689],[580,11373,2491],{"className":11374},[583,592],[580,11376,729],{"className":11377},[583,689],[580,11379,3956],{"className":11380},[583,592],[580,11382,9638],{"className":11383},[583,689],[580,11385,2491],{"className":11386},[583,592],[580,11388,729],{"className":11389},[583,689],[580,11391,3956],{"className":11392},[583,592],[580,11394,9638],{"className":11395},[583,689],[580,11397,2491],{"className":11398},[583,592],[580,11400,729],{"className":11401},[583,689],[580,11403,3956],{"className":11404},[583,592],[580,11406,9638],{"className":11407},[583,689],[580,11409,2491],{"className":11410},[583,592],[580,11412,729],{"className":11413},[583,689],[580,11415,3956],{"className":11416},[583,592],[580,11418,9638],{"className":11419},[583,689],[580,11421,2491],{"className":11422},[583,592],[580,11424,729],{"className":11425},[583,689],[580,11427,3956],{"className":11428},[583,592],[580,11430,9638],{"className":11431},[583,689],[587,11433],{},[580,11435,9706],{"className":11436},[583,1029],[580,11438,11440],{"className":11439},[583,689],"1.0000000000000002",[22,11442,11443],{},"Any operation which produces the special quantities “infinity” or “not a number”\nwill cause a runtime error.",[22,11445,11446],{},[281,11447,11448],{},"Scientific notation",[22,11450,11451],{},"Very large or very small floating point numbers are displayed by NetLogo using\n“scientific notation”. Examples:",[575,11453,11454],{},[319,11455,11456,594,11459,11463,11465,594,11468,11472,11474,594,11477,11481,11483,594,11486],{},[580,11457,1079],{"className":11458},[583,972],[580,11460,11462],{"className":11461},[583,689],"0.000000000001",[587,11464],{},[580,11466,9706],{"className":11467},[583,1029],[580,11469,11471],{"className":11470},[583,689],"1.0E-12",[587,11473],{},[580,11475,1079],{"className":11476},[583,972],[580,11478,11480],{"className":11479},[583,689],"50000000000000000000",[587,11482],{},[580,11484,9706],{"className":11485},[583,1029],[580,11487,11489],{"className":11488},[583,689],"5.0E19",[22,11491,11492],{},"Numbers in scientific notation are distinguished by the presence of the letter E\n(for “exponent”). It means “times ten to the power of”, so for example, 1.0E-12\nmeans 1.0 times 10 to the -12 power:",[575,11494,11495],{},[319,11496,11497,594,11500,594,11504,594,11507,594,11510,594,11513,11517,11519,594,11522],{},[580,11498,1079],{"className":11499},[583,972],[580,11501,11503],{"className":11502},[583,689],"1.0",[580,11505,5632],{"className":11506},[583,592],[580,11508,1322],{"className":11509},[583,689],[580,11511,5725],{"className":11512},[583,592],[580,11514,11516],{"className":11515},[583,689],"-12",[587,11518],{},[580,11520,9706],{"className":11521},[583,1029],[580,11523,11471],{"className":11524},[583,689],[22,11526,11527],{},"You can also use scientific notation yourself in NetLogo code:",[575,11529,11530],{},[319,11531,11532,594,11535,11539,11541,594,11544,11548,11550,594,11553,11557,11559,594,11562,11566,11568,594,11571,11575,11577,594,11580,11583,11585,594,11588,11592,11594,594,11597,11600,11602,594,11605,11609,11611,594,11614,11618,11620,594,11623,11627,11629,594,11632],{},[580,11533,1079],{"className":11534},[583,972],[580,11536,11538],{"className":11537},[583,689],"3.0E6",[587,11540],{},[580,11542,9706],{"className":11543},[583,1029],[580,11545,11547],{"className":11546},[583,689],"3000000",[587,11549],{},[580,11551,1079],{"className":11552},[583,972],[580,11554,11556],{"className":11555},[583,689],"8.123456789E6",[587,11558],{},[580,11560,9706],{"className":11561},[583,1029],[580,11563,11565],{"className":11564},[583,689],"8123456.789",[587,11567],{},[580,11569,1079],{"className":11570},[583,972],[580,11572,11574],{"className":11573},[583,689],"8.123456789E7",[587,11576],{},[580,11578,9706],{"className":11579},[583,1029],[580,11581,11574],{"className":11582},[583,689],[587,11584],{},[580,11586,1079],{"className":11587},[583,972],[580,11589,11591],{"className":11590},[583,689],"3.0E16",[587,11593],{},[580,11595,9706],{"className":11596},[583,1029],[580,11598,11591],{"className":11599},[583,689],[587,11601],{},[580,11603,1079],{"className":11604},[583,972],[580,11606,11608],{"className":11607},[583,689],"8.0E-3",[587,11610],{},[580,11612,9706],{"className":11613},[583,1029],[580,11615,11617],{"className":11616},[583,689],"0.0080",[587,11619],{},[580,11621,1079],{"className":11622},[583,972],[580,11624,11626],{"className":11625},[583,689],"8.0E-4",[587,11628],{},[580,11630,9706],{"className":11631},[583,1029],[580,11633,11626],{"className":11634},[583,689],[22,11636,11637],{},"These examples show that numbers with fractional parts are displayed using\nscientific notation if the exponent is less than -3 or greater than 6. Numbers\noutside of NetLogo’s integer range of -9007199254740992 to 9007199254740992\n(+/-2^53) are also always shown in scientific notation:",[575,11639,11640],{},[319,11641,11642,594,11645,594,11648,594,11651,11654,11656,594,11659],{},[580,11643,1079],{"className":11644},[583,972],[580,11646,4446],{"className":11647},[583,689],[580,11649,5725],{"className":11650},[583,592],[580,11652,11207],{"className":11653},[583,689],[587,11655],{},[580,11657,9706],{"className":11658},[583,1029],[580,11660,11662],{"className":11661},[583,689],"1.15292150460684698E18",[22,11664,11665],{},"When entering a number, the letter E may be either upper or lowercase. When\nprinting a number, NetLogo always uses an uppercase E:",[575,11667,11668],{},[319,11669,11670,594,11673,11677,11679,594,11682],{},[580,11671,1079],{"className":11672},[583,972],[580,11674,11676],{"className":11675},[583,689],"4.5e20",[587,11678],{},[580,11680,9706],{"className":11681},[583,1029],[580,11683,11685],{"className":11684},[583,689],"4.5E20",[22,11687,11688],{},[281,11689,11690],{},"Floating point accuracy",[22,11692,11693],{},"Because numbers in NetLogo are subject to the limitations of how floating point\nnumbers are represented in binary, you may get answers that are slightly\ninaccurate. For example:",[575,11695,11696],{},[319,11697,11698,594,11701,594,11705,594,11708,594,11711,594,11714,11717,11719,594,11722,11726,11728,594,11731,594,11735,11738,11740,594,11743],{},[580,11699,1079],{"className":11700},[583,972],[580,11702,11704],{"className":11703},[583,689],"0.1",[580,11706,2491],{"className":11707},[583,592],[580,11709,11704],{"className":11710},[583,689],[580,11712,2491],{"className":11713},[583,592],[580,11715,11704],{"className":11716},[583,689],[587,11718],{},[580,11720,9706],{"className":11721},[583,1029],[580,11723,11725],{"className":11724},[583,689],"0.30000000000000004",[587,11727],{},[580,11729,1079],{"className":11730},[583,972],[580,11732,11734],{"className":11733},[583,592],"cos",[580,11736,4459],{"className":11737},[583,689],[587,11739],{},[580,11741,9706],{"className":11742},[583,1029],[580,11744,11746],{"className":11745},[583,689],"6.123233995736766E-17",[22,11748,11749],{},"This is an inherent issue with floating point arithmetic; it occurs in all\nprogramming languages that use floating point numbers.",[22,11751,11752],{},"If you are dealing with fixed precision quantities, for example dollars and\ncents, a common technique is to use only integers (cents) internally, then\ndivide by 100 to get a result in dollars for display.",[22,11754,11755,11756,11773,11774,301],{},"If you must use floating point numbers, then in some situations you may need to\nreplace a straightforward equality test such as ",[319,11757,11758,594,11761,594,11764,594,11767,979,11770,986],{},[580,11759,1659],{"className":11760},[583,972],[580,11762,5925],{"className":11763},[583,1029],[580,11765,635],{"className":11766},[583,592],[580,11768,729],{"className":11769},[583,689],[580,11771,1673],{"className":11772},[583,1029]," with a test\nthat tolerates slight imprecision, for example\n",[319,11775,11776,594,11779,795,11782,594,11785,594,11788,790,11791,594,11794,979,11798,986],{},[580,11777,1659],{"className":11778},[583,972],[580,11780,6682],{"className":11781},[583,592],[580,11783,5925],{"className":11784},[583,1029],[580,11786,4071],{"className":11787},[583,592],[580,11789,729],{"className":11790},[583,689],[580,11792,5745],{"className":11793},[583,592],[580,11795,11797],{"className":11796},[583,689],"0.0001",[580,11799,1673],{"className":11800},[583,1029],[22,11802,11803,11804,11813],{},"Also, the ",[319,11805,11807],{"className":11806},[322],[16,11808,11812],{"href":11809,"rel":11810,"className":11811,"dataDisplayText":11812,"target":331,"title":11812},"/dictionary#precision",[327],[329],"precision"," primitive is handy for rounding off numbers for display\npurposes. NetLogo monitors round the numbers they display to a configurable\nnumber of decimal places, too.",[270,11815,11818],{"id":11816,"className":11817},"random-numbers",[14],[16,11819,242],{"className":11820,"href":241},[19],[22,11822,11823],{},"The random numbers used by NetLogo are what is called “pseudo-random”. (This is\ntypical in computer programming.) That means they appear random, but are in fact\ngenerated by a deterministic process. “Deterministic” means that you get the\nsame results every time, if you start with the same random “seed”. We’ll explain\nin a minute what we mean by “seed”.",[22,11825,11826],{},"In the context of scientific modeling, pseudo-random numbers are actually\ndesirable. That’s because it’s important that a scientific experiment be\nreproducible — so anyone can try it themselves and get the same result that you\ngot. Since NetLogo uses pseudo-random numbers, the “experiments” that you do\nwith it can be reproduced by others.",[22,11828,11829,11830,11839],{},"Here’s how it works. NetLogo’s random number generator can be started with a\ncertain seed value, which must be an integer in the range -2147483648\nto 2147483647. Once the generator has been “seeded” with the ",[319,11831,11833],{"className":11832},[322],[16,11834,11838],{"href":11835,"rel":11836,"className":11837,"dataDisplayText":11838,"target":331,"title":11838},"/dictionary#random-seed",[327],[329],"random-seed","\ncommand, it always generates the same sequence of random numbers from then on.\nFor example, if you run these commands:",[575,11841,11842],{},[319,11843,11844,594,11847,11851,11853,594,11856,594,11859,11862,11864,594,11867,594,11870,11873,11875,594,11878,594,11881],{},[580,11845,11838],{"className":11846},[583,972],[580,11848,11850],{"className":11849},[583,689],"137",[587,11852],{},[580,11854,1079],{"className":11855},[583,972],[580,11857,1834],{"className":11858},[583,592],[580,11860,4193],{"className":11861},[583,689],[587,11863],{},[580,11865,1079],{"className":11866},[583,972],[580,11868,1834],{"className":11869},[583,592],[580,11871,4193],{"className":11872},[583,689],[587,11874],{},[580,11876,1079],{"className":11877},[583,972],[580,11879,1834],{"className":11880},[583,592],[580,11882,4193],{"className":11883},[583,689],[22,11885,11886],{},"You will always get the numbers 79, 89, and 61 in that order.",[22,11888,11889],{},"Note, however, that you’re only guaranteed to get those same numbers if you’re\nusing the same version of NetLogo. Sometimes when we make a new version of\nNetLogo the random number generator changes. (Presently, we use a generator\nknown as the Mersenne Twister.)",[22,11891,11892,11893,11902,11903,11910],{},"To create a number suitable for seeding the random number generator, use the\n",[319,11894,11896],{"className":11895},[322],[16,11897,11901],{"href":11898,"rel":11899,"className":11900,"dataDisplayText":11901,"target":331,"title":11901},"/dictionary#new-seed",[327],[329],"new-seed"," reporter. ",[319,11904,11906],{"className":11905},[322],[16,11907,11901],{"href":11898,"rel":11908,"className":11909,"dataDisplayText":11901,"target":331,"title":11901},[327],[329]," creates a seed, evenly distributed over the\nspace of possible seeds, based on the current date and time. It never reports\nthe same seed twice in a row.",[1449,11912,11913],{},[22,11914,11915,11917],{},[281,11916,1455],{}," Random Seed Example",[22,11919,11920],{},"If you don’t set the random seed yourself, NetLogo sets it to a value based on\nthe current date and time. There is no way to find out what random seed it\nchose, so if you want your model run to be reproducible, you must set the random\nseed yourself ahead of time.",[22,11922,11923,11924,418,11931,11940,11941,11948,11949,11958],{},"The NetLogo primitives with “random” in their names (random, random-float, and\nso on) aren’t the only ones that use pseudo-random numbers. Many other\noperations also make random choices. For example, agentsets are always in random\norder, ",[319,11925,11927],{"className":11926},[322],[16,11928,943],{"href":940,"rel":11929,"className":11930,"dataDisplayText":943,"target":331,"title":943},[327],[329],[319,11932,11934],{"className":11933},[322],[16,11935,11939],{"href":11936,"rel":11937,"className":11938,"dataDisplayText":11939,"target":331,"title":11939},"/dictionary#n-of",[327],[329],"n-of"," choose agents randomly, the ",[319,11942,11944],{"className":11943},[322],[16,11945,962],{"href":959,"rel":11946,"className":11947,"dataDisplayText":962,"target":331,"title":962},[327],[329]," command\ncreates turtles with random colors and headings, and the ",[319,11950,11952],{"className":11951},[322],[16,11953,11957],{"href":11954,"rel":11955,"className":11956,"dataDisplayText":11957,"target":331,"title":11957},"/dictionary#downhill",[327],[329],"downhill"," reporter\nchooses a random patch when there’s a tie. All of these random choices are\ngoverned by the random seed as well, so model runs can be reproducible.",[22,11960,11961,11962,418,11969,11978,11979,290,11988,403,11996,1617,12004,301],{},"In addition to the uniformly distributed random integers and floating point\nnumbers generated by ",[319,11963,11965],{"className":11964},[322],[16,11966,1834],{"href":3807,"rel":11967,"className":11968,"dataDisplayText":1834,"target":331,"title":1834},[327],[329],[319,11970,11972],{"className":11971},[322],[16,11973,11977],{"href":11974,"rel":11975,"className":11976,"dataDisplayText":11977,"target":331,"title":11977},"/dictionary#random-float",[327],[329],"random-float",", NetLogo also offers\nseveral other random distributions. See the dictionary entries for\n",[319,11980,11982],{"className":11981},[322],[16,11983,11987],{"href":11984,"rel":11985,"className":11986,"dataDisplayText":11987,"target":331,"title":11987},"/dictionary#random-reporters",[327],[329],"random-normal",[319,11989,11991],{"className":11990},[322],[16,11992,11995],{"href":11984,"rel":11993,"className":11994,"dataDisplayText":11995,"target":331,"title":11995},[327],[329],"random-poisson",[319,11997,11999],{"className":11998},[322],[16,12000,12003],{"href":11984,"rel":12001,"className":12002,"dataDisplayText":12003,"target":331,"title":12003},[327],[329],"random-exponential",[319,12005,12007],{"className":12006},[322],[16,12008,12011],{"href":11984,"rel":12009,"className":12010,"dataDisplayText":12011,"target":331,"title":12011},[327],[329],"random-gamma",[34,12013,12016],{"id":12014,"className":12015},"auxiliary-generator",[14],[16,12017,12020],{"className":12018,"href":12019},[19],"#auxiliary-generator","Auxiliary generator",[22,12022,12023],{},"Code run by buttons or from the command center uses the main random number\ngenerator.",[22,12025,12026],{},"Code in monitors uses an auxiliary random generator, so even if a monitor does a\ncalculation that uses random numbers, the outcome of the model is not affected.\nThe same is true of code in sliders.",[34,12028,12031],{"id":12029,"className":12030},"local-randomness",[14],[16,12032,12035],{"className":12033,"href":12034},[19],"#local-randomness","Local randomness",[22,12037,12038,12039,12048],{},"You may want to explicitly specify that a section of code does not affect the\nstate of the main random generator, so the outcome of the model is not affected.\nThe ",[319,12040,12042],{"className":12041},[322],[16,12043,12047],{"href":12044,"rel":12045,"className":12046,"dataDisplayText":12047,"target":331,"title":12047},"/dictionary#with-local-randomness",[327],[329],"with-local-randomness"," command is provided for this purpose. See its\nentry in the NetLogo Dictionary for more information.",[34,12050,12053],{"id":12051,"className":12052},"saving-a-random-seed-for-a-run",[14],[16,12054,12057],{"className":12055,"href":12056},[19],"#saving-a-random-seed-for-a-run","Saving a Random Seed for a Run",[22,12059,12060],{},"If you want to know what the random seed used by a “run” of a model was, you can\nadd some simple code to track it. Then if an interesting behavior emerges or an\nintermittent error condition occurs, you have a way to reproduce the run by\ngrabbing the seed and re-using it.",[22,12062,12063,12064,12067,12068,12075,12076,12083,12084,12086,12087,12094],{},"Add a ",[319,12065,12066],{},"starting-seed"," global variable, then use ",[319,12069,12071],{"className":12070},[322],[16,12072,11901],{"href":11898,"rel":12073,"className":12074,"dataDisplayText":11901,"target":331,"title":11901},[327],[329]," to give it a value\nafter you use ",[319,12077,12079],{"className":12078},[322],[16,12080,1243],{"href":3248,"rel":12081,"className":12082,"dataDisplayText":1243,"target":331,"title":1243},[327],[329]," in your ",[319,12085,1793],{}," procedure. Then give that value to\nthe ",[319,12088,12090],{"className":12089},[322],[16,12091,11838],{"href":11835,"rel":12092,"className":12093,"dataDisplayText":11838,"target":331,"title":11838},[327],[329]," command so it will be used for the rest of the run.",[575,12096,12097],{},[319,12098,12099,627,12102,641,12105,12107,594,12112,12115,968,12117,12120,968,12122,594,12125,594,12128,12131,968,12133,594,12136,12139,968,12141,12145,12150,12152,594,12157,12160,968,12162,12166],{},[580,12100,1226],{"className":12101},[583,1225],[580,12103,12066],{"className":12104},[583,1029],[587,12106],{},[580,12108,12110,1789],{"className":12109},[583,1225],[587,12111],{},[580,12113,1793],{"className":12114},[583,1029],[587,12116],{},[580,12118,1243],{"className":12119},[583,972],[587,12121],{},[580,12123,1265],{"className":12124},[583,972],[580,12126,12066],{"className":12127},[583,1029],[580,12129,11901],{"className":12130},[583,592],[587,12132],{},[580,12134,11838],{"className":12135},[583,972],[580,12137,12066],{"className":12138},[583,1029],[587,12140],{},[580,12142,12144],{"className":12143},[583,584],"; ... rest of normal setup code",[580,12146,12148,1869],{"className":12147},[583,1225],[587,12149],{},[587,12151],{},[580,12153,12155,1789],{"className":12154},[583,1225],[587,12156],{},[580,12158,3649],{"className":12159},[583,1029],[587,12161],{},[580,12163,12165],{"className":12164},[583,584],"; ... the rest of normal model code will use the random seed set in `setup`",[580,12167,12169,1869],{"className":12168},[583,1225],[587,12170],{},[22,12172,12173,12174,12176],{},"You can then add a monitor for the ",[319,12175,12066],{}," global or simply output it to\nthe command center whenever you want to know its value. If you are using\nBehaviorSpace to run experiments, you can also include it in the output to be\nable to later reproduce runs that it generates.",[262,12178,12181],{"id":12179,"className":12180},"plotting",[14],[16,12182,248],{"className":12183,"href":247},[19],[22,12185,12186],{},"NetLogo’s plotting features let you create plots to help you understand what’s\ngoing on in your model.",[22,12188,12189,12190,12194],{},"Most plots can be created by creating and editing plot widgets in the Interface\ntab, as described in its ",[16,12191,12193],{"href":12192},"/interfacetab#plots","Plots Section",". However it is\npossible to control plots from procedures, although you need to create them in\nthe Interface tab first.",[34,12196,12199],{"id":12197,"className":12198},"plotting-points",[14],[16,12200,12203],{"className":12201,"href":12202},[19],"#plotting-points","Plotting points",[22,12205,12206,12207,418,12210,301],{},"The two basic commands for actually plotting things are ",[319,12208,12209],{},"plot",[319,12211,12212],{},"plotxy",[22,12214,5015,12215,12217],{},[319,12216,12209],{}," you need only specify the y value you want plotted. The x value will\nautomatically be 0 for the first point you plot, 1 for the second, and so on.\n(That’s if the plot pen’s “interval” is the default value of 1; you can change\nthe interval.)",[22,12219,1411,12220,12222],{},[319,12221,12209],{}," command is especially handy when you want your model to plot a new\npoint at every time step. Example:",[575,12224,12225],{},[319,12226,12227,594,12230,594,12233],{},[580,12228,12209],{"className":12229},[583,972],[580,12231,925],{"className":12232},[583,592],[580,12234,289],{"className":12235},[583,592],[22,12237,12238,12239,12241,12242,12245],{},"If you need to specify both the x and y values of the point you want plotted,\nthen use ",[319,12240,12212],{}," instead. This example assumes that a global variable called\n",[319,12243,12244],{},"time"," exists:",[575,12247,12248],{},[319,12249,12250,594,12253,594,12256],{},[580,12251,12212],{"className":12252},[583,972],[580,12254,12244],{"className":12255},[583,1029],[580,12257,12259],{"className":12258},[583,1029],"count-turtles",[34,12261,12264],{"id":12262,"className":12263},"plot-commands",[14],[16,12265,12268],{"className":12266,"href":12267},[19],"#plot-commands","Plot commands",[22,12270,12271,12272,550,12274,12276],{},"Each plot and its pens have setup and update code fields that may contain\ncommands (usually containing ",[319,12273,12209],{},[319,12275,12212],{},"). These commands are run\nautomatically triggered by other commands in NetLogo.",[22,12278,12279,12280,12282,12283,12286,12287,12289],{},"Plot setup commands and pen setup commands are run when the either ",[319,12281,1863],{},"\nor ",[319,12284,12285],{},"setup-plots"," commands are run. If the ",[319,12288,6925],{}," command is run in the body of\nthe plot setup commands then the pen setup commands will not run.",[22,12291,12292,12293,290,12295,550,12297,12286,12300,12302],{},"Plot update commands and pen update commands are run when the either\n",[319,12294,1863],{},[319,12296,3712],{},[319,12298,12299],{},"update-plots",[319,12301,6925],{}," command\nis run in the body of the plot update commands then the pen update commands will\nnot run.",[22,12304,12305],{},"Here are the four commands that trigger plotting explained in more detail.",[44,12307,12308,12313,12321,12329],{},[47,12309,12310,12312],{},[319,12311,12285],{}," executes commands for one plot at a time. For each plot, the\nplot’s setup commands are executed. If the stop command is not encountered\nwhile running those commands, then each of the plot’s pens will have their\nsetup code executed.",[47,12314,12315,12317,12318,12320],{},[319,12316,12299],{}," is very similar to ",[319,12319,12285],{},". For each plot, the plot’s\nupdate commands are executed. If the stop command is not encountered while\nrunning those commands, then each of the plot’s pens will have their update\ncode executed.",[47,12322,12323,12325,12326,12328],{},[319,12324,3712],{}," is exactly the same as ",[319,12327,12299],{}," except that the tick counter is\nincremented before the plot commands are executed.",[47,12330,12331,12333,12334,12336,12337,301],{},[319,12332,1863],{}," first resets the tick counter to 0, and then does the equivalent\nof ",[319,12335,12285],{}," followed by ",[319,12338,12299],{},[22,12340,12341,12342,418,12344,12346],{},"A typical model will use ",[319,12343,1863],{},[319,12345,3712],{}," like so:",[575,12348,12349],{},[319,12350,12351,594,12354,12357,968,12359,12362,968,12364,12367,968,12369,12372,12377,12379,594,12384,12387,968,12389,12392,968,12394,12397],{},[580,12352,1789],{"className":12353},[583,1225],[580,12355,1793],{"className":12356},[583,1029],[587,12358],{},[580,12360,1243],{"className":12361},[583,972],[587,12363],{},[580,12365,1673],{"className":12366},[583,1029],[587,12368],{},[580,12370,1863],{"className":12371},[583,972],[580,12373,12375,1869],{"className":12374},[583,1225],[587,12376],{},[587,12378],{},[580,12380,12382,1789],{"className":12381},[583,1225],[587,12383],{},[580,12385,3649],{"className":12386},[583,1029],[587,12388],{},[580,12390,1673],{"className":12391},[583,1029],[587,12393],{},[580,12395,3712],{"className":12396},[583,972],[580,12398,12400,1869],{"className":12399},[583,1225],[587,12401],{},[22,12403,12404,12405,418,12407,12409,12410,12412,12413,12415,12416,12418],{},"Note that in this example we plot from both the ",[319,12406,1793],{},[319,12408,3649],{}," procedures\n(because ",[319,12411,1863],{}," runs plot setup and plot update commands). We do this\nbecause we want our plot to include the initial state of the system at the end\nof ",[319,12414,1793],{},". We plot at the end of the ",[319,12417,3649],{}," procedure, not the beginning, because\nwe want the plot always to be up to date after the go button stops.",[22,12420,12421,12422,418,12424,12426,12427,12429,12430,12438,12439,301],{},"Models that don’t use ticks but still want to do plotting will instead use\n",[319,12423,12285],{},[319,12425,12299],{},". In the previous code, replace ",[319,12428,1863],{},"\nwith ",[319,12431,12432,594,12435],{},[580,12433,12285],{"className":12434},[583,972],[580,12436,12299],{"className":12437},[583,972]," and replace tick with ",[319,12440,12299],{},[1449,12442,12443],{},[22,12444,12445],{},"Code Example: Plotting Example",[34,12447,12450],{"id":12448,"className":12449},"other-kinds-of-plots",[14],[16,12451,12454],{"className":12452,"href":12453},[19],"#other-kinds-of-plots","Other kinds of plots",[22,12456,12457],{},"By default, NetLogo plot pens plot in line mode, so that the points you plot are\nconnected by a line.",[22,12459,12460,12461,12464,12465,418,12467,12469,12470,12473],{},"If you want to move the pen without plotting, you can use the ",[319,12462,12463],{},"plot-pen-up","\ncommand. After this command is issued, the ",[319,12466,12209],{},[319,12468,12212],{}," commands move the\npen but do not actually draw anything. Once the pen is where you want it, use\n",[319,12471,12472],{},"plot-pen-down"," to put the pen back down.",[22,12475,12476],{},"If you want to plot individual points instead of lines, or you want to draw bars\ninstead of lines or points, you need to change the plot pen’s “mode”. Three\nmodes are available: line, bar, and point. Line is the default mode.",[22,12478,12479,12480,12483],{},"Normally, you change a pen’s mode by editing the plot. This changes the pen’s\ndefault mode. It’s also possible to change the pen’s mode temporarily using the\n",[319,12481,12482],{},"set-plot-pen-mode"," command. That command takes a number as input: 0 for line, 1\nfor bar, 2 for point.",[34,12485,12488],{"id":12486,"className":12487},"histograms",[14],[16,12489,12492],{"className":12490,"href":12491},[19],"#histograms","Histograms",[22,12494,12495],{},"A histogram is a special kind of plot that measures how frequently certain\nvalues, or values in certain ranges, occur in a collection of numbers that arise\nin your model.",[22,12497,12498],{},"For example, suppose the turtles in your model have an age variable. You could\ncreate a histogram of the distribution of ages among your turtles with the\nhistogram command, like this:",[575,12500,12501],{},[319,12502,12503,627,12506,851,12510,594,12513],{},[580,12504,1047],{"className":12505},[583,972],[580,12507,12509],{"className":12508},[583,1029],"age",[580,12511,855],{"className":12512},[583,592],[580,12514,289],{"className":12515},[583,592],[22,12517,12518],{},"The numbers you want to histogram don’t have to come from an agentset; they\ncould be any list of numbers.",[22,12520,12521],{},"Note that using the histogram command doesn’t automatically switch the current\nplot pen to bar mode. If you want bars, you have to set the plot pen to bar mode\nyourself. (As we said before, you can change a pen’s default mode by editing the\nplot in the Interface tab.)",[22,12523,12524,12525,3468],{},"Like other types of plots, histograms can be set to auto scale. However, auto\nscaled histograms do not automatically resize themselves horizontally like other\nplot types do. To set the range programmatically, you can use the\n",[319,12526,12527],{},"set-plot-x-range",[22,12529,12530,12531,12534,12535,12538],{},"The width of the bars in a histogram is controlled by the plot pen’s interval.\nYou can set a plot pen’s default interval by editing the plot in the Interface\ntab. You can also change the interval temporarily with the\n",[319,12532,12533],{},"set-plot-pen-interval"," command or the ",[319,12536,12537],{},"set-histogram-num-bars",". If you use the\nlatter command, NetLogo will set the interval appropriately so as to fit the\nspecified number of bars within the plot’s current x range.",[1449,12540,12541],{},[22,12542,12543],{},"Code Example: Histogram Example",[34,12545,12548],{"id":12546,"className":12547},"clearing-and-resetting",[14],[16,12549,12552],{"className":12550,"href":12551},[19],"#clearing-and-resetting","Clearing and resetting",[22,12554,12555,12556,12559,12560,12563,12564,12572],{},"You can clear the current plot with the ",[319,12557,12558],{},"clear-plot"," command, or clear every\nplot in your model with ",[319,12561,12562],{},"clear-all-plots",". The ",[319,12565,12566,594,12569],{},[580,12567,1243],{"className":12568},[583,972],[580,12570,972],{"className":12571},[583,1029]," also clears\nall plots, in addition to clearing everything else in your model.",[22,12574,12575,12576,301],{},"If you want to remove only the points that a particular pen has drawn, use\n",[319,12577,12578],{},"plot-pen-reset",[22,12580,12581,12582,290,12585,418,12587,12590],{},"When a whole plot is cleared, or when a pen is reset, that doesn’t just remove\nthe data that has been plotted. It also restores the plot or pen to its default\nsettings, as they were specified in the Interface tab when the plot was created\nor last edited. Therefore, the effects of such commands as\n",[319,12583,12584],{},"set-plot-background-color",[319,12586,12527],{},[319,12588,12589],{},"set-plot-pen-color"," are\nonly temporary.",[34,12592,12595],{"id":12593,"className":12594},"ranges-and-auto-scaling",[14],[16,12596,12599],{"className":12597,"href":12598},[19],"#ranges-and-auto-scaling","Ranges and auto scaling",[22,12601,12602],{},"The default x and y ranges for a plot are fixed numbers, but they can be changed\nat setup time or as the model runs.",[22,12604,12605,12606,418,12608,12611],{},"To change the ranges at any time, use ",[319,12607,12527],{},[319,12609,12610],{},"set-plot-y-range",".\nOr, you can let the ranges grow automatically. Either way, when the plot is\ncleared the ranges will return to their default values.",[22,12613,12614],{},"By default, all NetLogo plots have the auto scaling feature enabled. This means\nthat if the model tries to plot a point which is outside the current displayed\nrange, the range of the plot will grow along one or both axes so that the new\npoint is visible. Histogram plots, however, do not auto scale horizontally.",[22,12616,12617],{},"In the hope that the ranges won’t have to change every time a new point is\nadded, when the ranges grow they leave some extra room: 25% if growing\nhorizontally, 10% if growing vertically.",[22,12619,12620],{},"If you want to turn off this feature, edit the plot and uncheck the “Auto\nScale?” checkbox. At present, it is not possible to enable or disable this\nfeature only on one axis; it always applies to both axes.",[34,12622,12625],{"id":12623,"className":12624},"using-a-legend",[14],[16,12626,12629],{"className":12627,"href":12628},[19],"#using-a-legend","Using a Legend",[22,12631,12632],{},"You can show the legend of a plot by checking the “Show legend” checkbox in the\nedit dialog. If you don’t want a particular pen to show up in the legend you can\nuncheck the “Show in Legend” checkbox for that pen also in the advanced plot pen\nsettings (the advanced plot pen settings can be opened by clicking the pencil\nbutton for that pen in the plot pens table in the plot edit dialog).",[34,12634,12637],{"id":12635,"className":12636},"temporary-plot-pens",[14],[16,12638,12641],{"className":12639,"href":12640},[19],"#temporary-plot-pens","Temporary plot pens",[22,12643,12644,12645,290,12647,2645,12649,12651],{},"Most plots can get along with a fixed number of pens. But some plots have more\ncomplex needs; they may need to have the number of pens vary depending on\nconditions. In such cases, you can make “temporary” plot pens from code and then\nplot with them. These pens are called “temporary” because they vanish when the\nplot is cleared (by the ",[319,12646,12558],{},[319,12648,12562],{},[319,12650,1243],{},"\ncommands).",[22,12653,12654,12655,12658],{},"To create a temporary plot pen, use the ",[319,12656,12657],{},"create-temporary-plot-pen"," command.\nTypically, this would be done in the Code tab, but it is also possible to use\nthis command from plot setup or plot update code (in the edit dialog). By\ndefault, the new pen is down, is black in color, has an interval of 1, and plots\nin line mode. Commands are available to change all of these settings; see the\nPlotting section of the NetLogo Dictionary.",[22,12660,12661,12662,5070,12665,12668],{},"Before you can use the pen, you’ll have to use the use the ",[319,12663,12664],{},"set-current-plot",[319,12666,12667],{},"set-current-plot-pen"," commands. These are explained in the next section.",[34,12670,12673],{"id":12671,"className":12672},"set-current-plot-and-set-current-plot-pen",[14],[16,12674,12677],{"className":12675,"href":12676},[19],"#set-current-plot-and-set-current-plot-pen","set-current-plot and set-current-plot-pen",[22,12679,12680,12681,12683,12684,3403],{},"Before NetLogo 5, it was not possible to put plot commands in the plot itself.\nAll of the plot code was written in the Code tab with the rest of the code. For\nbackwards compatibility, and for temporary plot pens, this is still supported.\nModels in previous versions of NetLogo (and those using temporary plot pens)\nhave to explicitly state which plot is the current plot with the\n",[319,12682,12664],{}," command and which pen is the current pen with the\n",[319,12685,12667],{},[22,12687,12688,12689,12691],{},"To set the current plot use the ",[319,12690,12664],{}," command with the name of the\nplot enclosed in double quotes, like this:",[575,12693,12694],{},[319,12695,12696,594,12699],{},[580,12697,12664],{"className":12698},[583,972],[580,12700,12702],{"className":12701},[583,3102],"\"Distance vs. Time\"",[22,12704,12705,12706,12708],{},"The name of the plot must be exactly as you typed it when you created the plot.\nNote that later if you change the name of the plot, you’ll also have to update\nthe ",[319,12707,12664],{}," calls in your model to use the new name. (Copy and paste\ncan be helpful here.)",[22,12710,12711,12712,12714],{},"For a plot with multiple pens, you can manually specify which pen you want to\nplot with. If you don’t specify a pen, plotting will take place with the first\npen in the plot. To plot with a different pen, the ",[319,12713,12667],{},"\ncommand was used with the name of the pen enclosed in double quotes, like this:",[575,12716,12717],{},[319,12718,12719,594,12722],{},[580,12720,12667],{"className":12721},[583,972],[580,12723,12725],{"className":12724},[583,3102],"\"distance\"",[22,12727,12728,12729,12740],{},"Once the current pen is set, then commands like ",[319,12730,12731,594,12734,594,12737],{},[580,12732,12209],{"className":12733},[583,972],[580,12735,925],{"className":12736},[583,592],[580,12738,289],{"className":12739},[583,592]," can be\nexecuted for that pen.",[22,12742,12743,12744,12747],{},"Older models with plots usually had their own ",[319,12745,12746],{},"do-plotting"," procedure that\nlooked something like this:",[575,12749,12750],{},[319,12751,12752,594,12755,12758,968,12760,594,12763,12767,968,12769,594,12772,12776,968,12778,594,12781,594,12784,12787,968,12789,594,12792,12796,968,12798,594,12801,594,12804,12807,12809,968,12811,594,12814,12818,968,12820,12823],{},[580,12753,1789],{"className":12754},[583,1225],[580,12756,12746],{"className":12757},[583,1029],[587,12759],{},[580,12761,12664],{"className":12762},[583,972],[580,12764,12766],{"className":12765},[583,3102],"\"populations\"",[587,12768],{},[580,12770,12667],{"className":12771},[583,972],[580,12773,12775],{"className":12774},[583,3102],"\"sheep\"",[587,12777],{},[580,12779,12209],{"className":12780},[583,972],[580,12782,925],{"className":12783},[583,592],[580,12785,1469],{"className":12786},[583,1029],[587,12788],{},[580,12790,12667],{"className":12791},[583,972],[580,12793,12795],{"className":12794},[583,3102],"\"wolves\"",[587,12797],{},[580,12799,12209],{"className":12800},[583,972],[580,12802,925],{"className":12803},[583,592],[580,12805,1472],{"className":12806},[583,1029],[587,12808],{},[587,12810],{},[580,12812,12664],{"className":12813},[583,972],[580,12815,12817],{"className":12816},[583,3102],"\"next plot\"",[587,12819],{},[580,12821,1673],{"className":12822},[583,1029],[580,12824,12826,1869],{"className":12825},[583,1225],[587,12827],{},[22,12829,12830],{},"Once again, this is no longer necessary in NetLogo 5, unless you are using\ntemporary plot pens.",[34,12832,12835],{"id":12833,"className":12834},"conclusion",[14],[16,12836,12839],{"className":12837,"href":12838},[19],"#conclusion","Conclusion",[22,12841,12842],{},"Not every aspect of NetLogo’s plotting system has been explained here. See the\nPlotting section of the NetLogo Dictionary for information on additional\ncommands and reporters related to plotting.",[22,12844,12845],{},"Many of the Sample Models in the Models Library illustrate various advanced\nplotting techniques. Also check out the following code examples:",[1449,12847,12848],{},[22,12849,12850],{},"Code Examples: Plot Axis Example, Plot Smoothing Example, Rolling Plot Example",[262,12852,12854],{"id":631,"className":12853},[14],[16,12855,254],{"className":12856,"href":253},[19],[22,12858,12859,12860],{},"NetLogo represents colors in different ways. A color can be number in the range\n0 to 140, with the exception of 140 itself. Below is a chart showing the range\nof such NetLogo colors. ",[2835,12861],{"alt":12862,"className":12863,"src":12864,"width":12865,"height":12866,"style":12867},"programming/colors.png",[2839],"/_content/images/programming/colors.png",510,450,{"aspectRatio":12868},"510/450",[22,12870,12871],{},"The chart shows that:",[44,12873,12874,12877,12880,12883,12886,12889],{},[47,12875,12876],{},"Some of the colors have names. (You can use these names in your code.)",[47,12878,12879],{},"Every named color except black and white has a number ending in 5.",[47,12881,12882],{},"On either side of each named color are darker and lighter shades of the color.",[47,12884,12885],{},"0 is pure black. 9.9 is pure white.",[47,12887,12888],{},"10, 20, and so on are all so dark they are very nearly black.",[47,12890,12891],{},"19.9, 29.9 and so on are all so light they are very nearly white.",[1449,12893,12894],{},[22,12895,12896,12898],{},[281,12897,1455],{}," The color chart was made in NetLogo with the Color Chart\nExample model.",[22,12900,12901,12902,12909,12910,12917,12918,3468],{},"If you use a number outside the 0 to 140 range, NetLogo will repeatedly add or\nsubtract 140 from the number until it is in the 0 to 140 range. For example, 25\nis orange, so 165, 305, 445, and so on are orange too, and so are -115, -255,\n-395, etc. This calculation is done automatically whenever you set the turtle\nvariable ",[319,12903,12905],{"className":12904},[322],[16,12906,631],{"href":2244,"rel":12907,"className":12908,"dataDisplayText":631,"target":331,"title":631},[327],[329]," or the patch variable ",[319,12911,12913],{"className":12912},[322],[16,12914,815],{"href":2253,"rel":12915,"className":12916,"dataDisplayText":815,"target":331,"title":815},[327],[329],". Should you need to perform\nthis calculation in some other context, use the ",[319,12919,12921],{"className":12920},[322],[16,12922,12926],{"href":12923,"rel":12924,"className":12925,"dataDisplayText":12926,"target":331,"title":12926},"/dictionary#wrap-color",[327],[329],"wrap-color",[22,12928,12929],{},"If you want a color that’s not on the chart, more exist between the integers.\nFor example, 26.5 is a shade of orange halfway between 26 and 27. This doesn’t\nmean you can make any color in NetLogo; the NetLogo color space is only a subset\nof all possible colors. It contains only a fixed set of discrete hues (one hue\nper row of the chart). Starting from one of those hues, you can either decrease\nits brightness (darken it) or decrease its saturation (lighten it), but you\ncannot decrease both brightness and saturation. Also, only the first digit after\nthe decimal point is significant. Thus, color values are rounded down to the\nnext 0.1, so for example, there’s no visible difference between 26.5 and 26.52\nor 26.58.",[22,12931,12932],{},[281,12933,12934],{},"Color primitives",[22,12936,12937],{},"There are a few primitives that are helpful for working with colors.",[22,12939,12940,12941,3468],{},"We have already mentioned the ",[319,12942,12944],{"className":12943},[322],[16,12945,12926],{"href":12923,"rel":12946,"className":12947,"dataDisplayText":12926,"target":331,"title":12926},[327],[329],[22,12949,1411,12950,12959],{},[319,12951,12953],{"className":12952},[322],[16,12954,12958],{"href":12955,"rel":12956,"className":12957,"dataDisplayText":12958,"target":331,"title":12958},"/dictionary#scale-color",[327],[329],"scale-color"," primitive is useful for converting numeric data into colors.",[22,12961,12962,12971,12972,12985],{},[319,12963,12965],{"className":12964},[322],[16,12966,12970],{"href":12967,"rel":12968,"className":12969,"dataDisplayText":12970,"target":331,"title":12970},"/dictionary#shade-of",[327],[329],"shade-of?"," will tell you if two colors are both “shades” of the same basic\nhue. For example, ",[319,12973,12974,594,12977,594,12981],{},[580,12975,12970],{"className":12976},[583,592],[580,12978,12980],{"className":12979},[583,639],"orange",[580,12982,12984],{"className":12983},[583,689],"27"," is true, because 27 is a lighter shade\nof orange.",[22,12987,12988,12989,12992],{},"See the ",[16,12990,631],{"href":12991},"dictionary#color","\nsection of the NetLogo Dictionary for a full list of color commands.",[1449,12994,12995],{},[22,12996,12997,12999],{},[281,12998,1455],{}," Scale-color Example demonstrates the scale-color reporter.",[22,13001,13002],{},[281,13003,13004],{},"RGB and RGBA Colors",[22,13006,13007,13008,13015,13016,13023],{},"NetLogo also represents colors as RGB (red/green/blue) lists and RGBA\n(red/green/blue/alpha) lists. When using RGB colors the full range of colors is\navailable to you. RGBA colors allow all the colors that RGB allows and you can\nalso vary the transparency of a color. RGB and RGBA lists are made up of three\nor four integers, respectively, between 0 and 255. You can set any color\nvariables in NetLogo (",[319,13009,13011],{"className":13010},[322],[16,13012,631],{"href":2244,"rel":13013,"className":13014,"dataDisplayText":631,"target":331,"title":631},[327],[329]," for turtles and links and ",[319,13017,13019],{"className":13018},[322],[16,13020,815],{"href":2253,"rel":13021,"className":13022,"dataDisplayText":815,"target":331,"title":815},[327],[329]," for\npatches) to an RGB list and that agent will be rendered appropriately. So you\ncan set the color of patch 0 0 to pure red using the following code:",[575,13025,13026],{},[319,13027,13028,594,13031,627,13034,594,13038,594,13041,641],{},[580,13029,1265],{"className":13030},[583,972],[580,13032,815],{"className":13033},[583,592],[580,13035,13037],{"className":13036},[583,689],"255",[580,13039,690],{"className":13040},[583,689],[580,13042,690],{"className":13043},[583,689],[22,13045,13046,13047,13050],{},"Turtles, links, and labels can all contain RGBA lists as their color variables.\nPatches only use the alpha value of an RGBA ",[319,13048,13049],{},"pcolors"," in NetLogo 3D, it’s\nignored in 2D NetLogo. You can set the color of a turtle to be approximately\nhalf transparent pure red with the following code:",[575,13052,13053],{},[319,13054,13055,594,13058,627,13061,594,13064,594,13067,594,13070,641],{},[580,13056,1265],{"className":13057},[583,972],[580,13059,631],{"className":13060},[583,592],[580,13062,13037],{"className":13063},[583,689],[580,13065,690],{"className":13066},[583,689],[580,13068,690],{"className":13069},[583,689],[580,13071,13073],{"className":13072},[583,689],"125",[22,13075,13076],{},"Note that decimal values will be rounded towards 0 before the range is checked.\nAn error will be thrown if a value is outside the range 0-255 after this\nrounding.",[22,13078,13079,13080,418,13089,13098,13099,13108,13109,13118],{},"You can convert from a NetLogo color to RGB or HSB (hue/saturation/brightness)\nusing ",[319,13081,13083],{"className":13082},[322],[16,13084,13088],{"href":13085,"rel":13086,"className":13087,"dataDisplayText":13088,"target":331,"title":13088},"/dictionary#extract-hsb",[327],[329],"extract-hsb",[319,13090,13092],{"className":13091},[322],[16,13093,13097],{"href":13094,"rel":13095,"className":13096,"dataDisplayText":13097,"target":331,"title":13097},"/dictionary#extract-rgb",[327],[329],"extract-rgb",". You can use ",[319,13100,13102],{"className":13101},[322],[16,13103,13107],{"href":13104,"rel":13105,"className":13106,"dataDisplayText":13107,"target":331,"title":13107},"/dictionary#rgb",[327],[329],"rgb"," to generate rgb\nlists and ",[319,13110,13112],{"className":13111},[322],[16,13113,13117],{"href":13114,"rel":13115,"className":13116,"dataDisplayText":13117,"target":331,"title":13117},"/dictionary#hsb",[327],[329],"hsb"," to convert from an HSB color to RGB.",[22,13120,13121,13122,5070,13131,13140],{},"Since many colors are missing from the NetLogo color space, ",[319,13123,13125],{"className":13124},[322],[16,13126,13130],{"href":13127,"rel":13128,"className":13129,"dataDisplayText":13130,"target":331,"title":13130},"/dictionary#approximate-hsb",[327],[329],"approximate-hsb",[319,13132,13134],{"className":13133},[322],[16,13135,13139],{"href":13136,"rel":13137,"className":13138,"dataDisplayText":13139,"target":331,"title":13139},"/dictionary#approximate-rgb",[327],[329],"approximate-rgb"," often can’t give you the exact color you ask for, but\nthey try to come as close as possible.",[22,13142,13143],{},"Example:",[575,13145,13146],{},[319,13147,13148,594,13151,594,13155,594,13158,594,13161,594,13164,594,13167,13171,13173,594,13176,594,13179,594,13182],{},[580,13149,2532],{"className":13150},[583,972],[580,13152,13154],{"className":13153},[583,1029],"my-color",[580,13156,13139],{"className":13157},[583,592],[580,13159,690],{"className":13160},[583,689],[580,13162,690],{"className":13163},[583,689],[580,13165,13037],{"className":13166},[583,689],[580,13168,13170],{"className":13169},[583,584],";; my-color is now 104.7",[587,13172],{},[580,13174,1079],{"className":13175},[583,972],[580,13177,13097],{"className":13178},[583,592],[580,13180,13154],{"className":13181},[583,1029],[580,13183,13185],{"className":13184},[583,584],";; shows [48 88 161] which is pretty far from [0 0 255], the color we started with",[22,13187,13188],{},"This is an approximation, but it is still near NetLogo blue which is 105.",[22,13190,13191],{},"Using RGBA colors, the user has more options when it comes to an agent’s color.",[22,13193,13194],{},"Example: you can change any turtle from its existing NetLogo color to a sixty\npercent transparent version of that color using:",[575,13196,13197],{},[319,13198,13199,594,13202,594,13205,627,13208,594,13211,594,13214,594,13217,594,13221,594,13224,641],{},[580,13200,536],{"className":13201},[583,972],[580,13203,943],{"className":13204},[583,592],[580,13206,289],{"className":13207},[583,592],[580,13209,1265],{"className":13210},[583,972],[580,13212,631],{"className":13213},[583,592],[580,13215,9469],{"className":13216},[583,592],[580,13218,13220],{"className":13219},[583,689],"102",[580,13222,13097],{"className":13223},[583,592],[580,13225,631],{"className":13226},[583,592],[22,13228,13229],{},"Note: because 255 is fully opaque and sixty percent transparent is equal to\nforty percent opaque, the correct alpha value is 255 * .4 = 102. See the\npalette extension section below for an alternate implementation.",[1449,13231,13232],{},[22,13233,13234,13236],{},[281,13235,2923],{}," HSB and RGB Example (lets you experiment with the HSB and\nRGB color systems), Transparency Example",[22,13238,13239],{},[281,13240,13241],{},"Palette Extension",[22,13243,13244],{},"The palette extension offers primitives that give the user more control over\ncolors. It allows for direct manipulation of RGBA and HSB components without the\nrequiring list manipulations.",[22,13246,13247],{},"Example: changing the transparency of any turtle to sixty percent transparent\nwith the palette extension:",[575,13249,13250],{},[319,13251,13252,627,13255,641,13259,13261,594,13264,594,13267,627,13270,594,13274,641],{},[580,13253,5409],{"className":13254},[583,1225],[580,13256,13258],{"className":13257},[583,1029],"palette",[587,13260],{},[580,13262,536],{"className":13263},[583,972],[580,13265,943],{"className":13266},[583,592],[580,13268,289],{"className":13269},[583,592],[580,13271,13273],{"className":13272},[583,1029],"palette:set-transparency",[580,13275,11207],{"className":13276},[583,689],[22,13278,13279],{},"The extension offers similar commands for Red, Green, Blue, Alpha, Hue,\nSaturation, and Brightness.",[22,13281,12988,13282,13285],{},[16,13283,13284],{"href":13258},"documentation"," of the palette extension for more\ninformation.",[1449,13287,13288],{},[22,13289,13290,13292],{},[281,13291,2923],{}," Palette Example, Color Bubbles, Color Painting, Color\nReveal",[22,13294,13295],{},[281,13296,13297],{},"Color Picker dialog",[22,13299,1411,13300,13304],{},[16,13301,13303],{"href":13302},"colorpicker","Color Picker"," dialog helps you experiment with and choose\ncolors. Open it by choosing Color Picker on the Tools Menu.",[262,13306,13309],{"id":13307,"className":13308},"movies",[14],[16,13310,260],{"className":13311,"href":259},[19],[22,13313,13314],{},"This section describes how to capture an “.mp4” movie of a NetLogo model.",[22,13316,13317,13318,13324],{},"First, use the ",[16,13319,13321],{"href":13320},"vid#vid:start-recorder",[319,13322,13323],{},"vid:start-recorder"," command to\nstart the video recorder.",[22,13326,13327,13328,6573,13334,13340],{},"To add a frame to your movie, use either\n",[16,13329,13331],{"href":13330},"vid#vid:record-view",[319,13332,13333],{},"vid:record-view",[16,13335,13337],{"href":13336},"vid#vid:record-interface",[319,13338,13339],{},"vid:record-interface",", depending on whether\nyou want the movie to show just the current view, or the entire Interface tab.\nIn a single movie, the resolution will be one of the following:",[44,13342,13343,13361,13372],{},[47,13344,13345,13346,594,13348,13360],{},"The resolution specified in the call to ",[319,13347,13323],{},[481,13349,13350],{},[319,13351,13352,594,13356],{},[580,13353,13355],{"className":13354},[583,1029],"width",[580,13357,13359],{"className":13358},[583,1029],"height","\nif you specified the resolution. These are optional parameters.",[47,13362,13363,13364,13366,13367,13369,13370],{},"The resolution of the view if you did not specify a resolution in the call to\n",[319,13365,13323],{}," and call ",[319,13368,13333],{}," before calling\n",[319,13371,13339],{},[47,13373,13374,13375,13366,13377,13369,13379],{},"The resolution of the interface if you did not specify a resolution in the\ncall to ",[319,13376,13323],{},[319,13378,13339],{},[319,13380,13333],{},[22,13382,13383],{},"Note that if the resolution of a recorded image doesn’t match the resolution of\nthe recording it will be scaled to fit which can result in images which look\nblurry or out-of-focus.",[22,13385,13386,13387,13393,13394,13397],{},"When you’re done adding frames, use\n",[16,13388,13390],{"href":13389},"vid#vid:save-recording",[319,13391,13392],{},"vid:save-recording",". The filename you provide\nshould end with ",[319,13395,13396],{},".mp4",", the extension for MP4-encoded movies (playable in\nQuickTime and other programs).",[575,13399,13400],{},[319,13401,13402,13406,627,13411,641,13415,13417,13419,13423,13425,13427,13430,13432,13435,13437,594,13440,13444,13446,594,13449,13452,6451,13454,13457,968,13459,986,13462,13464,594,13467],{},[580,13403,13405],{"className":13404},[583,584],";; export a 30 frame movie of the view",[580,13407,13409,5409],{"className":13408},[583,1225],[587,13410],{},[580,13412,13414],{"className":13413},[583,1029],"vid",[587,13416],{},[587,13418],{},[580,13420,13422],{"className":13421},[583,584],";...",[587,13424],{},[587,13426],{},[580,13428,1793],{"className":13429},[583,1029],[587,13431],{},[580,13433,13323],{"className":13434},[583,1029],[587,13436],{},[580,13438,13333],{"className":13439},[583,1029],[580,13441,13443],{"className":13442},[583,584],";; show the initial state",[587,13445],{},[580,13447,3932],{"className":13448},[583,972],[580,13450,9265],{"className":13451},[583,689],[587,13453],{},[580,13455,3649],{"className":13456},[583,1029],[587,13458],{},[580,13460,13333],{"className":13461},[583,1029],[587,13463],{},[580,13465,13392],{"className":13466},[583,1029],[580,13468,13470],{"className":13469},[583,3102],"\"out.mp4\"",[22,13472,13473],{},"A movie will play back at 25 frames per second. To make the movie playback\nfaster or slower, consider using a video postprocessing tool.",[22,13475,13476,13477,13483],{},"To check whether or not you are recording, call\n",[16,13478,13480],{"href":13479},"vid#vid:recorder-status",[319,13481,13482],{},"vid:recorder-status",", which reports a string\nthat describes the state of the current recorder.",[22,13485,13486,13487,301],{},"To throw away the movie currently being recorded, call\n",[16,13488,13490],{"href":13489},"vid#vid:reset-recorder",[319,13491,13492],{},"vid:reset-recorder",[1449,13494,13495],{},[22,13496,13497,13499],{},[281,13498,1455],{}," Movie Example",[22,13501,13502,13503,13505,13506,332,13508,301],{},"Movies generated when running headless, or by background runs in a parallel\nBehaviorSpace experiment may use only ",[319,13504,13333],{}," primitive. Movies\ngenerated in NetLogo GUI may also use ",[319,13507,13339],{},[16,13509,13511],{"href":13510},"vid#vid:record-source",[319,13512,13513],{},"vid:record-source",[22,13515,13516,13517,13522],{},"NetLogo movies are exported as H.264-encoded MP4 files. To play an MP4 movie,\nyou can use ",[16,13518,13521],{"href":13519,"rel":13520},"http://www.videolan.org/vlc/index",[10666],"the VLC Player",", a free\ndownload from the VideoLAN organization.",[22,13524,13525],{},"Movies can take up a lot of disk space. You will probably want to compress your\nmovies with third-party software. The software may give you a choice of\ndifferent kinds of compression. Some kinds of compression are lossless, while\nothers are lossy. “Lossy” means that in order to make the files smaller, some of\nthe detail in the movie is lost. Depending on the nature of your model, you may\nwant to avoid using lossy compression, for example if the view contains fine\npixel-level detail.",{"title":13527,"searchDepth":13528,"depth":13529,"links":13530},"",5,3,[13531,13533,13550,13580,13593,13594,13602,13603,13604,13612,13624,13625],{"id":36,"depth":13532,"text":42},4,{"id":264,"depth":13534,"text":52,"children":13535},2,[13536,13537,13541,13544,13545,13546,13547,13548,13549],{"id":272,"depth":13529,"text":60},{"id":469,"depth":13529,"text":66,"children":13538},[13539,13540],{"id":1195,"depth":13532,"text":1201},{"id":1438,"depth":13532,"text":1444},{"id":1459,"depth":13529,"text":72,"children":13542},[13543],{"id":1879,"depth":13532,"text":1885},{"id":2213,"depth":13529,"text":78},{"id":296,"depth":13529,"text":84},{"id":2927,"depth":13529,"text":90},{"id":3113,"depth":13529,"text":96},{"id":3375,"depth":13529,"text":102},{"id":3478,"depth":13529,"text":108},{"id":3526,"depth":13534,"text":114,"children":13551},[13552,13553,13554,13555,13566,13567,13568],{"id":3533,"depth":13529,"text":122},{"id":536,"depth":13529,"text":128},{"id":4786,"depth":13529,"text":134},{"id":5290,"depth":13529,"text":140,"children":13556},[13557,13558,13559,13560,13561,13562,13563,13564,13565],{"id":5297,"depth":13532,"text":5303},{"id":5329,"depth":13532,"text":5335},{"id":5341,"depth":13532,"text":5347},{"id":5423,"depth":13532,"text":5429},{"id":5454,"depth":13532,"text":5460},{"id":5466,"depth":13532,"text":5472},{"id":5478,"depth":13532,"text":5484},{"id":5568,"depth":13532,"text":5574},{"id":5886,"depth":13532,"text":5892},{"id":6193,"depth":13529,"text":146},{"id":6290,"depth":13529,"text":152},{"id":6406,"depth":13529,"text":158,"children":13569},[13570,13571,13572,13573,13574,13575,13576,13577,13578,13579],{"id":6425,"depth":13532,"text":6431},{"id":6593,"depth":13532,"text":6599},{"id":6632,"depth":13532,"text":6638},{"id":6649,"depth":13532,"text":6655},{"id":6902,"depth":13532,"text":6908},{"id":6914,"depth":13532,"text":6920},{"id":6931,"depth":13532,"text":6937},{"id":6943,"depth":13532,"text":6949},{"id":7118,"depth":13532,"text":7123},{"id":7312,"depth":13532,"text":7318},{"id":307,"depth":13534,"text":164,"children":13581},[13582,13586,13592],{"id":7334,"depth":13529,"text":172,"children":13583},[13584,13585],{"id":7399,"depth":13532,"text":7405},{"id":7495,"depth":13532,"text":7501},{"id":7523,"depth":13529,"text":178,"children":13587},[13588,13589,13590,13591],{"id":7554,"depth":13532,"text":7560},{"id":7595,"depth":13532,"text":7601},{"id":7663,"depth":13532,"text":7669},{"id":7702,"depth":13532,"text":7708},{"id":7730,"depth":13529,"text":184},{"id":8123,"depth":13534,"text":190},{"id":8224,"depth":13534,"text":196,"children":13595},[13596,13601],{"id":6010,"depth":13529,"text":204,"children":13597},[13598,13599,13600],{"id":8455,"depth":13532,"text":8461},{"id":8624,"depth":13532,"text":8630},{"id":8687,"depth":13532,"text":8693},{"id":8702,"depth":13529,"text":210},{"id":9091,"depth":13534,"text":216},{"id":10671,"depth":13534,"text":222},{"id":11128,"depth":13534,"text":228,"children":13605},[13606,13607],{"id":11135,"depth":13529,"text":236},{"id":11816,"depth":13529,"text":242,"children":13608},[13609,13610,13611],{"id":12014,"depth":13532,"text":12020},{"id":12029,"depth":13532,"text":12035},{"id":12051,"depth":13532,"text":12057},{"id":12179,"depth":13534,"text":248,"children":13613},[13614,13615,13616,13617,13618,13619,13620,13621,13622,13623],{"id":12197,"depth":13532,"text":12203},{"id":12262,"depth":13532,"text":12268},{"id":12448,"depth":13532,"text":12454},{"id":12486,"depth":13532,"text":12492},{"id":12546,"depth":13532,"text":12552},{"id":12593,"depth":13532,"text":12599},{"id":12623,"depth":13532,"text":12629},{"id":12635,"depth":13532,"text":12641},{"id":12671,"depth":13532,"text":12677},{"id":12833,"depth":13532,"text":12839},{"id":631,"depth":13534,"text":254},{"id":13307,"depth":13534,"text":260},"Comprehensive guide to the NetLogo programming language, covering syntax, commands, reporters, and programming concepts.","md",{"source":13629,"metadataOutputPath":13630,"projectConfig":13631,"language":13633,"output":13642,"inheritFrom":13643,"version":13638,"keywords":13644,"tags":13648,"icon":13649,"assetsRoot":13650},"autogen/programming.md","content/programming.metadata.yaml",{"defaults":13632,"projectRoot":301,"outputRoot":13639,"scanRoot":13640,"engine":13641,"version":13638,"dedupeIdenticalDiskWrites":13642},{"language":13633,"output":13634,"inheritFrom":13635,"extension":13627,"title":13637,"version":13638},"en",false,[13636],0,"NetLogo User Manual","7.0.1","content","autogen","handlebars",true,[13636],[114,13645,13646,13647],"Language Reference","Coding","NetLogo",[114,13645,13646],"i-lucide-code","/Volumes/CCL/netlogo/Helio/apps/docs-nuxt/autogen","/programming",{"title":5,"description":13626},"VwAr9N63r91IHyUPyhF6O2in6xIf5yZ2r372VK0D2pE",[13655,13660],{"title":13656,"path":13657,"stem":13658,"description":13659},"Profiler Extension Dictionary: stop","/profiler/stop","profiler/stop","Documentation for the stop primitive.",{"title":13661,"path":13662,"stem":13663,"description":13664},"Python Extension","/py","py","Documentation for the Python extension.",1761669088334]